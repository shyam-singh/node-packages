{
  "manifest": {
    "name": "folder-hash",
    "version": "3.3.3",
    "description": "Create a hash checksum over a folder and its content - its children and their content",
    "main": "index.js",
    "bin": {
      "folder-hash": "bin\\folder-hash"
    },
    "scripts": {
      "start": "node sample.js",
      "test": "mocha --reporter spec test",
      "cover": "nyc mocha test",
      "doc": "./node_modules/.bin/jsdoc index.js -R README.md -d doc"
    },
    "author": {
      "name": "Marc Walter",
      "email": "walter.marc@outlook.com"
    },
    "license": "MIT",
    "files": [
      "cli.js",
      "index.js",
      "bin"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/marc136/node-folder-hash.git"
    },
    "nyc": {
      "reporter": [
        "lcov",
        "text"
      ],
      "report-dir": "test_coverage"
    },
    "dependencies": {
      "debug": "^4.1.1",
      "graceful-fs": "~4.2.0",
      "minimatch": "~3.0.4"
    },
    "devDependencies": {
      "chai": "^4.0.2",
      "chai-as-promised": "^7.1.1",
      "ignore": "^5.1.2",
      "jsdoc": "3.6.4",
      "memfs": "^3.0.4",
      "mocha": "^8.0.1",
      "nyc": "^15.0.0"
    },
    "engines": {
      "node": ">=6.0.0"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-folder-hash-3.3.3-883c8359d54f91b3f02c1a646c00c30e5831365b-integrity\\node_modules\\folder-hash\\package.json",
    "readmeFilename": "README.md",
    "readme": "ï»¿Create a hash checksum over a folder or a file.  \nThe hashes are propagated upwards, the hash that is returned for a folder is generated over all the hashes of its children.  \nThe hashes are generated with the _sha1_ algorithm and returned in _base64_ encoding by default.\n\nEach file returns a name and a hash, and each folder returns additionally an array of children (file or folder elements).  \n\n## Usage \nFirst, install folder-hash with `npm install --save folder-hash` or `yarn add folder-hash`.  \n\n### Simple example\nTo see differences to the last version of this package, I would create hashes over all *.js* and *.json* files. But ignore everything inside folders starting wiht a dot, and also from the folders *node_modules*, *test_coverage*. The structure of the options object is documented <a href=\"#options\">on this page.</a>  \nThis example is also stored in [./examples/readme-example1.js](/examples/readme-example1.js).  \n\n\n```js\nconst { hashElement } = require('folder-hash');\n\nconst options = {\n    folders: { exclude: ['.*', 'node_modules', 'test_coverage'] },\n    files: { include: ['*.js', '*.json'] }\n};\n\nconsole.log('Creating a hash over the current folder:');\nhashElement('.', options)\n    .then(hash => {\n        console.log(hash.toString());\n    })\n    .catch(error => {\n        return console.error('hashing failed:', error);\n    });\n```\n\nThe returned information looks for example like this:\n```\nCreating a hash over the current folder:\n{ name: '.', hash: 'YZOrKDx9LCLd8X39PoFTflXGpRU=,'\n  children: [\n    { name: 'examples', hash: 'aG8wg8np5SGddTnw1ex74PC9EnM=,'\n      children: [\n        { name: 'readme-example1.js', hash: 'Xlw8S2iomJWbxOJmmDBnKcauyQ8=' }\n        { name: 'readme-with-callbacks.js', hash: 'ybvTHLCQBvWHeKZtGYZK7+6VPUw=' }\n        { name: 'readme-with-promises.js', hash: '43i9tE0kSFyJYd9J2O0nkKC+tmI=' }\n        { name: 'sample.js', hash: 'PRTD9nsZw3l73O/w5B2FH2qniFk=' }\n      ]}\n    { name: 'index.js', hash: 'kQQWXdgKuGfBf7ND3rxjThTLVNA=' }\n    { name: 'package.json', hash: 'w7F0S11l6VefDknvmIy8jmKx+Ng=' }\n    { name: 'test', hash: 'H5x0JDoV7dEGxI65e8IsencDZ1A=,'\n      children: [\n        { name: 'parameters.js', hash: '3gCEobqzHGzQiHmCDe5yX8weq7M=' }\n        { name: 'test.js', hash: 'kg7p8lbaVf1CPtWLAIvkHkdu1oo=' }\n      ]}\n  ]}\n```\nAnd the structure may be traversed to e.g. create incremental backups.\n\nIt is also possible to only match the full path and not the basename. The same configuration could look like this:  \n_You should be aware that *nix and Windows behave differently, so please use caution._\n```js\nconst options = {\n    folders: {\n        exclude: ['.*', '**.*', '**node_modules', '**test_coverage'],\n        matchBasename: false, matchPath: true\n    },\n    files: {\n        //include: ['**.js', '**.json' ], // Windows\n        include: ['*.js', '**/*.js', '*.json', '**/*.json'], // *nix\n        matchBasename: false, matchPath: true\n    }\n};\n```\n\n\n### Parameters for the hashElement function\n\n<table>\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Attributes</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>name</td>\n            <td>\n                <span>string</span>\n            </td>\n            <td>\n            </td>\n            <td>element name or an element's path</td>\n        </tr>\n        <tr>\n            <td>dir</td>\n            <td>\n                <span>string</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>directory that contains the element (generated from name if omitted)</td>\n        </tr>\n        <tr>\n            <td>options</td>\n            <td>\n                <span>Object</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                <a href=\"#options\">Options object (see below)</a>\n            </td>\n        </tr>\n        <tr>\n            <td>callback</td>\n            <td>\n                <span>fn</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>Error-first callback function</td>\n        </tr>\n    </tbody>\n</table>\n\n## Options\n### Default values\n```js\n{\n    algo: 'sha1',       // see crypto.getHashes() for options\n    encoding: 'base64', // 'base64', 'hex' or 'binary'\n    files: {\n        exclude: [],\n        include: [],\n        matchBasename: true,\n        matchPath: false,\n        ignoreBasename: false,\n        ignoreRootName: false\n    },\n    folders: {\n        exclude: [],\n        include: [],\n        matchBasename: true,\n        matchPath: false,\n        ignoreRootName: false\n    }\n}\n```\n\n<table>\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Attributes</th>\n            <th>Default</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>algo</td>\n            <td>\n                <span>string</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                'sha1'\n            </td>\n            <td>checksum algorithm, see options in crypto.getHashes()</td>\n        </tr>\n        <tr>\n            <td>encoding</td>\n            <td>\n                <span>string</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                'base64'\n            </td>\n            <td>encoding of the resulting hash. One of 'base64', 'hex' or 'binary'</td>\n        </tr>\n        <tr>\n            <td>files</td>\n            <td>\n                <span>Object</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td colspan=\"2\">\n                <a href=\"#rules-object-properties\">Rules object (see below)</a>\n            </td>\n        </tr>\n        <tr>\n            <td>folders</td>\n            <td>\n                <span>Object</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td colspan=\"2\">\n                <a href=\"#rules-object-properties\">Rules object (see below)</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n#### Rules object properties\n<table>\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Attributes</th>\n            <th>Default</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>exclude</td>\n            <td>\n                <span>Array.&lt;string&gt; || Function</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                []\n            </td>\n            <td>Array of optional exclude glob patterns, see <a href=\"https://github.com/isaacs/minimatch#features\">minimatch doc</a>. Can also be a function which returns true if the passed file is excluded.</td>\n        </tr>\n        <tr>\n            <td>include</td>\n            <td>\n                <span>Array.&lt;string&gt; || Function</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                []\n            </td>\n            <td>Array of optional include glob patterns, see <a href=\"https://github.com/isaacs/minimatch#features\">minimatch doc</a>. Can also be a function which returns true if the passed file is included.</td>\n        </tr>\n        <tr>\n            <td>matchBasename</td>\n            <td>\n                <span>bool</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                true\n            </td>\n            <td>Match the glob patterns to the file/folder name</td>\n        </tr>\n        <tr>\n            <td>matchPath</td>\n            <td>\n                <span>bool</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                false\n            </td>\n            <td>Match the glob patterns to the file/folder path</td>\n        </tr>\n        <tr>\n            <td>ignoreBasename</td>\n            <td>\n                <span>bool</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                false\n            </td>\n            <td>Set to true to calculate the hash without the basename element</td>\n        </tr>\n        <tr>\n            <td>ignoreRootName</td>\n            <td>\n                <span>bool</span>\n            </td>\n            <td>\n                &lt;optional&gt;<br>\n            </td>\n            <td>\n                false\n            </td>\n            <td>Set to true to calculate the hash without the basename of the root (first) element</td>\n        </tr>\n    </tbody>\n</table>\n\n## Command line usage\nAfter installing it globally via\n```\n$ npm install -g folder-hash\n```\nYou can use it like this:\n```\n# local folder\n$ folder-hash -c config.json .\n# local folder\n$ folder-hash\n# global folder\n$ folder-hash /user/bin\n```\n\nIt also allows to pass an optional JSON configuration file with the `-c` or `--config` flag, which should contain the same configuration as when using the JavaScript API.\n\nYou can also use a local version of folder-hash like this:\n```\n$ npx folder-hash --help\nUse folder-hash on cli like this:\n  folder-hash [--config <json-file>] <file-or-folder>\n```\n\n## Examples\n### Other examples using promises\nSee file *./examples/readme-with-promises.js*\n```js\nconst path = require('path');\nconst { hashElement } = require('folder-hash');\n\n// pass element name and folder path separately\nhashElement('test', path.join(__dirname, '..'))\n  .then(hash => {\n    console.log('Result for folder \"../test\":', hash.toString(), '\\n');\n  })\n  .catch(error => {\n    return console.error('hashing failed:', error);\n  });\n\n// pass element path directly\nhashElement(__dirname)\n  .then(hash => {\n    console.log(`Result for folder \"${__dirname}\":`);\n    console.log(hash.toString(), '\\n');\n  })\n  .catch(error => {\n    return console.error('hashing failed:', error);\n  });\n\n// pass options (example: exclude dotFolders)\nconst options = { encoding: 'hex', folders: { exclude: ['.*'] } };\nhashElement(__dirname, options)\n  .then(hash => {\n    console.log('Result for folder \"' + __dirname + '\" (with options):');\n    console.log(hash.toString(), '\\n');\n  })\n  .catch(error => {\n    return console.error('hashing failed:', error);\n  });\n```\n\n### Other examples using error-first callbacks\nSee *./examples/readme-with-callbacks.js*\n\n```js\nconst path = require('path');\nconst { hashElement } = require('folder-hash');\n\n// pass element name and folder path separately\nhashElement('test', path.join(__dirname, '..'), (error, hash) => {\n    if (error) {\n        return console.error('hashing failed:', error);\n    } else {\n        console.log('Result for folder \"../test\":', hash.toString(), '\\n');\n    }\n});\n\n// pass element path directly\nhashElement(__dirname, (error, hash) => {\n    if (error) {\n        return console.error('hashing failed:', error);\n    } else {\n        console.log('Result for folder \"' + __dirname + '\":');\n        console.log(hash.toString(), '\\n');\n    }\n});\n\n// pass options (example: exclude dotFiles)\nconst options = { algo: 'md5', files: { exclude: ['.*'], matchBasename: true } };\nhashElement(__dirname, options, (error, hash) => {\n    if (error) {\n        return console.error('hashing failed:', error);\n    } else {\n        console.log('Result for folder \"' + __dirname + '\":');\n        console.log(hash.toString());\n    }\n});\n```\n\n\n## Behavior\nThe behavior is documented and verified in the unit tests. Execute `npm test` or `mocha test`, and have a look at the _test_ subfolder.  \nYou can also have a look at the [CircleCI report. ![CircleCI](https://circleci.com/gh/marc136/node-folder-hash/tree/master.svg?style=svg)](https://circleci.com/gh/marc136/node-folder-hash/tree/master)\n\n\n### Creating hashes over files (with default options)\n**The hashes are the same if:**\n\n- A file is checked again\n- Two files have the same name and content (but exist in different folders)\n\n**The hashes are different if:**\n\n- A file was renamed or its content was changed\n- Two files have the same name but different content\n- Two files have the same content but different names\n\n### Creating hashes over folders (with default options)\nContent means in this case a folder's children - both the files and the subfolders with their children.\n\n**The hashes are the same if:**\n\n- A folder is checked again\n- Two folders have the same name and content (but have different parent folders)\n\n**The hashes are different if:**\n\n- A file somewhere in the directory structure was renamed or its content was changed\n- Two folders have the same name but different content\n- Two folders have the same content but different names\n\n## License\nMIT, see LICENSE.txt\n",
    "licenseText": "MIT License\nCopyright (c) 2015 Marc Walter\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/folder-hash/-/folder-hash-3.3.3.tgz#883c8359d54f91b3f02c1a646c00c30e5831365b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/folder-hash/-/folder-hash-3.3.3.tgz",
    "hash": "883c8359d54f91b3f02c1a646c00c30e5831365b",
    "integrity": "sha512-SDgHBgV+RCjrYs8aUwCb9rTgbTVuSdzvFmLaChsLre1yf+D64khCW++VYciaByZ8Rm0uKF8R/XEpXuTRSGUM1A==",
    "registry": "npm",
    "packageName": "folder-hash",
    "cacheIntegrity": "sha512-SDgHBgV+RCjrYs8aUwCb9rTgbTVuSdzvFmLaChsLre1yf+D64khCW++VYciaByZ8Rm0uKF8R/XEpXuTRSGUM1A== sha1-iDyDWdVPkbPwLBpkbADDDlgxNls="
  },
  "registry": "npm",
  "hash": "883c8359d54f91b3f02c1a646c00c30e5831365b"
}
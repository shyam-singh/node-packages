{
  "manifest": {
    "name": "multistream",
    "description": "A stream that emits multiple other streams one after another (streams2)",
    "version": "2.1.1",
    "author": {
      "name": "Feross Aboukhadijeh",
      "email": "feross@feross.org",
      "url": "http://feross.org/"
    },
    "bugs": {
      "url": "https://github.com/feross/multistream/issues"
    },
    "dependencies": {
      "inherits": "^2.0.1",
      "readable-stream": "^2.0.5"
    },
    "devDependencies": {
      "airtap": "0.0.5",
      "array-to-stream": "^1.0.0",
      "simple-concat": "^1.0.0",
      "standard": "*",
      "string-to-stream": "^1.0.0",
      "tape": "^4.0.0",
      "through": "^2.3.4"
    },
    "homepage": "https://github.com/feross/multistream",
    "keywords": [
      "combine streams",
      "join streams",
      "concat streams",
      "multiple streams",
      "combine",
      "join",
      "concat",
      "multiple",
      "file stream",
      "append",
      "append streams",
      "combiner",
      "joiner"
    ],
    "license": "MIT",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git://github.com/feross/multistream.git"
    },
    "scripts": {
      "test": "standard && npm run test-node && npm run test-browser",
      "test-browser": "airtap -- test/*.js",
      "test-browser-local": "airtap --local -- test/*.js",
      "test-node": "tape test/*.js"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-multistream-2.1.1-629d3a29bd76623489980d04519a2c365948148c-integrity\\node_modules\\multistream\\package.json",
    "readmeFilename": "README.md",
    "readme": "# multistream [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/multistream/master.svg\n[travis-url]: https://travis-ci.org/feross/multistream\n[npm-image]: https://img.shields.io/npm/v/multistream.svg\n[npm-url]: https://npmjs.org/package/multistream\n[downloads-image]: https://img.shields.io/npm/dm/multistream.svg\n[downloads-url]: https://npmjs.org/package/multistream\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n#### A stream that emits multiple other streams one after another (streams2)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/multistream.svg)](https://saucelabs.com/u/multistream)\n\n![cat](https://raw.githubusercontent.com/feross/multistream/master/img.jpg)\n\nSimple, robust streams2 version of [combined-stream](https://www.npmjs.org/package/combined-stream). Allows you to combine multiple streams into a single stream. When the first stream ends, the next one starts, and so on, until all streams are consumed.\n\nThis module is used by [WebTorrent](http://webtorrent.io), specifically [create-torrent](https://github.com/feross/create-torrent).\n\n### install\n\n```\nnpm install multistream\n```\n\n### usage\n\nUse `multistream` like this:\n\n```js\nvar MultiStream = require('multistream')\nvar fs = require('fs')\n\nvar streams = [\n  fs.createReadStream(__dirname + '/numbers/1.txt'),\n  fs.createReadStream(__dirname + '/numbers/2.txt'),\n  fs.createReadStream(__dirname + '/numbers/3.txt')\n]\n\nMultiStream(streams).pipe(process.stdout) // => 123\n```\n\nYou can also create an object-mode stream with `MultiStream.obj(streams)`.\n\nTo lazily create the streams, wrap them in a function:\n\n```js\nvar streams = [\n  fs.createReadStream(__dirname + '/numbers/1.txt'),\n  function () { // will be executed when the stream is active\n    return fs.createReadStream(__dirname + '/numbers/2.txt')\n  },\n  function () { // same\n    return fs.createReadStream(__dirname + '/numbers/3.txt')\n  }\n]\n\nMultiStream(streams).pipe(process.stdout) // => 123\n```\n\nAlternatively, streams may be created by an asynchronous \"factory\" function:\n\n```js\nvar count = 0;\nfunction factory (cb) {\n  if (count > 3) return cb(null, null)\n  count++\n  setTimeout(function () {\n    cb(null, fs.createReadStream(__dirname + '/numbers/' + count + '.txt'))\n  }, 100)\n}\n\nMultiStream(factory).pipe(process.stdout) // => 123\n```\n\n### contributors\n\n- [Feross Aboukhadijeh](http://feross.org)\n- [Mathias Buus](https://github.com/mafintosh/)\n- [Yuri Astrakhan](https://github.com/nyurik/)\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Feross Aboukhadijeh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/multistream/-/multistream-2.1.1.tgz#629d3a29bd76623489980d04519a2c365948148c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/multistream/-/multistream-2.1.1.tgz",
    "hash": "629d3a29bd76623489980d04519a2c365948148c",
    "integrity": "sha512-xasv76hl6nr1dEy3lPvy7Ej7K/Lx3O/FCvwge8PeVJpciPPoNCbaANcNiBug3IpdvTveZUcAV0DJzdnUDMesNQ==",
    "registry": "npm",
    "packageName": "multistream",
    "cacheIntegrity": "sha512-xasv76hl6nr1dEy3lPvy7Ej7K/Lx3O/FCvwge8PeVJpciPPoNCbaANcNiBug3IpdvTveZUcAV0DJzdnUDMesNQ== sha1-Yp06Kb12YjSJmA0EUZosNllIFIw="
  },
  "registry": "npm",
  "hash": "629d3a29bd76623489980d04519a2c365948148c"
}
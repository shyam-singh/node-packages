{
  "manifest": {
    "name": "yamljs",
    "version": "0.3.0",
    "description": "Standalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.",
    "keywords": [
      "yaml",
      "json",
      "yaml2json",
      "json2yaml"
    ],
    "author": {
      "name": "Jeremy Faivre",
      "email": "contact@jeremyfa.com"
    },
    "main": "./lib/Yaml.js",
    "dependencies": {
      "argparse": "^1.0.7",
      "glob": "^7.0.5"
    },
    "devDependencies": {
      "benchmark": "^2.1.0",
      "coffeeify": "^2.0.1",
      "jasmine-node": "^1.14.5"
    },
    "bin": {
      "yaml2json": "bin\\yaml2json",
      "json2yaml": "bin\\json2yaml"
    },
    "scripts": {
      "test": "cake build; cake test"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/jeremyfa/yaml.js.git"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-yamljs-0.3.0-dc060bf267447b39f7304e9b2bfbe8b5a7ddb03b-integrity\\node_modules\\yamljs\\package.json",
    "readmeFilename": "README.md",
    "readme": "yaml.js\n=======\n\n![Build status](https://travis-ci.org/jeremyfa/yaml.js.svg?branch=develop)\n\nStandalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.\n\nMainly inspired from [Symfony Yaml Component](https://github.com/symfony/Yaml).\n\nHow to use\n----------\n\nImport yaml.js in your html page:\n\n``` html\n<script type=\"text/javascript\" src=\"yaml.js\"></script>\n```\n\nParse yaml string:\n\n``` js\nnativeObject = YAML.parse(yamlString);\n```\n\nDump native object into yaml string:\n\n``` js\nyamlString = YAML.stringify(nativeObject[, inline /* @integer depth to start using inline notation at */[, spaces /* @integer number of spaces to use for indentation */] ]);\n```\n\nLoad yaml file:\n\n``` js\nnativeObject = YAML.load('file.yml');\n```\n\nLoad yaml file:\n\n``` js\nYAML.load('file.yml', function(result)\n{\n    nativeObject = result;\n});\n```\n\nUse with node.js\n----------------\n\nInstall module:\n\n``` bash\nnpm install yamljs\n```\n\nUse it:\n\n``` js\nYAML = require('yamljs');\n\n// parse YAML string\nnativeObject = YAML.parse(yamlString);\n\n// Generate YAML\nyamlString = YAML.stringify(nativeObject, 4);\n\n// Load yaml file using YAML.load\nnativeObject = YAML.load('myfile.yml');\n```\n\nCommand line tools\n------------------\n\nYou can enable the command line tools by installing yamljs as a global module:\n\n``` bash\nnpm install -g yamljs\n```\n\nThen, two cli commands should become available: **yaml2json** and **json2yaml**. They let you convert YAML to JSON and JSON to YAML very easily.\n\n**yaml2json**\n\n```\nusage: yaml2json [-h] [-v] [-p] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 YAML file or directory containing YAML files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -p, --pretty          Output pretty (indented) JSON.\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code (use \n                        with --pretty, default: 2).\n  -s, --save            Save output inside JSON file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find YAML files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**json2yaml**\n\n```\nusage: json2yaml [-h] [-v] [-d DEPTH] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 JSON file or directory containing JSON files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -d DEPTH, --depth DEPTH\n                        Set minimum level of depth before generating inline \n                        YAML (default: 2).\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code \n                        (default: 2).\n  -s, --save            Save output inside YML file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find JSON files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**examples**\n\n``` bash\n# Convert YAML to JSON and output resulting JSON on the console\nyaml2json myfile.yml\n\n# Store output inside a JSON file\nyaml2json myfile.yml > output.json\n\n# Output \"pretty\" (indented) JSON\nyaml2json myfile.yml --pretty\n\n# Save the output inside a file called myfile.json\nyaml2json myfile.yml --pretty --save\n\n# Watch a full directory and convert any YAML file into its JSON equivalent\nyaml2json mydirectory --pretty --save --recursive\n\n# Convert JSON to YAML and store output inside a JSON file\njson2yaml myfile.json > output.yml\n\n# Output YAML that will be inlined only after 8 levels of indentation\njson2yaml myfile.json --depth 8\n\n# Save the output inside a file called myfile.json with 4 spaces for each indentation\njson2yaml myfile.json --indentation 4\n\n# Watch a full directory and convert any JSON file into its YAML equivalent\njson2yaml mydirectory --pretty --save --recursive\n\n",
    "licenseText": "Copyright (c) 2010 Jeremy Faivre\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/yamljs/-/yamljs-0.3.0.tgz#dc060bf267447b39f7304e9b2bfbe8b5a7ddb03b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/yamljs/-/yamljs-0.3.0.tgz",
    "hash": "dc060bf267447b39f7304e9b2bfbe8b5a7ddb03b",
    "integrity": "sha512-C/FsVVhht4iPQYXOInoxUM/1ELSf9EsgKH34FofQOp6hwCPrW4vG4w5++TED3xRUo8gD7l0P1J1dLlDYzODsTQ==",
    "registry": "npm",
    "packageName": "yamljs",
    "cacheIntegrity": "sha512-C/FsVVhht4iPQYXOInoxUM/1ELSf9EsgKH34FofQOp6hwCPrW4vG4w5++TED3xRUo8gD7l0P1J1dLlDYzODsTQ== sha1-3AYL8mdEezn3ME6bK/votafdsDs="
  },
  "registry": "npm",
  "hash": "dc060bf267447b39f7304e9b2bfbe8b5a7ddb03b"
}
{
  "manifest": {
    "name": "reload",
    "version": "3.2.1",
    "files": [
      "bin",
      "lib",
      "index.js"
    ],
    "description": "Node.js module to refresh and reload your code in your browser when your code changes. No browser plugins required.",
    "repository": {
      "type": "git",
      "url": "git@github.com:alallier/reload.git"
    },
    "keywords": [
      "reload",
      "refresh",
      "http",
      "express",
      "development"
    ],
    "author": {
      "name": "JP Richardson",
      "email": "jprichardson@gmail.com"
    },
    "contributors": [
      {
        "name": "Alexander J. Lallier",
        "email": "alexanderlallier@gmail.com"
      }
    ],
    "license": "MIT",
    "dependencies": {
      "cli-color": "~2.0.0",
      "commander": "~9.4.0",
      "finalhandler": "~1.2.0",
      "minimist": "~1.2.0",
      "open": "^8.0.0",
      "serve-static": "~1.15.0",
      "supervisor": "~0.12.0",
      "ws": "~8.11.0"
    },
    "devDependencies": {
      "codecov": "3.8.2",
      "sinon": "15.0.1",
      "standard": "17.0.0",
      "express": "4.18.2",
      "mocha": "10.2.0",
      "nyc": "15.1.0"
    },
    "main": "./index.js",
    "scripts": {
      "test": "npm run standard && npm run unitTests",
      "unitTests": "mocha --recursive --timeout 5000 test",
      "standard": "standard \"**/*.js\" \"bin/**/*\"",
      "cover": "nyc --reporter=html --reporter=text mocha --timeout 5000 --recursive test",
      "coverage": "npm run cover",
      "report-coverage": "nyc npm run unitTests && nyc report --reporter=text-lcov > coverage.lcov && \"./node_modules/.bin/codecov\""
    },
    "bin": {
      "reload": "bin\\reload"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-reload-3.2.1-42d43e33e327efe1348c723272c6835fe333349a-integrity\\node_modules\\reload\\package.json",
    "readmeFilename": "README.md",
    "readme": "reload\n=======\n\n[![Build Status](https://github.com/alallier/reload/workflows/CI/badge.svg)](https://github.com/alallier/reload/actions?query=workflow%3ACI)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n[![codecov](https://codecov.io/gh/alallier/reload/branch/master/graph/badge.svg)](https://codecov.io/gh/alallier/reload)\n[![NPM version](https://img.shields.io/npm/v/reload.svg)](https://www.npmjs.com/package/reload)\n\nAutomatically refresh and reload your code in your browser when your code changes. No browser plugins required.\n\nTable Of Contents\n---\n* [Why](#why)\n* [How does it work?](#how-does-it-work)\n* [Installation](#installation)\n* [Two ways to use reload](#two-ways-to-use-reload)\n* [Using reload in Express](#using-reload-in-express)\n  * [Express Example](#express-example)\n  * [Manually firing server-side reload events](#manually-firing-server-side-reload-events)\n    * [Manual fire with promises](#manual-fire-with-promises)\n    * [Manual fire with async/await](#manual-fire-with-asyncawait)\n  * [API for Express](#api-for-express)\n    * [With try/catch](#with-trycatch)\n    * [With async/await](#with-asyncawait)\n    * [Parameters](#parameters)\n      * [Table of reload parameters](#table-of-reload-parameters)\n      * [Table of options for reload opts parameter](#table-of-options-for-reload-opts-parameter)\n    * [Returns](#returns)\n* [Using reload as a command line application](#using-reload-as-a-command-line-application)\n  * [Usage for Command Line Application](#usage-for-command-line-application)\n* [License](#license)\n\nWhy?\n----\n\nRestarting your HTTP server and refreshing your browser is annoying.\n\nHow does it work?\n----------\n\nReload works in two different ways depending on if you're using it:\n\n1. In an existing Express application in which it creates a server side route for reload or,\n2. As a command line tool which starts its own Express application to monitor the file you're editing for changes and to serve `reload-client.js` to the browser.\n\nOnce reload-server and reload-client are connected, the client side code opens a [WebSocket](https://en.wikipedia.org/wiki/WebSocket) to the server and waits for the WebSocket to close, once it closes, reload waits for the server to come back up (waiting for a socket on open event), once the socket opens we reload the page.\n\nInstallation\n---\n\n    npm install [-g] [--save-dev] reload\n\n\nTwo ways to use reload\n---\n\nThere are two different ways to use reload.\n\n1. In an [Express](http://expressjs.com/) application, allowing your whole project to utilize reload when the code is altered\n2. As a command line application to serve up static HTML files and be able to reload when the code is altered\n\nUsing reload in Express\n---\nWhen used with Express **reload creates** a new Express route for reload. When you restart the server, the client will detect the server being restarted and automatically refresh the page.\n\nReload can be used in conjunction with tools that allow for automatically restarting the server such as [supervisor](https://github.com/isaacs/node-supervisor) (recommended), [nodemon](https://github.com/remy/nodemon), [forever](https://github.com/nodejitsu/forever), etc.\n\n### Express Example\n\n**`server.js`:**\n```javascript\nvar express = require('express')\nvar http = require('http')\nvar path = require('path')\nvar reload = require('reload')\nvar bodyParser = require('body-parser')\nvar logger = require('morgan')\n\nvar app = express()\n\nvar publicDir = path.join(__dirname, 'public')\n\napp.set('port', process.env.PORT || 3000)\napp.use(logger('dev'))\napp.use(bodyParser.json()) // Parses json, multi-part (file), url-encoded\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(publicDir, 'index.html'))\n})\n\nvar server = http.createServer(app)\n\n// Reload code here\nreload(app).then(function (reloadReturned) {\n  // reloadReturned is documented in the returns API in the README\n\n  // Reload started, start web server\n  server.listen(app.get('port'), function () {\n    console.log('Web server listening on port ' + app.get('port'))\n  })\n}).catch(function (err) {\n  console.error('Reload could not start, could not start server/sample app', err)\n})\n```\n\n**`public/index.html`:**\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>Reload Express Sample App</title>\n  </head>\n  <body>\n    <h1>Reload Express Sample App</h1>\n    <!-- All you have to do is include the reload script and have it be on every page of your project -->\n    <!-- You do not create this route, reload creates it for you automatically -->\n    <script src=\"/reload/reload.js\"></script>\n  </body>\n</html>\n```\n\n**Refer to the [reload express sample app](https://github.com/alallier/reload-sample-app) for this working example.**\n\n### Manually firing server-side reload events\n\nYou can manually call a reload event by calling `reload()` yourself. An example is shown below:\n\n#### Manual fire with promises\n```javascript\nreload(app).then((reloadReturned) => {\n  watch.watchTree(__dirname + \"/public\", function (f, curr, prev) {\n    // Fire server-side reload event\n    reloadReturned.reload();\n  });\n})\n```\n\n#### Manual fire with async/await\n\n```js\nconst startServer = async () => {\n    const reloadReturned = await reload(app);\n\n    watch.watchTree(__dirname + \"/public\", function (f, curr, prev) {\n        // Fire server-side reload event\n        reloadReturned.reload();\n    })\n}\n```\n\n### API for Express\n\nReload returns a promise. The API takes a required express application and an optional options object. The promise returns an object (for information on the returned object [see below](#returns)).\n\n#### With try/catch\n\nTo call Reload you should use a then/catch to call reload.\n\n* ```javascript\n    reload(app [,opts]).then(function (reloadReturned) {\n      // reloadReturned object see returns documentation below for what is returned\n\n      // Reload started\n    }).catch(function (err) {\n      // Reload did not start correctly, handle error\n    })\n  ```\n\n#### With async/await\n\nIf you are in an [asynchronous function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) you can call Reload with [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)\n\n* ```javascript\n  async function asyncCall() {\n    try {\n      var reloadReturned = await reload(app [,opts])\n      // reloadReturned object see returns documentation below for what is returned.\n    } catch (err) {\n      // Handle error\n    }\n  }\n  ```\n\n_Consult the [migration guide](MIGRATION_GUIDE.md) for help updating reload across major versions._\n\n#### Parameters\n\n##### Table of reload parameters\n\n| Parameter Name | Type     | Description                                                                                                         | Optional |\n|----------------|----------|---------------------------------------------------------------------------------------------------------------------|----------|\n| app            | object   | The app. It may work with other frameworks, or even with Connect. At this time, it's only been tested with Express. |          |\n| opts           | object   | An optional object of options for reload. Refer to table [below](#table-of-options-for-reload-opts-parameter) on possible options                                  | âœ“        |\n\n##### Table of options for reload opts parameter\n\n| Parameter Name           | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                                 | Optional | Default |\n|--------------------------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|---------|\n| port                     | number  | Port to run reload on.                                                                                                                                                                                                                                                                                                                                                                                      | âœ“        | 9856    |\n| webSocketServerWaitStart | boolean | When enabled will delay starting and opening WebSocket server when requiring reload. After enabling use theÂ startWebSocketServerÂ function returned in the object provided by the API to start the WebSocket.Â Note: Failing to call the returned function with this option enabled will cause reload not to work. SeeÂ return APIÂ for more information                                                        | âœ“        | FALSE   |\n| route                    | string  | Route that reload should use to serve the client side script file. Changing the route will require the script tag URL to change. Reload will always strip any occurrence of reload.js and append reload.js for you. This is to ensure case, order, and use of / is correct. For example specifying newRoutePath as the route will give reload a route of newRoutePath/reload.js. (Recommend not modifying). | âœ“        | reload  |\n| forceWss                 | boolean | Forces reload client connections to always use `wss` (secure websockerts) even when the window location is HTTP                                                                                                                                                                                                                                                                                             | âœ“        | FALSE   |\n| https                    | object  | HTTP options object. When defined runs reload in HTTPS mode                                                                                                                                                                                                                                                                                                                                                 | âœ“        | {}      |\n| https.certAndKey         | object  | Object that holds configuration for HTTPS key and cert configuration                                                                                                                                                                                                                                                                                                                                        | âœ“        | {}      |\n| https.certAndKey.key     | string  | File path to HTTP key (not optional when defining an HTTPS object)                                                                                                                                                                                                                                                                                                                                          |          | null    |\n| https.certAndKey.cert    | string  | File path to HTTP cert (not optional when defining an HTTPS object)                                                                                                                                                                                                                                                                                                                                         |          | null    |\n| https.p12                | object  | Object that holds configuration for HTTPS P12 configuration                                                                                                                                                                                                                                                                                                                                                 | âœ“        | {}      |\n| https.p12.p12Path        | string  | File path or file contents as string (Not optional when using P12 configuration                                                                                                                                                                                                                                                                                                                             |          | null    |\n| https.passphrase         | string  |  Shared passphrase used for a single private key and/or p12.                                                                                                                                                                                                                                                                                                                                                                                              | âœ“        | null    |\n| verbose                  | boolean | If set to true, will show logging on the server and client side.                                                                                                                                                                                                                                                                                                                                            | âœ“        | FALSE   |\n\n#### Returns\n\nAn **object** containing:\n\n| Name                 | Type     | Description                                                                                                                                                                                                          |\n|----------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| reload               | function | A function that when called reloads all connected clients. For more information seeÂ manually firing server-side reload events.                                                                                       |\n| startWebSocketServer | function | Returns a promise. Starts and opens the WebSocket server required for reload. Only **defined** when using the optional parameterÂ `webSocketServerWaitStart`. Read theÂ [parameters](#parameters)Â for more information |\n| closeServer          | function | Returns a promise. Closes Reload WebSocket server                                                                                                                                                                    |\n| wss                  | object   | Web socket server                                                                                                                                                                                                    |\n\nUsing reload as a command line application\n---\n\nThere are two ways to use the command line application.\n\n1. In a directory serving blank static HTML files or\n2. In a project with a `package.json` file\n\nEach will require different modes of installing.\n\nIn case one you should install reload globally with `npm install reload -g`. Also with reload installed globally you can go to any directory with an HTML file and use the command reload to constantly watch it and reload it while you make changes.\n\nIn case two you should install locally with `npm install --save-dev`, since this tool is to aid in development you should install it as a dev dependency.\n\nNavigate to your html directory:\n\n    reload -b\n\nThis will open your `index.html` file in the browser. Any changes that you make will now reload in the browser. You don't need to modify your HTML at all.\n\n### Usage for Command Line Application\n\n```\nUsage: reload [options]\n\nOptions:\n\n  -h, --help                     output usage information\n  -V, --version                  output the version number\n  -b, --browser                  Open in the browser automatically.\n  -n, --hostname [hostname]      If -b flag is being used, this allows for custom hostnames. Defaults to localhost.\n  -d, --dir [dir]                The directory to serve up. Defaults to current dir.\n  -w, --watch-dir [watch-dir]    The directory to watch. Defaults the serving directory.\n  -e, --exts [extensions]        Extensions separated by commas or pipes. Defaults to html,js,css.\n  -p, --port [port]              The port to bind to. Can be set with PORT env variable as well. Defaults to 8080\n  -s, --start-page [start-page]  Specify a start page. Defaults to index.html\n  -f, --fallback [fallback]      Fallback to the start page when route is not found\n  -v, --verbose [verbose]        Turning on logging on the server and client side. Defaults to false\n\n```\n\nLicense\n---\n\n[(MIT License)](LICENSE)\n\nCopyright 2023\n\n### Orginal Author:\n\nJP Richardson  <jprichardson@gmail.com>\n\n### Owned by:\n\nAlexander J. Lallier <mralexlallier@gmail.com>\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2013, JP Richardson <jprichardson@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files \n(the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,\n merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE \nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS \nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/reload/-/reload-3.2.1.tgz#42d43e33e327efe1348c723272c6835fe333349a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/reload/-/reload-3.2.1.tgz",
    "hash": "42d43e33e327efe1348c723272c6835fe333349a",
    "integrity": "sha512-ZdM8ZSEeI72zkhh6heMEvJ0vHZoovZXcJI6Zae8CzS7o5vO/WjZsAMMr0y1+3I/fCN7y7ZxABoUwwCswcLHkjQ==",
    "registry": "npm",
    "packageName": "reload",
    "cacheIntegrity": "sha512-ZdM8ZSEeI72zkhh6heMEvJ0vHZoovZXcJI6Zae8CzS7o5vO/WjZsAMMr0y1+3I/fCN7y7ZxABoUwwCswcLHkjQ== sha1-QtQ+M+Mn7+E0jHIycsaDX+MzNJo="
  },
  "registry": "npm",
  "hash": "42d43e33e327efe1348c723272c6835fe333349a"
}
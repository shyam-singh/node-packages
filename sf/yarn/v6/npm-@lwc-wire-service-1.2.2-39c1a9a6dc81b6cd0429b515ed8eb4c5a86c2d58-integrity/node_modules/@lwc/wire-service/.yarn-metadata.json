{
  "manifest": {
    "name": "@lwc/wire-service",
    "version": "1.2.2",
    "description": "@wire service",
    "license": "MIT",
    "main": "dist/wire-service.cjs.js",
    "module": "dist/wire-service.js",
    "typings": "types/index.d.ts",
    "scripts": {
      "clean": "rm -rf dist/ types/",
      "test": "jest",
      "build": "tsc --emitDeclarationOnly && rollup --config ./scripts/rollup/rollup.config.js",
      "start": "concurrently 'yarn build:playground --watch' 'yarn serve:playground'",
      "build:playground": "rollup -c playground/rollup.config.js",
      "serve:playground": "node playground/server.js"
    },
    "files": [
      "dist/",
      "types/"
    ],
    "devDependencies": {
      "@lwc/compiler": "1.2.2",
      "@lwc/engine": "1.2.2",
      "@lwc/rollup-plugin": "1.2.2",
      "@lwc/shared": "1.2.2"
    },
    "lwc": {
      "modules": [
        {
          "name": "wire-service",
          "path": "dist/wire-service.js"
        }
      ]
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "ed43a4a1f80f910bf219019e642c313f80f48f70",
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-@lwc-wire-service-1.2.2-39c1a9a6dc81b6cd0429b515ed8eb4c5a86c2d58-integrity\\node_modules\\@lwc\\wire-service\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Wire Service\n\nThis is the implementation of Lightning Web Component's wire service. It enables declarative binding of services to a LWC component using the `@wire` decorator. It fulfills the goals of the [data service proposal](https://github.com/salesforce/lwc-rfcs/blob/master/text/0000-data-service.md).\n\n## Summary\n\nThe `@wire` decorator provides LWC components with a declarative mechanism to express their data requirements. Imperative access (eg for DML) is not part of the wire service. A summary of the wire service follows:\n\n-   Loading data is expressed declaratively by a component using `@wire([adapterId], [adapterConfig])`\n    -   `[adapterId]` refers to the identity of a wire adapter.\n    -   `[adapterConfig]` is an optional parameter, of type object, that defines wire adapter-specific configuration.\n    -   `[adapterConfig]` may contain static values or reactive references.\n    -   A reactive reference is identified with a `$` prefix. The remainder of the string identifies a class property. A change to a referenced class property causes new data to be requested from the wire adapter.\n-   The wire service delegates to `wire adapters` to source, manage, and provision data. The wire service sits between wire adapters and LWC components.\n-   It's all data from the wire service's perspective. Nothing is metadata.\n-   It is assumed all data mutates over time yet a given snapshot of data is immutable.\n-   A component receiving data does not own that data. It is comparable to a component receiving props does not own the props.\n\n## Example Use Of `@wire`\n\nConsider a component that wants to display the details of a todo item. It uses `@wire` to declare its data requirements.\n\n```js\nimport { LightningElement, api, wire } from 'lwc';\n\n// the wire adapter identifier\nimport { getTodo } from 'todo-api';\n\nexport default class TodoViewer extends LightningElement {\n    @api id;\n\n    // declare the need for data. $id creates a reactive property tied to this.id.\n    // data is provisioned into this.todo.\n    @wire(getTodo, { id: '$id' })\n    todo;\n}\n```\n\n```html\n<template>\n    <template if:true=\"{todo}\">\n        <input type=\"checkbox\" checked=\"{todo.completed}\" /> {todo.title}\n    </template>\n</template>\n```\n\n## Wire Adapter Specification\n\nThe following is a summary of the [wire adapter RFC](https://github.com/salesforce/lwc-rfcs/blob/master/text/0103-wire-adapters.md).\n\nA `wire adapter` provisions data to a wired property or method using an [Event Target](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget). A factory function is registered for declarative `@wire` use by a component.\n\n```ts\n// The identifier for the wire adapter\ntype WireAdapterId = Function|Symbol;\n\n// The factory function invoked for each @wire in a component. The WireEventTarget\n// allows the wire adapter instance to receive configuration data and provision\n// new values.\ntype WireAdapterFactory = (eventTarget: WireEventTarget) => void;\n\n// Event the wire adapter dispatches to provision values to the wired property or method\ninterface ValueChangedEvent {\n    value: any;\n    new(value: any) : ValueChangedEvent;\n}\n\n// Event types the wire adapter may listen for\ntype EventType = 'config' | 'connect' | 'disconnect';\n\n// Event listener callback\ntype Listener = (config?: { [key: string]: any ) => void;\n\n// Target of the @wire\ninterface WireEventTarget extends EventTarget {\n    dispatchEvent(event: ValueChangedEvent): boolean;\n    addEventListener(type: EventType, listener: Listener): void;\n    removeEventListener(type: EventType, listener: Listener): void;\n}\n```\n\nIn the component's `wiring` lifecycle, the wire service invokes the `wireAdapterFactory` function to configure an instance of the wire adapter for each `@wire` instance (which is per component instance).\n\n`eventTarget` is an implementation of [Event Target](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) that supports listeners for the following events:\n\n-   `config` is delivered when the resolved configuration changes. A singular argument is provided: the resolved configuration.\n-   `connect` is delivered when the component is connected.\n-   `disconnect` is delivered when the component is disconnected.\n\nThe wire service remains responsible for resolving the configuration object. `eventTarget` delivers a `config` event when the resolved configuration changes. The value of the configuration is specific to the wire adapter. The wire adapter must treat the object as immutable.\n\nThe wire adapter is responsible for provisioning values by dispatching a `ValueChangedEvent` to the event target. `ValueChangedEvent`'s constructor accepts a single argument: the value to provision. There is no limitation to the shape or contents of the value to provision. The event target handles property assignment or method invocation based on the target of the `@wire`.\n\nThe wire adapter is responsible for maintaining any context it requires. For example, tracking the values it provisions and the originating resolved configuration is shown in the basic example below.\n\n### Registering A Wire Adapter\n\nA wire adapter must be registered with the wire service. The `wire-service` module provides a registration function.\n\n```ts\nregister(adapterId: WireAdapterId, wireAdapterFactory: WireAdapterFactory);\n```\n\n## Example Wire Adapter Implementation\n\n```js\nimport { register, ValueChangedEvent } from 'wire-service';\n\n// Imperative access.\nexport function getTodo(config) {\n    return getObservable(config)\n        .map(makeReadOnlyMembrane)\n        .toPromise();\n}\n\n// Declarative access: register a wire adapter factory for  @wire(getTodo).\nregister(getTodo, function getTodoWireAdapterFactory(eventTarget) {\n    let subscription;\n    let config;\n\n    // Invoked when config is updated.\n    eventTarget.addListener('config', newConfig => {\n        // Capture config for use during subscription.\n        config = newConfig;\n    });\n\n    // Invoked when component connected.\n    eventTarget.addListener('connect', () => {\n        // Subscribe to stream.\n        subscription = getObservable(config)\n            .map(makeReadOnlyMembrane)\n            .subscribe({\n                next: data =>\n                    wiredEventTarget.dispatchEvent(\n                        new ValueChangedEvent({ data, error: undefined })\n                    ),\n                error: error =>\n                    wiredEventTarget.dispatchEvent(\n                        new ValueChangedEvent({ data: undefined, error })\n                    ),\n            });\n    });\n\n    // Invoked when component disconnected.\n    eventTarget.addListener('disconnect', () => {\n        // Release all resources.\n        subscription.unsubscribe();\n    });\n});\n```\n\n# Contributing To The Wire Service\n\n## Build & run the playground\n\nA _playground_ of LWC components using @wire is included. They're served from a basic node server and accessible in your browser.\n\n```bash\nyarn start\n```\n\nLoad the examples in a browser:\n\n```bash\nopen http://localhost:3000/\n```\n",
    "licenseText": "MIT LICENSE\n\nCopyright (c) 2018, Salesforce.com, Inc.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@lwc/wire-service/-/wire-service-1.2.2.tgz#39c1a9a6dc81b6cd0429b515ed8eb4c5a86c2d58",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@lwc/wire-service/-/wire-service-1.2.2.tgz",
    "hash": "39c1a9a6dc81b6cd0429b515ed8eb4c5a86c2d58",
    "integrity": "sha512-B98Et6eOKkwZYnlPExHUViBKklbnLLet2kKjwk+jaya+NNOnZG2xMqmcpZcagigqX5ElAyfoM0JVltCxOZRd+Q==",
    "registry": "npm",
    "packageName": "@lwc/wire-service",
    "cacheIntegrity": "sha512-B98Et6eOKkwZYnlPExHUViBKklbnLLet2kKjwk+jaya+NNOnZG2xMqmcpZcagigqX5ElAyfoM0JVltCxOZRd+Q== sha1-OcGpptyBts0EKbUV7Y60xahsLVg="
  },
  "registry": "npm",
  "hash": "39c1a9a6dc81b6cd0429b515ed8eb4c5a86c2d58"
}
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

export function assert(assertion, message) {
    if (!assertion) {
        throw new Error(message);
    }
}

function isEncoded(urlComponent) {
    try {
        return decodeURIComponent(urlComponent) !== urlComponent;
    } catch (e) {
        // decode error, assuming not encoded. e.g. urlComponent is '%'
        return false;
    }
}

export function mapToQueryString(queryParams, encode = true) {
    return Object.entries(queryParams).reduce((acc, [key, value], idx) => {
        const newValue = encode && !isEncoded(value) ? encodeURIComponent(value) : value;
        return acc.concat(`${idx > 0 ? '&' : ''}${key}=${newValue}`);
    }, '');
}

/**
 * f(any) -> true/false
 *
 * @param {*} obj - Item to check if it's an object
 *
 * @returns {boolean}
 */
export function isObject(obj) {
    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);
}

/**
 * Transform an object by moving a property from one of its object to another.
 *
 * @param {object} obj - Object to transform
 * @param {string} to - Name of the object property which holds the object to move a property into
 * @param {string} from - Name of the object property which holds the object to move a property from
 * @param {string} fromProp - Property on the 'from' object to move into the 'to' object
 * @param {*} [defaultValue] - Default value to assign to the property
 * @param {string} [toProp = fromProp] - Property name on the 'to' object getting added
 */
export function transferProperty(obj = {}, to, from, fromProp, defaultValue, toProp = fromProp) {
    const existsInTo = obj[to] && obj[to][fromProp];
    defaultValue = typeof existsInTo !== 'undefined' ? existsInTo : defaultValue;

    obj = {
        ...obj,
        [to]: {
            ...obj[to],
            [toProp]: (isObject(obj[from]) && obj[from][fromProp]) || defaultValue,
        },
        [from]: { ...obj[from] },
    };
    delete obj[from][fromProp];
    return obj;
}

/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { assert, isObject, mapToQueryString, transferProperty } from 'webruntime/utils';

describe('webruntime/utils', () => {
    describe('assert', () => {
        it('throws if assertion is not verified', () => {
            expect(() => {
                assert(false);
            }).toThrow();
        });
        it('does not throw if assertion is verified', () => {
            expect(() => {
                assert(true);
            }).not.toThrow();
        });
    });

    describe('mapToQueryString', () => {
        it('returns query string with single param', () => {
            expect(mapToQueryString({ a: 'hello' })).toEqual('a=hello');
        });
        it('returns query string with multiple param', () => {
            expect(
                mapToQueryString({
                    a: 'hello',
                    b: 123456,
                    c: null,
                    d: '',
                })
            ).toEqual('a=hello&b=123456&c=null&d=');
        });
        it('returns empty query string with empty map', () => {
            expect(mapToQueryString({})).toEqual('');
        });
        it('encodes params by default', () => {
            expect(mapToQueryString({ a: 'b +' })).toEqual('a=b%20%2B');
        });
        it('does not re-encode encoded params', () => {
            expect(mapToQueryString({ a: 'b%20%2B' })).toEqual('a=b%20%2B');
        });
        it('does not encode params', () => {
            expect(mapToQueryString({ a: 'b +' }, false)).toEqual('a=b +');
        });
    });

    describe('transferProperty()', () => {
        it('handles no input', () => {
            const ret = transferProperty();
            expect(ret).toMatchObject({});
        });
        it('handles missing property', () => {
            const ret = transferProperty({ to: {} }, 'to');
            expect(ret).toMatchObject({});
        });
        it('moves a property', () => {
            const ret = transferProperty({ to: {}, from: { one: 1 } }, 'to', 'from', 'one');
            expect(ret).toMatchObject({ to: { one: 1 }, from: {} });
        });
        it('moves a property to a new name', () => {
            const ret = transferProperty(
                { to: {}, from: { one: 1 } },
                'to',
                'from',
                'one',
                undefined,
                'uno'
            );
            expect(ret).toMatchObject({ to: { uno: 1 }, from: {} });
        });
        it('moves a property to a new object', () => {
            const ret = transferProperty({ from: { one: 1 } }, 'to', 'from', 'one');
            expect(ret).toMatchObject({ to: { one: 1 }, from: {} });
        });
        it('moves a property to a new object from an empty object', () => {
            const ret = transferProperty({}, 'to', 'from', 'two', 'new');
            expect(ret).toMatchObject({ to: { two: 'new' }, from: {} });
        });
        it('moves a property and assigns a default value', () => {
            const ret = transferProperty({ to: {}, from: {} }, 'to', 'from', 'three', 'default');
            expect(ret).toMatchObject({ to: { three: 'default' }, from: {} });
        });

        it('moves a property and assigns a default value only if its not found in either object', () => {
            const ret = transferProperty(
                { to: { three: 3 }, from: {} },
                'to',
                'from',
                'three',
                'default'
            );
            expect(ret).toMatchObject({ to: { three: 3 }, from: {} });
        });

        it('doesnt short circuit falsy values', () => {
            const ret = transferProperty(
                { to: { three: false }, from: {} },
                'to',
                'from',
                'three',
                'default'
            );
            expect(ret).toMatchObject({ to: { three: false }, from: {} });
        });
    });

    describe('isObject()', () => {
        it('handles no input', () => {
            expect(isObject()).toBe(false);
        });
        it('handles null input', () => {
            expect(isObject(null)).toBe(false);
        });
        it('handles string input', () => {
            expect(isObject('string')).toBe(false);
        });
        it('handles function input', () => {
            expect(isObject(() => {})).toBe(false);
        });
        it('handles number input', () => {
            expect(isObject(5)).toBe(false);
        });
        it('handles array input', () => {
            expect(isObject([1, 2, 3])).toBe(false);
        });
        it('handles empty object input', () => {
            expect(isObject({})).toBe(true);
        });
        it('handles object input', () => {
            expect(isObject({ one: 1, two: 2 })).toBe(true);
        });
    });
});

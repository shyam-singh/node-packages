/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { apiCall } from 'webruntime/apiCall';
import { fetch as webruntimeFetch } from 'webruntime/transport';
import { getResourceReferenceFromAuraMethod } from 'forceChatterApi/util';

jest.mock('@app/basePath', () => '', { virtual: true });
jest.mock('@app/csrfToken', () => '', { virtual: true });

jest.mock(
    'forceChatterApi/util',
    () => ({
        getResourceReferenceFromAuraMethod: jest.fn(),
    }),
    { virtual: true }
);

jest.mock('webruntime/transport');

beforeEach(() => {
    jest.clearAllMocks();
});

describe('webruntime/apiCall', () => {
    it('fails with unsupported controller', () => {
        const response = apiCall('UnknownController.unknownAction', {});
        return expect(response).rejects.toThrow(
            'Unsupported controller action: UnknownController.unknownAction'
        );
    });

    it('fails with unsupported Apex action', () => {
        const response = apiCall('ApexActionController.unknownAction', {});
        return expect(response).rejects.toThrow('Unsupported Apex action: unknownAction');
    });

    it('makes Apex POST request', async () => {
        webruntimeFetch.mockImplementationOnce(async () => {
            return new Promise(resolve => {
                resolve({
                    status: 200,
                    json() {
                        return { data: 1 };
                    },
                });
            });
        });

        const params = {};
        const actualReturnValue = await apiCall('ApexActionController.execute', params);
        expect(webruntimeFetch).toHaveBeenCalledTimes(1);
        expect(webruntimeFetch).toHaveBeenCalledWith(`/apex/execute`, {
            method: 'POST',
            body: JSON.stringify(params),
        });
        expect(actualReturnValue).toEqual({ data: 1 });
    });

    it('fails when error is present', async () => {
        const error = ['error!'];
        webruntimeFetch.mockImplementationOnce(async () => {
            return new Promise(resolve => {
                resolve({
                    status: 400,
                    json() {
                        return { error };
                    },
                });
            });
        });

        await expect(apiCall('ApexActionController.execute', {})).rejects.toEqual(error[0]);
    });

    it('returns nothing on 204 status', async () => {
        webruntimeFetch.mockImplementationOnce(async () => {
            return new Promise(resolve => {
                resolve({
                    status: 204,
                    json() {
                        return { data: 1 };
                    },
                });
            });
        });

        const params = {};
        const actualReturnValue = await apiCall('ApexActionController.execute', params);
        expect(webruntimeFetch).toHaveBeenCalledTimes(1);
        expect(webruntimeFetch).toHaveBeenCalledWith(`/apex/execute`, {
            method: 'POST',
            body: JSON.stringify(params),
        });
        expect(actualReturnValue).toEqual(undefined);
    });

    it('makes UI API GET request', async () => {
        getResourceReferenceFromAuraMethod.mockImplementationOnce(endpoint => {
            return (
                endpoint === 'UiApiController.action' && {
                    urlPath: '/resource/${a}/${b}',
                    urlPathParamNames: ['a', 'b'],
                    method: 'GET',
                }
            );
        });

        webruntimeFetch.mockImplementationOnce(async () => {
            return new Promise(resolve => {
                resolve({
                    ok: true,
                    json() {
                        return { data: 2 };
                    },
                });
            });
        });

        const params = {
            a: 1,
            b: 2,
        };
        const actualReturnValue = await apiCall('UiApiController.action', params);
        expect(webruntimeFetch).toHaveBeenCalledTimes(1);
        expect(webruntimeFetch).toHaveBeenCalledWith(`/resource/1/2`, { method: 'GET' });
        expect(actualReturnValue).toEqual({ data: 2 });
    });

    it('makes UI API GET request with query param', async () => {
        getResourceReferenceFromAuraMethod.mockImplementationOnce(endpoint => {
            return (
                endpoint === 'UiApiController.action' && {
                    urlPath: '/resource/${a}',
                    urlPathParamNames: ['a'],
                    method: 'GET',
                }
            );
        });

        webruntimeFetch.mockImplementationOnce(async () => {
            return new Promise(resolve => {
                resolve({
                    ok: true,
                    json() {
                        return { data: 2 };
                    },
                });
            });
        });

        const params = {
            a: 1,
            b: 2,
        };
        const actualReturnValue = await apiCall('UiApiController.action', params);
        expect(webruntimeFetch).toHaveBeenCalledTimes(1);
        expect(webruntimeFetch).toHaveBeenCalledWith(`/resource/1?b=2`, { method: 'GET' });
        expect(actualReturnValue).toEqual({ data: 2 });
    });

    it('makes UI API POST request', async () => {
        getResourceReferenceFromAuraMethod.mockImplementationOnce(endpoint => {
            return (
                endpoint === 'UiApiController.action' && {
                    urlPath: '/resource/${a}/${b}',
                    urlPathParamNames: ['a', 'b'],
                    method: 'POST',
                    inputRepresentation: 'input',
                }
            );
        });

        webruntimeFetch.mockImplementationOnce(async () => {
            return new Promise(resolve => {
                resolve({
                    ok: true,
                    json() {
                        return { data: 2 };
                    },
                });
            });
        });

        const params = {
            a: 1,
            b: 2,
            input: {
                c: 3,
                d: 4,
            },
        };
        const actualReturnValue = await apiCall('UiApiController.action', params);
        expect(webruntimeFetch).toHaveBeenCalledTimes(1);
        expect(webruntimeFetch).toHaveBeenCalledWith(`/resource/1/2`, {
            method: 'POST',
            body: JSON.stringify({ c: 3, d: 4 }),
        });
        expect(actualReturnValue).toEqual({ data: 2 });
    });

    it('makes UI API POST request with query param', async () => {
        getResourceReferenceFromAuraMethod.mockImplementationOnce(endpoint => {
            return (
                endpoint === 'UiApiController.action' && {
                    urlPath: '/resource/${a}',
                    urlPathParamNames: ['a'],
                    method: 'POST',
                    inputRepresentation: 'input',
                }
            );
        });

        webruntimeFetch.mockImplementationOnce(async () => {
            return new Promise(resolve => {
                resolve({
                    ok: true,
                    json() {
                        return { data: 2 };
                    },
                });
            });
        });

        const params = {
            a: 1,
            b: 2,
            input: {
                c: 3,
                d: 4,
            },
        };
        const actualReturnValue = await apiCall('UiApiController.action', params);
        expect(webruntimeFetch).toHaveBeenCalledTimes(1);
        expect(webruntimeFetch).toHaveBeenCalledWith(`/resource/1?b=2`, {
            method: 'POST',
            body: JSON.stringify({ c: 3, d: 4 }),
        });
        expect(actualReturnValue).toEqual({ data: 2 });
    });

    it('filters out null, undefined and empty array parameters for request', async () => {
        getResourceReferenceFromAuraMethod.mockImplementationOnce(endpoint => {
            return (
                endpoint === 'UiApiController.action' && {
                    urlPath: '/resource/${a}',
                    urlPathParamNames: ['a'],
                    method: 'GET',
                }
            );
        });

        webruntimeFetch.mockImplementationOnce(async () => {
            return new Promise(resolve => {
                resolve({
                    ok: true,
                    json() {
                        return { data: 2 };
                    },
                });
            });
        });

        const params = {
            a: 1,
            b: null,
            c: undefined,
            d: [],
            e: [1, 2],
            f: 'f',
        };
        const actualReturnValue = await apiCall('UiApiController.action', params);
        expect(webruntimeFetch).toHaveBeenCalledTimes(1);
        expect(webruntimeFetch).toHaveBeenCalledWith(`/resource/1?e=1%2C2&f=f`, { method: 'GET' });
        expect(actualReturnValue).toEqual({ data: 2 });
    });
});

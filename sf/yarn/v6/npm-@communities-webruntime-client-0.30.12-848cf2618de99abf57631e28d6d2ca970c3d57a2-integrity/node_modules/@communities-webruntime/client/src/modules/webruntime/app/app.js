/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { assert } from 'webruntime/utils';
import viewToThemeLayoutMap from '@app/viewToThemeLayoutMap';
import { WEBRUNTIME_PREFIX, getViewModuleSpecifier } from '@communities-webruntime/common';
import { LightningElement } from 'lwc';
import { subscribe } from 'webruntime/routingService';
import { load } from 'webruntime_loader/loader';
import { reportError } from 'webruntime/errors';
import defaultHtml from './app.html';

export default class App extends LightningElement {
    /**
     * The generated template HTML for the current theme layout
     */
    generatedTemplateHtml = defaultHtml;

    /**
     * The resolved attributes of the current theme layout template
     */
    attributes = {};

    /**
     * Map of the current route parameters
     */
    routeParams = {};

    /**
     * The ID of the current theme layout
     */
    themeLayout;

    /**
     * Whether or not the app has been initialized
     */
    isInitialized;

    /**
     * Subscribe to route changes
     */
    connectedCallback() {
        this.subscription = subscribe(this.setRoute.bind(this));
    }

    render() {
        return this.generatedTemplateHtml;
    }

    renderedCallback() {
        if (this.isInitialized) {
            return;
        }
        this.isInitialized = true;
        window.performance.measure(`${WEBRUNTIME_PREFIX}-app-bootstrap`);
    }

    async setRoute({ attributes = {}, state = {} } = {}, { view } = {}) {
        const params = { ...state, ...attributes };
        const themeLayout = viewToThemeLayoutMap[view];

        if (process.env.NODE_ENV !== 'production') {
            assert(themeLayout, `No theme layout matching the "${view}" view.`);
        }

        // fetch the template from registry, which will be cached
        return load(getViewModuleSpecifier(themeLayout))
            .then(module => module.default)
            .then(tmpl => {
                if (this.themeLayout !== themeLayout) {
                    this.generatedTemplateHtml = tmpl.html;
                    this.themeLayout = themeLayout;
                }
                // update the route params
                this.routeParams = params;
                this.attributes = tmpl.attributes(this);
                return this;
            })
            .catch(error => {
                reportError({ subject: 'App.getTemplate error', error });
            });
    }

    disconnectedCallback() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }

    errorCallback(error, wcstack) {
        reportError({ subject: 'app level error', error, wcstack });
    }
}

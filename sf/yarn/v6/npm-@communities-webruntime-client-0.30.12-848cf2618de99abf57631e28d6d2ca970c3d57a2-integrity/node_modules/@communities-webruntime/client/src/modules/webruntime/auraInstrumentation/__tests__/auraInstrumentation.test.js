/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

const { performance } = window;
import { logError } from 'webruntime/logger';
import { markEnd } from '../auraInstrumentation';

jest.mock('@app/basePath', () => '', { virtual: true });
jest.mock('@app/csrfToken', () => '', { virtual: true });
jest.mock('webruntime/logger');

beforeEach(() => {
    delete window.performance;
    window.performance = {
        measure: jest.fn(),
    };
});

afterEach(() => {
    jest.clearAllMocks();
    window.performance = performance;
});

describe('webruntime/auraInstrumentation', () => {
    it(`handles error if performance.measure throws`, () => {
        const error = new Error('error happend');

        window.performance.measure.mockImplementation(() => {
            throw error;
        });

        markEnd('my-ns', 'start-mark-name');

        expect(logError).toHaveBeenCalledWith(expect.any(String), error.stack);
    });
});

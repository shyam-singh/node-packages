{
  "manifest": {
    "name": "@lwc/style-compiler",
    "version": "1.2.2",
    "description": "Transform style sheet to be consumed by the LWC engine",
    "license": "MIT",
    "main": "dist/commonjs/index.js",
    "types": "dist/types/index.d.ts",
    "scripts": {
      "clean": "rm -rf dist/",
      "build": "tsc",
      "test": "jest"
    },
    "files": [
      "dist/"
    ],
    "dependencies": {
      "cssnano-preset-default": "~4.0.7",
      "postcss": "~7.0.24",
      "postcss-selector-parser": "~6.0.2",
      "postcss-value-parser": "~4.0.2"
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "ed43a4a1f80f910bf219019e642c313f80f48f70",
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-@lwc-style-compiler-1.2.2-5659faa455d31c2eed094ceb1e126dc2ee49f320-integrity\\node_modules\\@lwc\\style-compiler\\package.json",
    "readmeFilename": "README.md",
    "readme": "# @lwc/style-compiler\n\nTransform style sheet to be consumed by the LWC engine.\n\n## Features\n\n-   Shadow DOM style scoping:\n    -   transform `:host` pseudo-class selectors\n    -   scope all the other selectors using CSS attribute selectors\n-   Custom Properties: inline replacement of `var()` CSS function\n-   Right-to-left: transform the `:dir` pseudo class selector to `[dir]` attribute selectors\n-   CSS import: resolve imports via static ES module imports\n\n## Installation\n\n```sh\nyarn add --dev @lwc/style-compiler\n```\n\n## Usage\n\n```js\nconst compile = require('@lwc/style-compiler');\n\nconst source = `\n    :host {\n        opacity: 0.4;\n    }\n\n    span {\n        text-transform: uppercase;\n    }\n`;\n\nconst { code } = compile(source, 'example.css');\n```\n\n### API\n\n#### `compile(source, id, options)`\n\n**Options:**\n\n-   `source` (string, required) - the css source file to compiler\n-   `id` (string, required) - the css source file path, used by the compiler to produce errors with the file name\n-   `options` (object, optional)\n    -   `customProperties` (object, optional)\n        -   `allowDefinition` (boolean, optional, default: `false`) - allow CSS custom properties definition in the css source\n        -   `resolverModule` (boolean, optional) - module name for the custom properties resolve\n    -   `outputConfig` (object, optional)\n        -   `minify` (boolean, optional, default: `false`) - compress the generated output\n\n**Return:**\n\n-   `code` - the generated code\n\n## Selector scoping caveats\n\n-   No support for [`::slotted`](https://drafts.csswg.org/css-scoping/#slotted-pseudo) pseudo-element.\n-   No support for [`>>>`](https://drafts.csswg.org/css-scoping/#deep-combinator) deep combinator (spec still under consideration: [issue](https://github.com/w3c/webcomponents/issues/78)).\n-   No support for [`:host-context`](https://drafts.csswg.org/css-scoping/#selectordef-host-context) pseudo-selector (browser vendors are not able to agree: [webkit](https://bugs.webkit.org/show_bug.cgi?id=160038), [gecko](https://bugzilla.mozilla.org/show_bug.cgi?id=1082060))\n-   This transform duplicates the `:host` selector to able to use the generated style in both the synthetic and native shadow DOM. The duplication is necessary to support the functional form of `:host()`, `:host(.foo, .bar) {}` needs to get transformed into `.foo[x-btn-host], .bar[x-btn-host] {}` to work in the synthetic shadow DOM.\n-   Scoped CSS has a non-negligeable performance impact:\n    -   Each selector chain is scoped and each compound expression passed to the `:host()` need to be spread into multiple selectors. This transformation greatly increases the overall size and complexity of the generated CSS, leading to more bits on the wire, longer parsing time and longer style recalculation.\n    -   In order to ensure CSS encapsulation, each element needs to add an extra attribute. This increases the actual rendering time.\n",
    "licenseText": "MIT LICENSE\n\nCopyright (c) 2018, Salesforce.com, Inc.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@lwc/style-compiler/-/style-compiler-1.2.2.tgz#5659faa455d31c2eed094ceb1e126dc2ee49f320",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@lwc/style-compiler/-/style-compiler-1.2.2.tgz",
    "hash": "5659faa455d31c2eed094ceb1e126dc2ee49f320",
    "integrity": "sha512-L4wMabOfrBEvTggW25qA05LnEkejkIEb1jBRtGc1r8U8xcd3PErj2u8jhbYFlLh5oKM/a5+j9uw7HEglhC1AyQ==",
    "registry": "npm",
    "packageName": "@lwc/style-compiler",
    "cacheIntegrity": "sha512-L4wMabOfrBEvTggW25qA05LnEkejkIEb1jBRtGc1r8U8xcd3PErj2u8jhbYFlLh5oKM/a5+j9uw7HEglhC1AyQ== sha1-Vln6pFXTHC7tCUzrHhJtwu5J8yA="
  },
  "registry": "npm",
  "hash": "5659faa455d31c2eed094ceb1e126dc2ee49f320"
}
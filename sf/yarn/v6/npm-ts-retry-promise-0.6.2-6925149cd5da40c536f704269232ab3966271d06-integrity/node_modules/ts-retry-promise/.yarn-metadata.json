{
  "manifest": {
    "name": "ts-retry-promise",
    "version": "0.6.2",
    "license": "MIT",
    "description": "retry for functions returning a promise",
    "repository": {
      "type": "git",
      "url": "https://github.com/normartin/ts-retry-promise"
    },
    "bugs": {
      "url": "https://github.com/normartin/ts-retry-promise/issues"
    },
    "keywords": [
      "promise",
      "retry",
      "typescript"
    ],
    "files": [
      "dist",
      "README.md",
      "LICENSE.txt"
    ],
    "main": "dist/retry-promise.js",
    "types": "dist/retry-promise.d.ts",
    "engines": {
      "node": ">=6"
    },
    "scripts": {
      "cleanup": "del-cli dist reports .nyc_output test/browser/bundle.js",
      "prebuild": "npm run cleanup",
      "build": "tsc",
      "test": "mocha",
      "posttest": "npm run tslint && npm run build-browser-tests",
      "tslint": "tslint 'src/**/*.ts' 'test/**/*.ts'",
      "coverage": "nyc mocha",
      "validate": "npm run tslint && npm run coverage",
      "prerelease": "npm run validate",
      "release": "npm run build && npm publish",
      "mutation-test": "stryker run",
      "build-browser-tests": "browserify -p tsify test/browser/browser-tests.ts > test/browser/bundle.js"
    },
    "devDependencies": {
      "@sinonjs/fake-timers": "^8.1.0",
      "@stryker-mutator/core": "^5.6.1",
      "@stryker-mutator/mocha-runner": "^5.6.1",
      "@stryker-mutator/typescript-checker": "^5.6.1",
      "@types/chai": "^4.2.11",
      "@types/chai-as-promised": "^7.1.2",
      "@types/mocha": "^9.0.1",
      "@types/node": "^17.0.13",
      "@types/sinonjs__fake-timers": "^8.1.1",
      "browserify": "^17.0.0",
      "chai": "^4.3.6",
      "chai-as-promised": "^7.1.1",
      "del-cli": "^4.0.1",
      "mocha": "^9.2.0",
      "nyc": "^15.0.1",
      "ts-node": "^10.4.0",
      "tsify": "^5.0.4",
      "tslint": "^6.1.2",
      "tslint-no-unused-expression-chai": "^0.1.4",
      "typescript": "^3.9.10"
    },
    "nyc": {
      "all": true,
      "check-coverage": true,
      "per-file": true,
      "lines": 99,
      "statements": 99,
      "functions": 99,
      "branches": 99,
      "include": [
        "src/**/*.ts"
      ],
      "exclude": [
        "**/*.d.ts"
      ],
      "extension": [
        ".ts"
      ],
      "require": [
        "ts-node/register"
      ],
      "reporter": [
        "text",
        "html",
        "lcov"
      ],
      "sourceMap": true,
      "instrument": true,
      "report-dir": "reports/coverage"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-ts-retry-promise-0.6.2-6925149cd5da40c536f704269232ab3966271d06-integrity\\node_modules\\ts-retry-promise\\package.json",
    "readmeFilename": "README.md",
    "readme": "# ts-retry-promise #\n\n[![Build Status](https://github.com/normartin/ts-retry-promise/workflows/Node.js%20CI/badge.svg)](https://github.com/normartin/ts-retry-promise/actions?query=workflow%3A%22Node.js+CI%22)\n[![Coverage Status](https://coveralls.io/repos/github/normartin/ts-retry-promise/badge.svg?branch=master)](https://coveralls.io/github/normartin/ts-retry-promise?branch=master)\n[![Dependencies](https://img.shields.io/badge/Dependencies-none-brightgreen)](https://github.com/normartin/ts-retry-promise/blob/master/package.json)\n[![NPM](https://img.shields.io/npm/v/ts-retry-promise.svg?color=#555)](https://www.npmjs.com/package/ts-retry-promise)\n\n_retry for functions returning a promise_\n\n[Changelog](https://github.com/normartin/ts-retry-promise/releases)\n\n## Usage\n\nInstall with yarn:\n`yarn add ts-retry-promise`\n\nInstall with npm:\n`npm install --save ts-retry-promise`\n\nThen you can import it with:\n\n```typescript\nimport { retry } from 'ts-retry-promise';\n\nconst result: number = await retry(() => Promise.resolve(1), {retries: 3});\n```\n\nThis will instantly start calling your function until it returns a resolved promise, no retries are left or a timeout occurred.\n\nIf you want to add retries to an existing function, use the decorator:\n\n```typescript\nimport { retryDecorator } from 'ts-retry-promise';\n\nconst asyncFunction = async (s: String) => s;\n\nconst decoratedFunction = retryDecorator(asyncFunction, {timeout: 1});\n\nconst result: string = await decoratedFunction(\"1\");\n```\n\nHere `decoratedFunction` is a function with the same signature as `asyncFunction`, but will do retries in case of failures.\n\n## Configuration\n\nBoth `retry` and `retryDecorator` take an optional second argument where you can configure the number of retries and timeouts:\n\n```typescript\nexport interface RetryConfig<T> {\n    // number of maximal retry attempts (default: 10)\n    retries?: number | \"INFINITELY\";\n\n    // wait time between retries in ms (default: 100)\n    delay?: number;\n\n    // check the result, will retry until true (default: () => true)\n    until?: (t: T) => boolean;\n\n    // log events (default: () => undefined)\n    logger?: (msg: string) => void;\n\n    // overall timeout in ms (default: 60 * 1000)\n    timeout?: number | \"INFINITELY\";\n\n    // increase delay with every retry (default: \"FIXED\")\n    backoff?: \"FIXED\" | \"EXPONENTIAL\" | \"LINEAR\" | ((attempt: number, delay: number) => number);\n\n    // maximal backoff in ms (default: 5 * 60 * 1000)\n    maxBackOff?: number;\n}\n```\n\n## Customize ##\n\n_customizeRetry_ returns a new instance of _retry_ that has the defined default configuration.\n\n```typescript\nimport { customizeRetry } from 'ts-retry-promise'; \n\nconst impatientRetry = customizeRetry({timeout: 5});\n\nawait expect(impatientRetry(async () => wait(10))).to.be.rejectedWith(\"Timeout\");\n\n// another example\n\nconst retryUntilNotEmpty = customizeRetry({until: (array: any[]) => array.length > 0});\n\nconst result = await retryUntilNotEmpty(async () => [1, 2]);\n\nexpect(result).to.deep.eq([1, 2]);\n```\n\n\nYou can do the same for decorators:\n```typescript\nimport { customizeDecorator } from 'ts-retry-promise'; \n\nconst asyncFunction = async (s: string) => {\n    await wait(3);\n    return s;\n};\n\nconst impatientDecorator = customizeDecorator({timeout: 1});\n\nexpect(impatientDecorator(asyncFunction)(\"1\")).to.be.rejectedWith(\"Timeout\");\n```\n\n## Failure ##\nIn case `retry` failed, an _error_ is thrown. \nYou can access the error that occurred the last time the function has been retried via the property `lastError`:\n```typescript\nretry(async () => throw \"1\")\n    .catch(err => console.log(err.lastError)); // will print \"1\" \n```\n\n## NotRetryableError ##\nWrapped function can throw `NotRetryableError` if retrying need to be stopped eventually:\n```typescript\nimport { NotRetryableError } from 'ts-retry-promise';\n\nretry(async () => throw new NotRetryableError(\"This error\"))\n    .catch(err => console.log(err.lastError), { retries: 'INFINITELY' });\n```\n\n## Samples ##\n\n_retryDecorator_ can be used on any function that returns a promise\n\n```typescript\nconst loadUserProfile: (id: number) => Promise<{ name: string }> = async id => ({name: \"Mr \" + id});\n\nconst robustProfileLoader = retryDecorator(loadUserProfile, {retries: 2});\n\nconst profile = await robustProfileLoader(123);\n```\n\n\n_retry_ is well suited for acceptance tests (but not restricted to)\n\n```typescript\n// ts-retry-promise/test/retry-promise.demo.test.ts\nit(\"will retry until no exception or limit reached\", async () => {\n\n    await retry(async () => {\n        const title = await browser.$(\"h1\");\n        expect(title).to.eq(\"Loaded\");\n    });\n\n});\n\nit(\"can return a result\", async () => {\n\n    const pageTitle = await retry(async () => {\n        const title = await browser.$(\"h1\");\n        expect(title).to.be.not.empty;\n        return title;\n    });\n\n    // do some stuff with the result\n    expect(pageTitle).to.eq(\"Loaded\");\n});\n\nit(\"can be configured and has defaults\", async () => {\n\n    await retry(async () => {\n        // your code\n    }, {backoff: \"LINEAR\", retries: 100});\n\n});\n\nit(\"will retry until condition is met or limit reached\", async () => {\n\n    await retry(\n        () => browser.$$(\"ul\"),\n        {until: (list) => list.length === 2});\n\n});\n\nit(\"can have a timeout\", async () => {\n\n    const promise = retry(\n        () => wait(100),\n        {timeout: 10},\n    );\n\n    await expect(promise).to.be.rejectedWith(\"Timeout\");\n});\n\nit(\"can create a customized retry\", async () => {\n    const impatientRetry = customizeRetry({timeout: 5});\n\n    await expect(impatientRetry(async () => wait(10))).to.be.rejectedWith(\"Timeout\");\n});\n\nit(\"can create another customized retry\", async () => {\n    const retryUntilNotEmpty = customizeRetry({until: (array: number[]) => array.length > 0});\n\n    const result = await retryUntilNotEmpty(async () => [1, 2]);\n\n    expect(result).to.deep.eq([1, 2]);\n});\n\nit(\"can customize default config\", async () => {\n    const originalTimeout = defaultRetryConfig.timeout;\n    try {\n        defaultRetryConfig.timeout = 1;\n\n        await expect(retry(async () => wait(10))).to.be.rejectedWith(\"Timeout\");\n    } finally {\n        defaultRetryConfig.timeout = originalTimeout;\n    }\n});\n```\n\n# Release instructions\nRelease automation has been setup according this [guide](https://michaelzanggl.com/articles/github-actions-cd-setup/).\n\n1. Create a Github release with version tag like `0.6.1`. \n1. Check the new version exists on [npmjs.com/package/ts-retry-promise](https://www.npmjs.com/package/ts-retry-promise) and has `latest` tag. \n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Martin MÃ¶ller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ts-retry-promise/-/ts-retry-promise-0.6.2.tgz#6925149cd5da40c536f704269232ab3966271d06",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ts-retry-promise/-/ts-retry-promise-0.6.2.tgz",
    "hash": "6925149cd5da40c536f704269232ab3966271d06",
    "integrity": "sha512-QFnm3RuFivgkQGKm8XX7F7sAMQEI7pzVkfSlcWMYH+MoIRy7BI3sE8135YPapP8Fra5KgAuOq2QFT969N14cAw==",
    "registry": "npm",
    "packageName": "ts-retry-promise",
    "cacheIntegrity": "sha512-QFnm3RuFivgkQGKm8XX7F7sAMQEI7pzVkfSlcWMYH+MoIRy7BI3sE8135YPapP8Fra5KgAuOq2QFT969N14cAw== sha1-aSUUnNXaQMU29wQmkjKrOWYnHQY="
  },
  "registry": "npm",
  "hash": "6925149cd5da40c536f704269232ab3966271d06"
}
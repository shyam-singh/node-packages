{
  "manifest": {
    "name": "@salesforce/core",
    "version": "2.37.1",
    "description": "Core libraries to interact with SFDX projects, orgs, and APIs.",
    "main": "lib/exported",
    "types": "lib/exported.d.ts",
    "license": "BSD-3-Clause",
    "scripts": {
      "build": "sf-build",
      "ci-docs": "yarn sf-ci-docs",
      "clean": "sf-clean",
      "clean-all": "sf-clean all",
      "compile": "sf-compile",
      "docs": "sf-docs",
      "format": "sf-format",
      "lint": "sf-lint",
      "lint-fix": "yarn sf-lint --fix",
      "postcompile": "tsc -p test && tsc -p typedocExamples",
      "prepack": "sf-prepack",
      "prepare": "sf-install",
      "pretest": "sf-compile-test",
      "test": "sf-test"
    },
    "keywords": [
      "force",
      "salesforce",
      "sfdx",
      "salesforcedx"
    ],
    "files": [
      "docs",
      "lib",
      "messages",
      "!lib/**/*.map"
    ],
    "dependencies": {
      "@salesforce/bunyan": "^2.0.0",
      "@salesforce/kit": "^1.5.17",
      "@salesforce/schemas": "^1.0.1",
      "@salesforce/ts-types": "^1.5.20",
      "@types/graceful-fs": "^4.1.5",
      "@types/jsforce": "^1.9.41",
      "@types/mkdirp": "^1.0.1",
      "ajv": "^8.11.0",
      "archiver": "^5.3.0",
      "debug": "^3.1.0",
      "faye": "^1.4.0",
      "graceful-fs": "^4.2.4",
      "js2xmlparser": "^4.0.1",
      "jsforce": "^1.11.0",
      "jsonwebtoken": "8.5.0",
      "mkdirp": "1.0.4",
      "semver": "^7.3.5",
      "ts-retry-promise": "^0.6.0"
    },
    "devDependencies": {
      "@salesforce/dev-config": "^2.1.3",
      "@salesforce/dev-scripts": "^1.0.2",
      "@salesforce/prettier-config": "^0.0.2",
      "@salesforce/ts-sinon": "1.3.21",
      "@types/archiver": "^5.1.1",
      "@types/debug": "0.0.30",
      "@types/jsonwebtoken": "8.3.2",
      "@types/semver": "^7.3.9",
      "@types/shelljs": "0.7.8",
      "@typescript-eslint/eslint-plugin": "^4.2.0",
      "@typescript-eslint/parser": "4.26.0",
      "chai": "^4.2.0",
      "commitizen": "^3.0.5",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.11.0",
      "eslint-config-salesforce": "^0.1.6",
      "eslint-config-salesforce-license": "^0.1.6",
      "eslint-config-salesforce-typescript": "^0.2.7",
      "eslint-plugin-header": "^3.0.0",
      "eslint-plugin-import": "^2.20.2",
      "eslint-plugin-jsdoc": "^27.0.3",
      "eslint-plugin-prettier": "^3.1.3",
      "husky": "^7.0.4",
      "mocha": "^8.4.0",
      "nyc": "^15.1.0",
      "prettier": "^2.0.5",
      "pretty-quick": "^3.1.0",
      "shelljs": "0.8.5",
      "sinon": "10.0.0",
      "ts-node": "^10.0.0",
      "typescript": "^4.1.3"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/forcedotcom/sfdx-core.git"
    },
    "publishConfig": {
      "access": "public"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-@salesforce-core-2.37.1-bfb6634e068278c7761d694a15e09a680b407137-integrity\\node_modules\\@salesforce\\core\\package.json",
    "readmeFilename": "README.md",
    "readme": "[![NPM](https://img.shields.io/npm/v/@salesforce/core.svg)](https://www.npmjs.com/package/@salesforce/core)\n[![CircleCI](https://circleci.com/gh/forcedotcom/sfdx-core.svg?style=svg&circle-token=2377ca31221869e9d13448313620486da80e595f)](https://circleci.com/gh/forcedotcom/sfdx-core)\n\n# Description\n\nThe @salesforce/core library provides client-side management of Salesforce DX projects, org authentication, connections to Salesforce APIs, and other utilities. Much of the core functionality that powers the Salesforcedx plug-ins comes from this library. You can use this functionality in your plug-ins too.\n\n# Usage\n\nSee the [API documentation](https://forcedotcom.github.io/sfdx-core/).\n\n## Contributing\n\nIf you are interested in contributing, please take a look at the [CONTRIBUTING](CONTRIBUTING.md) guide.\n\n# Related Docs and Repositories\n\n- [@salesforce/command](https://github.com/forcedotcom/cli-packages/tree/main/packages/command) - Contains base Salesforce CLI command, `SfdxCommand`.\n- [@salesforce/plugin-generator](https://github.com/forcedotcom/sfdx-plugin-generate) - The generator plug-in for building plug-ins for Salesforce CLI.\n\n# Using TestSetup\n\nThe Salesforce DX Core Library provides a unit testing utility to help with mocking and sand-boxing core components. This feature allows unit tests to execute without needing to make API calls to salesforce.com.\n\n## Mocking AuthInfo\n\nHere you can mock authorization for a Salesforce scratch org.\n\n```typescript\nimport { strictEqual } from 'assert';\nimport { MockTestOrgData, testSetup } from '@salesforce/core/lib/testSetup';\nimport { AuthInfo } from '@salesforce/core';\n\nconst $$ = testSetup();\n\ndescribe('Mocking Auth data', () => {\n  it('example', async () => {\n    const testData = new MockTestOrgData();\n    $$.setConfigStubContents('AuthInfoConfig', {\n      contents: await testData.getConfig(),\n    });\n    const auth: AuthInfo = await AuthInfo.create({ username: testData.username });\n    strictEqual(auth.getUsername(), testData.username);\n  });\n});\n```\n\nAfter having a valid AuthInfo object you can then create fake connections to a Salesforce.com scratch org. This allows for writing tests that can validate result responses for SOQL queries and REST endpoints.\n\n```typescript\nimport { AuthInfo, Connection, SfdxError } from '@salesforce/core';\nimport { MockTestOrgData, testSetup } from '@salesforce/core/lib/testSetup';\nimport { AnyJson, ensureJsonMap, JsonMap } from '@salesforce/ts-types';\nimport { ensureString } from '@salesforce/ts-types';\nimport { deepStrictEqual } from 'assert';\nimport { QueryResult } from 'jsforce';\n\nconst $$ = testSetup();\n\ndescribe('Mocking a force server call', () => {\n  it('example', async () => {\n    const records: AnyJson = { records: ['123456', '234567'] };\n    const testData = new MockTestOrgData();\n    $$.setConfigStubContents('AuthInfoConfig', {\n      contents: await testData.getConfig(),\n    });\n    $$.fakeConnectionRequest = (request: AnyJson): Promise<AnyJson> => {\n      const _request: JsonMap = ensureJsonMap(request);\n      if (request && ensureString(_request.url).includes('Account')) {\n        return Promise.resolve(records);\n      } else {\n        return Promise.reject(new SfdxError(`Unexpected request: ${_request.url}`));\n      }\n    };\n    const connection: Connection = await Connection.create({\n      authInfo: await AuthInfo.create({ username: testData.username }),\n    });\n    const result: QueryResult<{}> = await connection.query('select Id From Account');\n    deepStrictEqual(result, records);\n  });\n});\n```\n\n## Using the Built-in Sinon Sandboxes\n\nsfdx-core uses Sinon as its underlying mocking system. If you're unfamiliar with Sinon and it's sandboxing concept you can find more information here:\nhttps://sinonjs.org/\nSinon `stub`s and `spy`s must be cleaned up after test invocations. To ease the use of Sinon with sfdx core we've exposed our sandbox in TestSetup. After adding your own `stub`s and/or `spy`s they will automatically be cleaned up after each test using mocha's afterEach method.\n\n```typescript\nimport { strictEqual } from 'assert';\n\nimport { testSetup } from '@salesforce/core/lib/testSetup';\nimport * as os from 'os';\n\nconst $$ = testSetup();\n\ndescribe('Using the built in Sinon sandbox.', () => {\n  it('example', async () => {\n    const unsupportedOS = 'LEO';\n    $$.SANDBOX.stub(os, 'platform').returns(unsupportedOS);\n    strictEqual(os.platform(), unsupportedOS);\n  });\n});\n```\n\n## Testing Expected Failures\n\nIt's important to have negative tests that ensure proper error handling. With `shouldThrow` it's easy to test for expected async rejections.\n\n```typescript\nimport { SfdxError } from '@salesforce/core';\nimport { shouldThrow } from '@salesforce/core/lib/testSetup';\nimport { strictEqual } from 'assert';\n\nclass TestObject {\n  public static async method() {\n    throw new SfdxError('Error', 'ExpectedError');\n  }\n}\n\ndescribe('Testing for expected errors', () => {\n  it('example', async () => {\n    try {\n      await shouldThrow(TestObject.method());\n    } catch (e) {\n      strictEqual(e.name, 'ExpectedError');\n    }\n  });\n});\n```\n\n## Testing Log Lines\n\nIt's also useful to check expected values and content from log lines. TestSetup configures the sfdx-core logger to use an in memory LogLine storage structure. These can be easily accessed from tests.\n\n```typescript\nimport { Logger, LogLine } from '@salesforce/core';\nimport { testSetup } from '@salesforce/core/lib/testSetup';\nimport { strictEqual } from 'assert';\n\nconst $$ = testSetup();\n\nconst TEST_STRING = 'foo was here';\n\nclass TestObject {\n  constructor(private logger: Logger) {\n    this.logger = logger.child('TestObject');\n  }\n\n  public method() {\n    this.logger.error(TEST_STRING);\n  }\n}\n\ndescribe('Testing log lines', () => {\n  it('example', async () => {\n    const obj: TestObject = new TestObject($$.TEST_LOGGER);\n    obj.method();\n    const records: LogLine[] = $$.TEST_LOGGER.getBufferedRecords();\n    strictEqual(records.length, 1);\n    strictEqual(records[0].msg, TEST_STRING);\n  });\n});\n```\n",
    "licenseText": "Copyright (c) 2022, Salesforce.com, Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n* Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@salesforce/core/-/core-2.37.1.tgz#bfb6634e068278c7761d694a15e09a680b407137",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@salesforce/core/-/core-2.37.1.tgz",
    "hash": "bfb6634e068278c7761d694a15e09a680b407137",
    "integrity": "sha512-Jyppt6fc8uEBQgfD2uIvZlUVSTSkhgU4i+N0B4mQJ+0yeAu5foiGJnn7u6/GPkpLSgof8IZKC6f4crsi/9xyLA==",
    "registry": "npm",
    "packageName": "@salesforce/core",
    "cacheIntegrity": "sha512-Jyppt6fc8uEBQgfD2uIvZlUVSTSkhgU4i+N0B4mQJ+0yeAu5foiGJnn7u6/GPkpLSgof8IZKC6f4crsi/9xyLA== sha1-v7ZjTgaCeMd2HWlKFeCaaAtAcTc="
  },
  "registry": "npm",
  "hash": "bfb6634e068278c7761d694a15e09a680b407137"
}
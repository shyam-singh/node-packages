{
  "manifest": {
    "name": "loglevel-plugin-prefix",
    "description": "Plugin for loglevel message prefixing",
    "author": {
      "name": "kutuluk"
    },
    "keywords": [
      "log",
      "logger",
      "logging",
      "browser",
      "node",
      "prefix",
      "colored",
      "loglevel",
      "plugin"
    ],
    "homepage": "https://github.com/kutuluk/loglevel-plugin-prefix",
    "bugs": {
      "url": "https://github.com/kutuluk/loglevel-plugin-prefix/issues"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:kutuluk/loglevel-plugin-prefix.git"
    },
    "license": "MIT",
    "version": "0.8.4",
    "main": "./lib/loglevel-plugin-prefix",
    "types": "index.d.ts",
    "scripts": {
      "eslint": "eslint ./lib/loglevel-plugin-prefix.js",
      "test": "mocha",
      "example": "node ./example/example.js",
      "uglifyjs": "uglifyjs ./lib/loglevel-plugin-prefix.js -o ./dist/loglevel-plugin-prefix.min.js -c -m",
      "build": "npm install && npm run eslint && npm run test && npm run uglifyjs"
    },
    "devDependencies": {
      "chai": "^4.1.2",
      "chalk": "^2.4.1",
      "eslint": "^3.19.0",
      "eslint-config-airbnb-base": "^11.3.2",
      "eslint-plugin-chai-friendly": "^0.3.6",
      "eslint-plugin-import": "^2.12.0",
      "loglevel": "^1.6.1",
      "loglevel-plugin-mock": "^0.1.0",
      "mocha": "^3.5.3",
      "sinon": "^2.4.1",
      "uglify-js": "^3.4.0"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-loglevel-plugin-prefix-0.8.4-2fe0e05f1a820317d98d8c123e634c1bd84ff644-integrity\\node_modules\\loglevel-plugin-prefix\\package.json",
    "readmeFilename": "README.md",
    "readme": "# loglevel-plugin-prefix\n\nPlugin for [loglevel](https://github.com/pimterry/loglevel) message prefixing.\n\n[![NPM version](https://img.shields.io/npm/v/loglevel-plugin-prefix.svg?style=flat-square)](https://www.npmjs.com/package/loglevel-plugin-prefix)[![Build Status](https://img.shields.io/travis/kutuluk/loglevel-plugin-prefix/master.svg?style=flat-square)](https://travis-ci.org/kutuluk/loglevel-plugin-prefix)\n\n## Installation\n\n```sh\nnpm install loglevel-plugin-prefix\n```\n\n## API\n\n**This plugin is under active development and should be considered as an unstable. No guarantees regarding API stability are made. Backward compatibility is guaranteed only by path releases.**\n\n#### `reg(loglevel)`\n\nThis method registers plugin for loglevel. This method must be called at least once before any call to the apply method. Repeated calls to this method are ignored.\n\n#### Parameters\n\n`loglevel` - the root logger, imported from loglevel module\n\n#### `apply(logger, options)`\n\nThis method applies the plugin to the logger. Before using this method, the `reg` method must be called, otherwise a warning will be logged. **From the next release, the call apply before reg will throw an error.**\n\n#### Parameters\n\n`logger` - any logger of loglevel\n\n`options` - an optional configuration object\n\n```javascript\nvar defaults = {\n  template: '[%t] %l:',\n  levelFormatter: function (level) {\n    return level.toUpperCase();\n  },\n  nameFormatter: function (name) {\n    return name || 'root';\n  },\n  timestampFormatter: function (date) {\n    return date.toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1');\n  },\n  format: undefined\n};\n```\n\nPlugin formats the prefix using `template` option as a printf-like format. The `template` is a string containing zero or more placeholder tokens. Each placeholder token is replaced with the value from loglevel messages parameters. Supported placeholders are:\n\n- `%l` - level of message\n- `%n` - name of logger\n- `%t` - timestamp of message\n\nThe `levelFormatter`, `nameFormatter` and `timestampFormatter` is a functions for formatting corresponding values.\n\nAlternatively, you can use `format` option. This is a function that receives formatted values (level, name, timestamp) and should returns a prefix string.\n\nIf both `format` and` template` are present in the configuration, the `template` parameter is ignored. When both these parameters are missing in the configuration, the inherited behavior is used.\n\n## Usage\n\n### Browser directly\n```html\n<script src=\"https://unpkg.com/loglevel/dist/loglevel.min.js\"></script>\n<script src=\"https://unpkg.com/loglevel-plugin-prefix@^0.8/dist/loglevel-plugin-prefix.min.js\"></script>\n\n<script>\n  var logger = log.noConflict();\n  var prefixer = prefix.noConflict();\n  prefixer.reg(logger);\n  prefixer.apply(logger);\n  logger.warn('prefixed message');\n</script>\n```\n\nOutput\n```\n[16:53:46] WARN: prefixed message\n```\n\n### Node\n```javascript\nconst chalk = require('chalk');\nconst log = require('loglevel');\nconst prefix = require('loglevel-plugin-prefix');\n\nconst colors = {\n  TRACE: chalk.magenta,\n  DEBUG: chalk.cyan,\n  INFO: chalk.blue,\n  WARN: chalk.yellow,\n  ERROR: chalk.red,\n};\n\nprefix.reg(log);\nlog.enableAll();\n\nprefix.apply(log, {\n  format(level, name, timestamp) {\n    return `${chalk.gray(`[${timestamp}]`)} ${colors[level.toUpperCase()](level)} ${chalk.green(`${name}:`)}`;\n  },\n});\n\nprefix.apply(log.getLogger('critical'), {\n  format(level, name, timestamp) {\n    return chalk.red.bold(`[${timestamp}] ${level} ${name}:`);\n  },\n});\n\nlog.trace('trace');\nlog.debug('debug');\nlog.getLogger('critical').info('Something significant happened');\nlog.log('log');\nlog.info('info');\nlog.warn('warn');\nlog.error('error');\n```\n\nOutput\n\n![output](https://raw.githubusercontent.com/kutuluk/loglevel-plugin-prefix/master/colored.png \"output\")\n\n## Custom options\n\n```javascript\nconst log = require('loglevel');\nconst prefix = require('loglevel-plugin-prefix');\n\nprefix.reg(log);\nlog.enableAll();\n\nprefix.apply(log, {\n  template: '[%t] %l (%n) static text:',\n  levelFormatter(level) {\n    return level.toUpperCase();\n  },\n  nameFormatter(name) {\n    return name || 'global';\n  },\n  timestampFormatter(date) {\n    return date.toISOString();\n  },\n});\n\nlog.info('%s prefix', 'template');\n\nconst fn = (level, name, timestamp) => `[${timestamp}] ${level} (${name}) static text:`;\n\nprefix.apply(log, { format: fn });\n\nlog.info('%s prefix', 'functional');\n\nprefix.apply(log, { template: '[%t] %l (%n) static text:' });\n\nlog.info('again %s prefix', 'template');\n```\n\nOutput\n```\n[2017-05-29T12:53:46.000Z] INFO (global) static text: template prefix\n[2017-05-29T12:53:46.000Z] INFO (global) static text: functional prefix\n[2017-05-29T12:53:46.000Z] INFO (global) static text: again template prefix\n```\n\n## Option inheritance\n\n```javascript\nconst log = require('loglevel');\nconst prefix = require('loglevel-plugin-prefix');\n\nprefix.reg(log);\nlog.enableAll();\n\nlog.info('root');\n\nconst chicken = log.getLogger('chicken');\nchicken.info('chicken');\n\nprefix.apply(chicken, { template: '%l (%n):' });\nchicken.info('chicken');\n\nprefix.apply(log);\nlog.info('root');\n\nconst egg = log.getLogger('egg');\negg.info('egg');\n\nconst fn = (level, name) => `${level} (${name}):`;\n\nprefix.apply(egg, { format: fn });\negg.info('egg');\n\nprefix.apply(egg, {\n  levelFormatter(level) {\n    return level.toLowerCase();\n  },\n});\negg.info('egg');\n\nchicken.info('chicken');\nlog.info('root');\n```\n\nOutput\n```\nroot\nchicken\nINFO (chicken): chicken\n[16:53:46] INFO: root\n[16:53:46] INFO: egg\nINFO (egg): egg\ninfo (egg): egg\nINFO (chicken): chicken\n[16:53:46] INFO: root\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Evgeniy Pavlov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/loglevel-plugin-prefix/-/loglevel-plugin-prefix-0.8.4.tgz#2fe0e05f1a820317d98d8c123e634c1bd84ff644",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/loglevel-plugin-prefix/-/loglevel-plugin-prefix-0.8.4.tgz",
    "hash": "2fe0e05f1a820317d98d8c123e634c1bd84ff644",
    "integrity": "sha512-WpG9CcFAOjz/FtNht+QJeGpvVl/cdR6P0z6OcXSkr8wFJOsV2GRj2j10JLfjuA4aYkcKCNIEqRGCyTife9R8/g==",
    "registry": "npm",
    "packageName": "loglevel-plugin-prefix",
    "cacheIntegrity": "sha512-WpG9CcFAOjz/FtNht+QJeGpvVl/cdR6P0z6OcXSkr8wFJOsV2GRj2j10JLfjuA4aYkcKCNIEqRGCyTife9R8/g== sha1-L+DgXxqCAxfZjYwSPmNMG9hP9kQ="
  },
  "registry": "npm",
  "hash": "2fe0e05f1a820317d98d8c123e634c1bd84ff644"
}
{
  "manifest": {
    "name": "archiver",
    "version": "5.3.2",
    "description": "a streaming interface for archive generation",
    "homepage": "https://github.com/archiverjs/node-archiver",
    "author": {
      "name": "Chris Talkington",
      "url": "http://christalkington.com/"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/archiverjs/node-archiver.git"
    },
    "bugs": {
      "url": "https://github.com/archiverjs/node-archiver/issues"
    },
    "license": "MIT",
    "main": "index.js",
    "files": [
      "index.js",
      "lib"
    ],
    "engines": {
      "node": ">= 10"
    },
    "scripts": {
      "test": "mocha --reporter dot",
      "bench": "node benchmark/simple/pack-zip.js"
    },
    "dependencies": {
      "archiver-utils": "^2.1.0",
      "async": "^3.2.4",
      "buffer-crc32": "^0.2.1",
      "readable-stream": "^3.6.0",
      "readdir-glob": "^1.1.2",
      "tar-stream": "^2.2.0",
      "zip-stream": "^4.1.0"
    },
    "devDependencies": {
      "archiver-jsdoc-theme": "^1.1.3",
      "chai": "^4.3.7",
      "jsdoc": "^3.6.4",
      "mkdirp": "^2.1.5",
      "mocha": "^9.0.2",
      "rimraf": "^4.3.1",
      "stream-bench": "^0.1.2",
      "tar": "^6.1.13",
      "yauzl": "^2.9.0"
    },
    "keywords": [
      "archive",
      "archiver",
      "stream",
      "zip",
      "tar"
    ],
    "publishConfig": {
      "registry": "https://registry.npmjs.org/"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-archiver-5.3.2-99991d5957e53bd0303a392979276ac4ddccf3b0-integrity\\node_modules\\archiver\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Archiver\n\nA streaming interface for archive generation\n\nVisit the [API documentation](https://www.archiverjs.com/) for a list of all methods available.\n\n## Install\n\n```bash\nnpm install archiver --save\n```\n\n## Quick Start\n\n```js\n// require modules\nconst fs = require('fs');\nconst archiver = require('archiver');\n\n// create a file to stream archive data to.\nconst output = fs.createWriteStream(__dirname + '/example.zip');\nconst archive = archiver('zip', {\n  zlib: { level: 9 } // Sets the compression level.\n});\n\n// listen for all archive data to be written\n// 'close' event is fired only when a file descriptor is involved\noutput.on('close', function() {\n  console.log(archive.pointer() + ' total bytes');\n  console.log('archiver has been finalized and the output file descriptor has closed.');\n});\n\n// This event is fired when the data source is drained no matter what was the data source.\n// It is not part of this library but rather from the NodeJS Stream API.\n// @see: https://nodejs.org/api/stream.html#stream_event_end\noutput.on('end', function() {\n  console.log('Data has been drained');\n});\n\n// good practice to catch warnings (ie stat failures and other non-blocking errors)\narchive.on('warning', function(err) {\n  if (err.code === 'ENOENT') {\n    // log warning\n  } else {\n    // throw error\n    throw err;\n  }\n});\n\n// good practice to catch this error explicitly\narchive.on('error', function(err) {\n  throw err;\n});\n\n// pipe archive data to the file\narchive.pipe(output);\n\n// append a file from stream\nconst file1 = __dirname + '/file1.txt';\narchive.append(fs.createReadStream(file1), { name: 'file1.txt' });\n\n// append a file from string\narchive.append('string cheese!', { name: 'file2.txt' });\n\n// append a file from buffer\nconst buffer3 = Buffer.from('buff it!');\narchive.append(buffer3, { name: 'file3.txt' });\n\n// append a file\narchive.file('file1.txt', { name: 'file4.txt' });\n\n// append files from a sub-directory and naming it `new-subdir` within the archive\narchive.directory('subdir/', 'new-subdir');\n\n// append files from a sub-directory, putting its contents at the root of archive\narchive.directory('subdir/', false);\n\n// append files from a glob pattern\narchive.glob('file*.txt', {cwd:__dirname});\n\n// finalize the archive (ie we are done appending files but streams have to finish yet)\n// 'close', 'end' or 'finish' may be fired right after calling this method so register to them beforehand\narchive.finalize();\n```\n\n## Formats\n\nArchiver ships with out of the box support for TAR and ZIP archives.\n\nYou can register additional formats with `registerFormat`.\n\nYou can check if format already exists before to register a new one with `isRegisteredFormat`.\n\n_Formats will be changing in the future to implement a middleware approach._\n",
    "licenseText": "Copyright (c) 2012-2014 Chris Talkington, contributors.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/archiver/-/archiver-5.3.2.tgz#99991d5957e53bd0303a392979276ac4ddccf3b0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/archiver/-/archiver-5.3.2.tgz",
    "hash": "99991d5957e53bd0303a392979276ac4ddccf3b0",
    "integrity": "sha512-+25nxyyznAXF7Nef3y0EbBeqmGZgeN/BxHX29Rs39djAfaFalmQ89SE6CWyDCHzGL0yt/ycBtNOmGTW0FyGWNw==",
    "registry": "npm",
    "packageName": "archiver",
    "cacheIntegrity": "sha512-+25nxyyznAXF7Nef3y0EbBeqmGZgeN/BxHX29Rs39djAfaFalmQ89SE6CWyDCHzGL0yt/ycBtNOmGTW0FyGWNw== sha1-mZkdWVflO9AwOjkpeSdqxN3M87A="
  },
  "registry": "npm",
  "hash": "99991d5957e53bd0303a392979276ac4ddccf3b0"
}
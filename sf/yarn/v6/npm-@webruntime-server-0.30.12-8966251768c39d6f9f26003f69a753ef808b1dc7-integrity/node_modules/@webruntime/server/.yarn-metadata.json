{
  "manifest": {
    "name": "@webruntime/server",
    "version": "0.30.12",
    "description": "Lightning Web Runtime - Server",
    "keywords": [],
    "license": "MIT",
    "main": "dist/commonjs/index.js",
    "files": [
      "dist/"
    ],
    "publishConfig": {
      "access": "public",
      "registry": "https://registry.npmjs.org"
    },
    "scripts": {
      "clean": "rm -rf dist tsconfig.tsbuildinfo",
      "build": "tsc -b",
      "test": "jest",
      "doc": "typedoc"
    },
    "dependencies": {
      "@lwc/errors": "1.2.2",
      "@webruntime/api": "0.30.12",
      "@webruntime/performance": "0.30.12",
      "@webruntime/webruntime-shim": "0.30.12",
      "chokidar": "^3.3.0",
      "compression": "^1.7.4",
      "express": "^4.16.4",
      "folder-hash": "^3.0.0",
      "get-port": "^5.1.1",
      "glob-to-regexp": "^0.4.1",
      "hasha": "^5.0.0",
      "helmet": "^3.18.0",
      "lodash": "^4.17.11",
      "mkdirp": "^1.0.0",
      "rollup": "^1.7.4",
      "uuidv4": "^4.0.0"
    },
    "devDependencies": {
      "@babel/plugin-proposal-decorators": "^7.8.3",
      "@types/compression": "^0.0.36",
      "@types/express": "^4.16.0",
      "@types/helmet": "^0.0.43",
      "@types/jest": "~23.0.0",
      "@types/lodash": "^4.14.134",
      "deepmerge": "^3.2.0",
      "jest-express": "^1.10.1",
      "memfs": "~2.9.4",
      "typedoc": "^0.15.0",
      "typedoc-plugin-internal-external": "^2.0.2",
      "typedoc-plugin-markdown": "^2.2.4",
      "typedoc-plugin-no-inherit": "^1.1.10",
      "unionfs": "^4.4.0"
    },
    "gitHead": "f91998cb535573b8cf07f2a0ce7595c10ff466c1",
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-@webruntime-server-0.30.12-8966251768c39d6f9f26003f69a753ef808b1dc7-integrity\\node_modules\\@webruntime\\server\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Lighting Web Runtime :: Server\n\nThe Lightning Web Runtime server is a pluggable application server.\n\nAn application is described using [configuration](#configuration) and enabled by the configured **services**.\n\n[Addressable Services](../api/docs/classes/_services_addressable_service_.addressableservice.md) provide the basis for what LWC component dependencies can be supported by the application server.\n\n## Getting Started\n\nTo install the core runtime package:\n\n```\nnpm install @webruntime/server\n```\n\n## Startup script\n\nThe LWR Server API can be used to interact with a runnable app server. By default, the server, once created and started, will serve the application and components defined in the `webruntime-app.config.js`.\n\nA simple startup script:\n\n```\nconst { Server } = require('@webruntime/server');\n\nconst server = new Server();\nserver.initialize().then(() => {\n    server.start();\n});\n```\n\n## Project Setup\n\nThe project setup for a Lightning Web Application can be customized using the options in the `webruntime-app.config.js`.\nHowever, the following is a recommendation for your project:\n\n    .\n    ├── dist                         # Build directory (buildDir) - containing static served content.\n    ├── src\n    │   ├── server                   # Runtime source code -- custom services, page resources, index.js\n    │   ├── client                   # Client source code -- index.html, LWC components\n    │   │   ├── modules              # Project source LWC components\n    │   │   └── index.html           # Default application template\n    └── webruntime-app.config.js     # Project Webruntime configuration\n    └── package.json\n\n## Configuration\n\nApplication configuration and customization is done via `webruntime-app.config.js`. Customization of what services the application requires, how the application components are bundled and provided to the client, and component compiler configuration can be set in `webruntime-app.config.js`.\n\nA sample application configuration:\n\n```javascript\n/**\n * Sample App Configuration\n */\n\nconst { ComponentService, ImportMapService, AppBootstrapService } = require('@webruntime/services');\n\nmodule.exports = {\n    buildDir: 'dist',\n    moduleDir: 'src/client/modules',\n\n    // LWR Application configuration\n    app: {\n        defaultComponent: 'my/app',\n        defaultTemplate: 'src/index.html',\n    },\n\n    // Addressable Services\n    services: [ComponentService, ImportMapService, AppBootstrapService],\n\n    // Component Bundling Configuration\n    bundle: ['my/app'],\n\n    // Registry of application bundle components, including shared lwc components\n    // These specifiers are automatically included in the externals array below\n    preloadModules: ['wire-service'],\n\n    // These libraries will not be included in the page bundles\n    externals: ['lwc', 'universal_container/loader'],\n};\n```\n\nAdditional details on [`Configuration Options`](../api/docs/modules/_config_.md)\n\n## App Level Enhancements\n\nSince the Runtime, encapsulates the application server hosting the application and its resource API's, it is possible to enhance and extend the underlying application by creating a server Extension.\n\nYou can use the extension to hook in additional services or API's to application server through either the [`extendApp`](docs/modules/_server_extensions_.md#ContainerAppExtension) or [`bootstrap`](docs/modules/_server_extensions_.md#ContainerBootstrapExtension) hooks.\n\nIt's recommended that your put your project-level server extensions alongside the other Runtime source code.\n\n    .\n    ├── src\n    │   ├── server\n    │   │   ├── extension.js        # Project server extension\n\n### Configuration\n\nThe extensions are configured as a part of the `webruntime-app.config.js`.\n\n```\nmodule.exports = {\n    ...\n    server: {\n        extensions: [\"src/server/extensions.js\"]\n    }\n}\n```\n\n### Usage Example\n\nAs one example of an extension, you can add your private APIs to the application server:\n\n```\nmodule.exports = {\n    extendApp: ({ app, options }) => {\n        app.use(\"/private/api\", (req, res) => {\n            res.send(\"Private .... shhhh\");\n        })\n    }\n}\n\n```\n",
    "licenseText": "MIT LICENSE\n\nCopyright (c) 2019, Salesforce.com, Inc.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@webruntime/server/-/server-0.30.12.tgz#8966251768c39d6f9f26003f69a753ef808b1dc7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@webruntime/server/-/server-0.30.12.tgz",
    "hash": "8966251768c39d6f9f26003f69a753ef808b1dc7",
    "integrity": "sha512-wSyqQGy8p+hNEvoXwB5BIzoqLOt9khMQHJoEpURpK7lDFeu64Uvq5Ez4IZiEEybBFo1mKRJEANmp0AkUJFhCzg==",
    "registry": "npm",
    "packageName": "@webruntime/server",
    "cacheIntegrity": "sha512-wSyqQGy8p+hNEvoXwB5BIzoqLOt9khMQHJoEpURpK7lDFeu64Uvq5Ez4IZiEEybBFo1mKRJEANmp0AkUJFhCzg== sha1-iWYlF2jDnW+fJgA/aadT74CLHcc="
  },
  "registry": "npm",
  "hash": "8966251768c39d6f9f26003f69a753ef808b1dc7"
}
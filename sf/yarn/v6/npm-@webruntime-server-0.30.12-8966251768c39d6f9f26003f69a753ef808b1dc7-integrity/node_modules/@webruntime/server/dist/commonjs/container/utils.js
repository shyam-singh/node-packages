"use strict";
/** @hidden */
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hasha_1 = __importDefault(require("hasha"));
const glob_to_regexp_1 = __importDefault(require("glob-to-regexp"));
const HASH_ALGO = 'md5';
const HASH_LENGTH = 10;
function computeResourceId(content) {
    // compute the resource uids i.e. uid by mode
    return hasha_1.default(typeof content === 'object' ? JSON.stringify(content) : content, {
        algorithm: HASH_ALGO,
    }).substring(0, HASH_LENGTH);
}
exports.computeResourceId = computeResourceId;
function computeBundleId(results) {
    // compute the resource uids i.e. uid by mode
    return results.reduce((acc, result) => {
        if (result.uid) {
            acc = hasha_1.default(acc + result.uid, { algorithm: HASH_ALGO }).substring(0, HASH_LENGTH);
        }
        return acc;
    }, '');
}
exports.computeBundleId = computeBundleId;
function replaceAll(str, mapObj) {
    const re = new RegExp(`:${Object.keys(mapObj).join('|:')}`, 'gi');
    return str.replace(re, function (matched) {
        const name = matched.slice(1);
        return mapObj[name.toLowerCase()];
    });
}
exports.replaceAll = replaceAll;
function isMaskedBy(specifier, patterns) {
    if (!patterns) {
        return false;
    }
    return (patterns.findIndex(glob => {
        return glob_to_regexp_1.default(glob).test(specifier);
    }) >= 0);
}
exports.isMaskedBy = isMaskedBy;
//# sourceMappingURL=utils.js.map
"use strict";
/** @hidden */
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@webruntime/api");
const messages_1 = require("../utils/messages");
// reference implementation take from:
// https://github.com/WICG/import-maps/tree/master/reference-implementation
function resolve(specifier, parsedImportMap) {
    const importsMatch = resolveImportsMatch(specifier, parsedImportMap.imports);
    api_1.invariant(importsMatch, messages_1.containerMessages.INVALID_RESOURCE, [specifier]);
    return importsMatch;
}
exports.resolve = resolve;
function resolveImportsMatch(normalizedSpecifier, importMap) {
    for (const [specifierKey, addressArray] of Object.entries(importMap)) {
        const addresses = Array.isArray(addressArray) ? addressArray : [addressArray];
        // Exact-match case
        if (specifierKey === normalizedSpecifier) {
            api_1.invariant(addresses.length !== 0, messages_1.containerMessages.MISSING_ADDRESSES, [normalizedSpecifier]);
            if (addresses.length === 1) {
                return addresses[0];
            }
            api_1.invariant(false, messages_1.containerMessages.INVALID_MULTI_ADDRESSES);
        }
        // Package prefix-match case
        if (specifierKey.endsWith('/') && normalizedSpecifier.startsWith(specifierKey)) {
            api_1.invariant(addresses.length !== 0, messages_1.containerMessages.MISSING_PACKAGE_ADDRESSES, [
                normalizedSpecifier,
                specifierKey,
            ]);
            if (addresses.length === 1) {
                const afterPrefix = normalizedSpecifier.substring(specifierKey.length);
                let uri = addresses[0];
                if (typeof uri === 'object') {
                    uri = uri.uri;
                    return { ...addresses[0], uri: [uri, afterPrefix].join('') };
                }
                return [uri, afterPrefix].join('');
            }
            api_1.invariant(false, messages_1.containerMessages.INVALID_MULTI_ADDRESSES);
        }
    }
    return undefined;
}
//# sourceMappingURL=import-resolver.js.map
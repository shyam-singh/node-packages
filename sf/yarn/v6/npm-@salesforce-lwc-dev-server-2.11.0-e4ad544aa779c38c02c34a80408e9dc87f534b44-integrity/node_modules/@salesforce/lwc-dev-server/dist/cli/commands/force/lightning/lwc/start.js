"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const Project_1 = __importDefault(require("../../../../../common/Project"));
const LocalDevServer_1 = __importDefault(require("../../../../../server/LocalDevServer"));
const LocalDevTelemetryReporter_1 = __importDefault(require("../../../../../instrumentation/LocalDevTelemetryReporter"));
const debug_1 = __importDefault(require("debug"));
const colors_1 = __importDefault(require("colors"));
const uuidv4_1 = __importDefault(require("uuidv4"));
const Constants_1 = require("../../../../../common/Constants");
const debug = debug_1.default('localdevserver');
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/lwc-dev-server', 'start');
class Start extends command_1.SfdxCommand {
    async run() {
        const sessionNonce = uuidv4_1.default();
        const reporter = LocalDevTelemetryReporter_1.default.getInstance();
        await reporter.initializeService(sessionNonce);
        try {
            this.ux.log(colors_1.default.gray(messages.getMessage('legal:cliusage')));
            const conn = this.org.getConnection();
            const api_version = '49.0';
            this.reportStatus(colors_1.default.green(this.org.getUsername() || ''), colors_1.default.green(api_version));
            await this.org.refreshAuth();
            const accessToken = conn.accessToken;
            const srvConfig = {
                apiVersion: api_version,
                headers: [`Authorization: Bearer ${accessToken}`],
                instanceUrl: conn.instanceUrl,
                port: this.flags.port
            };
            const projectPath = this.project ? this.project.getPath() : '.';
            const project = new Project_1.default(projectPath, srvConfig);
            const retValue = {
                orgId: this.org.getOrgId(),
                api_version: project.configuration.api_version,
                endpoint: project.configuration.endpoint,
                endpointHeaders: project.configuration.endpointHeaders,
                port: project.configuration.port,
                token: accessToken
            };
            debug(JSON.stringify({
                ...retValue,
                token: undefined,
                endpointHeaders: undefined
            }));
            const server = new LocalDevServer_1.default(project, conn);
            await server.start();
            const exitHandler = async () => {
                this.ux.log('\nStopping local development server');
                await server.shutdown();
                process.exit();
            };
            process.on('SIGINT', exitHandler);
            process.on('SIGTERM', exitHandler);
            return retValue;
        }
        catch (e) {
            reporter.trackApplicationStartError(e.message);
            return Promise.reject(e);
        }
    }
    reportStatus(orgUsername, apiVersion) {
        this.ux.log(`\nStarting LWC Local Development.\n\tUsername: ${orgUsername}\n\tApi Version: ${apiVersion}\n`);
    }
}
exports.default = Start;
Start.description = messages.getMessage('commandDescription');
Start.examples = [
    `$ sfdx force:lighting:lwc:start`,
    `$ sfdx force:lighting:lwc:start --port 3000`
];
Start.args = [];
Start.flagsConfig = {
    port: command_1.flags.integer({
        char: 'p',
        default: Constants_1.DEFAULT_PORT,
        description: messages.getMessage('portFlagDescription')
    })
};
Start.requiresProject = true;
Start.requiresUsername = true;
//# sourceMappingURL=start.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fileUtils_1 = require("../common/fileUtils");
const Constants_1 = require("./Constants");
function copyStaticAssets(project, config) {
    copyDistAssets(config);
    copyStaticResources(project, config);
    copyContentAssets(project, config);
}
exports.copyStaticAssets = copyStaticAssets;
function copyDistAssets(config) {
    const distAssetsPath = path_1.default.join(config.serverDir, 'dist', 'assets');
    try {
        const localDevAssetsPath = path_1.default.join(config.buildDir, 'assets', 'localdev');
        fileUtils_1.removeFile(localDevAssetsPath);
        fileUtils_1.copyFiles(path_1.default.join(distAssetsPath, '*'), localDevAssetsPath);
    }
    catch (e) {
        throw new Error(`Unable to copy dist assets: ${e.message || e}`);
    }
}
exports.copyDistAssets = copyDistAssets;
function copyStaticResources(project, config) {
    const staticResources = project.staticResourcesDirectories;
    try {
        if (staticResources && staticResources.length > 0) {
            const assetsPath = path_1.default.join(config.buildDir, 'assets', 'project', Constants_1.STATIC_RESOURCES);
            fileUtils_1.removeFile(assetsPath);
            staticResources.forEach((item) => {
                fileUtils_1.copyFiles(path_1.default.join(item, '*'), assetsPath);
            });
        }
    }
    catch (e) {
        throw new Error(`Unable to copy static resources: ${e.message || e}`);
    }
}
exports.copyStaticResources = copyStaticResources;
function copyContentAssets(project, config) {
    const contentAssets = project.contentAssetsDirectories;
    try {
        if (contentAssets && contentAssets.length > 0) {
            const assetsPath = path_1.default.join(config.buildDir, 'assets', 'project', Constants_1.CONTENT_ASSETS);
            fileUtils_1.removeFile(assetsPath);
            contentAssets.forEach((item) => {
                fileUtils_1.copyFiles(path_1.default.join(item, '*'), assetsPath);
            });
        }
    }
    catch (e) {
        console.warn(`Unable to copy content assets: ${e.getMessage || e}`);
    }
}
exports.copyContentAssets = copyContentAssets;
function rebuildResource(project, config, resourcePath) {
    if (isValidStaticResource(project, resourcePath)) {
        copyStaticResources(project, config);
    }
    else if (isValidContentAsset(project, resourcePath)) {
        copyContentAssets(project, config);
    }
    else {
        console.error(`Unable to reload resource ${resourcePath} to the local dev server cache.`);
        return;
    }
}
exports.rebuildResource = rebuildResource;
function isValidStaticResource(project, resourcePath) {
    let isValidStaticResource = false;
    const staticResources = project.staticResourcesDirectories;
    if (staticResources && staticResources.length > 0) {
        staticResources.forEach(item => {
            if (resourcePath.startsWith(item)) {
                isValidStaticResource = true;
                return;
            }
        });
    }
    return isValidStaticResource;
}
exports.isValidStaticResource = isValidStaticResource;
function isValidContentAsset(project, resourcePath) {
    let isValidStaticResource = false;
    const contentAssets = project.contentAssetsDirectories;
    if (contentAssets && contentAssets.length > 0) {
        contentAssets.forEach(item => {
            if (resourcePath.startsWith(item)) {
                isValidStaticResource = true;
                return;
            }
        });
    }
    return isValidStaticResource;
}
exports.isValidContentAsset = isValidContentAsset;
//# sourceMappingURL=StaticResourcesUtils.js.map
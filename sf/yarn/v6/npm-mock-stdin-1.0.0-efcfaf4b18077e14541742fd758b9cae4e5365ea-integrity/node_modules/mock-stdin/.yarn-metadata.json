{
  "manifest": {
    "name": "mock-stdin",
    "version": "1.0.0",
    "description": "Mock STDIN file descriptor in Node.js",
    "main": "./lib/index.js",
    "scripts": {
      "test": "mocha test/"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/caitp/node-mock-stdin"
    },
    "keywords": [
      "test",
      "mock",
      "node",
      "fs",
      "stdin"
    ],
    "author": {
      "name": "Caitlin Potter",
      "email": "caitpotter88@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/caitp/node-mock-stdin/issues"
    },
    "homepage": "https://github.com/caitp/node-mock-stdin",
    "devDependencies": {
      "mocha": "^6.2.2"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-mock-stdin-1.0.0-efcfaf4b18077e14541742fd758b9cae4e5365ea-integrity\\node_modules\\mock-stdin\\package.json",
    "readmeFilename": "README.md",
    "readme": "# node-mock-stdin\n\n[![Build Status](https://travis-ci.org/caitp/node-mock-stdin.svg?branch=master)](https://travis-ci.org/caitp/node-mock-stdin) [![Coverage Status](https://img.shields.io/coveralls/caitp/node-mock-stdin.svg)](https://coveralls.io/r/caitp/node-mock-stdin?branch=master) [![NPM Version](http://img.shields.io/npm/v/mock-stdin.svg)](https://www.npmjs.org/package/mock-stdin)\n\nProvide a mock readable stream, useful for testing interactive CLI applications.\n\nMaybe simple mocks for other standard files wouldn't be a terrible idea, if anyone\nfeels like those are needed. Patches welcome.\n\n## API\n\n- **Module**\n  - [stdin()](#modulestdin)\n- **MockSTDIN**\n  - [send()](#mockstdinsenddata-encoding)\n  - [end()](#mockstdinend)\n  - [restore()](#mockstdinrestore)\n  - [reset()](#mockstdinresetremovelisteners)\n\n---\n\n### Module.stdin()\n\n**example**\n\n```js\nrequire('mock-stdin').stdin();\n```\n\nReplaces the existing `process.stdin` value with a mock object exposing a `send` method (a\n`MockSTDIN` instance). This allows APIs like `process.openStdin()` or `process.stdin.on()`\nto operate on a mock instance.\n\n**note**: Event listeners from the original `process.stdin` instance are not added to the\nmock instance. Installation of the mock should occur before any event listeners are\nregistered.\n\n**return value**: A `MockSTDIN` instance\n\n---\n\n### MockSTDIN.send(data, encoding)\n\n**example**\n\n```js\nvar stdin = require('mock-stdin').stdin();\nstdin.send(\"Some text\", \"ascii\");\nstdin.send(Buffer(\"Some text\", \"Some optional encoding\"));\nstdin.send([\n  \"Array of lines\",\n  \"  which are joined with a linefeed.\"\n]);\n\n// sending a null will trigger EOF and dispatch an 'end' event.\nstdin.send(null);\n```\n\nQueue up data to be read by the stream. Results in data (and possibly end) events being \ndispatched.\n\n**parameters**\n  - `data`: A `String`, `Buffer`, `Array<String>`, or `null`. The `data` parameter will result in\n    the default encoding if specified as a string or array of strings.\n  - `encoding`: An optional encoding which is used when `data` is a `String`.\n      Node.js's internal Readable Stream will convert the specified encoding into the output\n      encoding, which is transcoded if necessary.\n\n**return value**: The `MockSTDIN` instance, for chaining.\n\n---\n\n### MockSTDIN.end()\n\n**example**\n\n```js\nvar stdin = require('mock-stdin').stdin();\nstdin.end();\n```\n\nAlias for [MockSTDIN.send(null)](#mockstdinsend). Results in dispatching an `end` event.\n\n**return value**: The `MockSTDIN` instance, for chaining.\n\n---\n\n### MockSTDIN.restore()\n\n**example**\n\n```js\nvar stdin = require('mock-stdin').stdin();\n// process.stdin is now a mock stream\nstdin.restore();\n// process.stdin is returned to its original state\n```\n\nRestore the target of the mocked stream. If only a single mock stream is created, will restore\nthe original `stdin` TTY stream. If multiple mock streams are created, it will restore the\nstream which was active at the time the mock was created.\n\n**return value**: The `MockSTDIN` instance, for chaining.\n\n---\n\n### MockSTDIN.reset(removeListeners)\n\n**example**\n\n```js\nvar stdin = require('mock-stdin').stdin();\nstdin.end();\nstdin.reset();\nstdin.send(\"some data\");\n```\n\nOrdinarily, a Readable stream will throw when attempting to push after an EOF. This routine will\nreset the `ended` state of a Readable stream, preventing it from throwing post-EOF. This prevents\nbeing required to re-create a mock STDIN instance during certain tests where a fresh stdin is\nrequired.\n\nIf the `removeListeners` flag is set to `true`, all event listeners will also be reset. This is\nuseful in cases where you need to emulate restarting an entire application, without fully \nre-creating the mock object.\n\n**parameters**\n  - `removeListeners`: Boolean value which, when set to `true`, will remove all event listeners\n  attached to the stream.\n\n**return value**: The `MockSTDIN` instance, for chaining.\n\n---\n\n## [LICENSE](LICENSE)\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Caitlin Potter & Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Caitlin Potter & Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mock-stdin/-/mock-stdin-1.0.0.tgz#efcfaf4b18077e14541742fd758b9cae4e5365ea",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mock-stdin/-/mock-stdin-1.0.0.tgz",
    "hash": "efcfaf4b18077e14541742fd758b9cae4e5365ea",
    "integrity": "sha512-tukRdb9Beu27t6dN+XztSRHq9J0B/CoAOySGzHfn8UTfmqipA5yNT/sDUEyYdAV3Hpka6Wx6kOMxuObdOex60Q==",
    "registry": "npm",
    "packageName": "mock-stdin",
    "cacheIntegrity": "sha512-tukRdb9Beu27t6dN+XztSRHq9J0B/CoAOySGzHfn8UTfmqipA5yNT/sDUEyYdAV3Hpka6Wx6kOMxuObdOex60Q== sha1-78+vSxgHfhRUF0L9dYucrk5TZeo="
  },
  "registry": "npm",
  "hash": "efcfaf4b18077e14541742fd758b9cae4e5365ea"
}
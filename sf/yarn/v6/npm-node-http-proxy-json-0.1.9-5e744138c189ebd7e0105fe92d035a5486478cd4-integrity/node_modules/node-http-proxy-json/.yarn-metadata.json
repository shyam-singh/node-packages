{
  "manifest": {
    "name": "node-http-proxy-json",
    "version": "0.1.9",
    "description": "for node-http-proxy transform the response json from the proxied server.",
    "main": "index.js",
    "scripts": {
      "test": "./node_modules/.bin/mocha -R spec ./test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/langjt/node-http-proxy-json.git"
    },
    "keywords": [
      "http-proxy",
      "streaming",
      "json"
    ],
    "author": {
      "name": "XianFa Lang",
      "email": "xianfalang@gmail.com",
      "url": "http://www.cnblogs.com/langjt"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/langjt/node-http-proxy-json/issues"
    },
    "homepage": "https://github.com/langjt/node-http-proxy-json#readme",
    "dependencies": {
      "bufferhelper": "^0.2.1",
      "concat-stream": "^1.5.1"
    },
    "devDependencies": {
      "chai": "^3.5.0",
      "http-proxy": "^1.13.3",
      "mocha": "^2.5.3"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-node-http-proxy-json-0.1.9-5e744138c189ebd7e0105fe92d035a5486478cd4-integrity\\node_modules\\node-http-proxy-json\\package.json",
    "readmeFilename": "README.md",
    "readme": "# node-http-proxy-json [![Build Status](https://travis-ci.org/langjt/node-http-proxy-json.svg?branch=master)](https://travis-ci.org/langjt/node-http-proxy-json)\n  for [node-http-proxy](https://github.com/nodejitsu/node-http-proxy) transform the response json from the proxied server.\n\n## Installation\n\n```  \nnpm install node-http-proxy-json\n```\n\n## Motivation\n  When using [node-http-proxy](https://github.com/nodejitsu/node-http-proxy) need to modify the response. If your proxy server returns HTML/XML document, you can try [Harmon](https://github.com/No9/harmon).\n  But sometimes the proxy server only returns the JSON. For example, call API from the server. Usually the server will compress the data.\n  So before using this repository, confirm your server compression format, currently only supports **gzip**„ÄÅ**deflate** and **uncompressed**.\n  If you need other compression formats, please create a new Issue, and I will try to achieve it as much as possible.\n\n## Use Cases\n\n#### Simulation server using gzip compression\n\n```js\nvar zlib = require('zlib');\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar modifyResponse = require('node-http-proxy-json');\n\n// Create a proxy server\nvar proxy = httpProxy.createProxyServer({\n    target: 'http://localhost:5001'\n});\n\n// Listen for the `proxyRes` event on `proxy`.\nproxy.on('proxyRes', function (proxyRes, req, res) {\n    modifyResponse(res, proxyRes, function (body) {\n        if (body) {\n            // modify some information\n            body.age = 2;\n            delete body.version;\n        }\n        return body; // return value can be a promise\n    });\n});\n\n// Create your server and then proxies the request\nvar server = http.createServer(function (req, res) {\n    proxy.web(req, res);\n}).listen(5000);\n\n// Create your target server\nvar targetServer = http.createServer(function (req, res) {\n\n    // Create gzipped content\n    var gzip = zlib.Gzip();\n    var _write = res.write;\n    var _end = res.end;\n\n    gzip.on('data', function (buf) {\n        _write.call(res, buf);\n    });\n    gzip.on('end', function () {\n        _end.call(res);\n    });\n\n    res.write = function (data) {\n        gzip.write(data);\n    };\n    res.end = function () {\n        gzip.end();\n    };\n\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'gzip'});\n    res.write(JSON.stringify({name: 'node-http-proxy-json', age: 1, version: '1.0.0'}));\n    res.end();\n}).listen(5001);\n```\n\n#### Simulation server using deflate compression\n\n```js\nvar zlib = require('zlib');\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar modifyResponse = require('../');\n\n// Create a proxy server\nvar proxy = httpProxy.createProxyServer({\n    target: 'http://localhost:5001'\n});\n\n// Listen for the `proxyRes` event on `proxy`.\nproxy.on('proxyRes', function (proxyRes, req, res) {\n    modifyResponse(res, proxyRes, function (body) {\n        if (body) {\n            // modify some information\n            body.age = 2;\n            delete body.version;\n        }\n        return body; // return value can be a promise\n    });\n});\n\n// Create your server and then proxies the request\nvar server = http.createServer(function (req, res) {\n    proxy.web(req, res);\n}).listen(5000);\n\n// Create your target server\nvar targetServer = http.createServer(function (req, res) {\n\n    // Create deflated content\n    var deflate = zlib.Deflate();\n    var _write = res.write;\n    var _end = res.end;\n\n    deflate.on('data', function (buf) {\n        _write.call(res, buf);\n    });\n    deflate.on('end', function () {\n        _end.call(res);\n    });\n\n    res.write = function (data) {\n        deflate.write(data);\n    };\n    res.end = function () {\n        deflate.end();\n    };\n\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'deflate'});\n    res.write(JSON.stringify({name: 'node-http-proxy-json', age: 1, version: '1.0.0'}));\n    res.end();\n}).listen(5001);\n```\n\n#### Server does not enable compression\n\n```js\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar modifyResponse = require('../');\n\n// Create a proxy server\nvar proxy = httpProxy.createProxyServer({\n    target: 'http://localhost:5001'\n});\n\n// Listen for the `proxyRes` event on `proxy`.\nproxy.on('proxyRes', function (proxyRes, req, res) {\n    modifyResponse(res, proxyRes, function (body) {\n        if (body) {\n            // modify some information\n            body.age = 2;\n            delete body.version;\n        }\n        return body; // return value can be a promise\n    });\n});\n\n// Create your server and then proxies the request\nvar server = http.createServer(function (req, res) {\n    proxy.web(req, res);\n}).listen(5000);\n\n// Create your target server\nvar targetServer = http.createServer(function (req, res) {\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'deflate'});\n    res.write(JSON.stringify({name: 'node-http-proxy-json', age: 1, version: '1.0.0'}));\n    res.end();\n}).listen(5001);\n```\n\n## Tests\n\n  To run the test suite, first install the dependencies, then run `npm test`:\n\n```bash\n$ npm install\n$ npm test\n```\n\n## License\n\n  [MIT](http://opensource.org/licenses/MIT)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 XianFa Lang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-http-proxy-json/-/node-http-proxy-json-0.1.9.tgz#5e744138c189ebd7e0105fe92d035a5486478cd4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-http-proxy-json/-/node-http-proxy-json-0.1.9.tgz",
    "hash": "5e744138c189ebd7e0105fe92d035a5486478cd4",
    "integrity": "sha512-WrKAR/y09BWaz5WqgbxuE6D/XsdhQFkLkSdnRk0a5uBKSINtApMV085MN7JMh+stiyBBltvgSR9SYVIZIpKKKQ==",
    "registry": "npm",
    "packageName": "node-http-proxy-json",
    "cacheIntegrity": "sha512-WrKAR/y09BWaz5WqgbxuE6D/XsdhQFkLkSdnRk0a5uBKSINtApMV085MN7JMh+stiyBBltvgSR9SYVIZIpKKKQ== sha1-XnRBOMGJ69fgEF/pLQNaVIZHjNQ="
  },
  "registry": "npm",
  "hash": "5e744138c189ebd7e0105fe92d035a5486478cd4"
}
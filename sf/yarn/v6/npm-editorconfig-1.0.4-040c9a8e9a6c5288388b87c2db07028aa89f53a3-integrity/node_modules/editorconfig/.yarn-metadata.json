{
  "manifest": {
    "name": "editorconfig",
    "version": "1.0.4",
    "description": "EditorConfig File Locator and Interpreter for Node.js",
    "keywords": [
      "editorconfig",
      "core"
    ],
    "main": "./lib/index.js",
    "contributors": [
      {
        "name": "Hong Xu",
        "url": "topbug.net"
      },
      {
        "name": "Jed Mao",
        "url": "https://github.com/jedmao/"
      },
      {
        "name": "Trey Hunner",
        "url": "http://treyhunner.com"
      },
      {
        "name": "Joe Hildebrand",
        "url": "https://github.com/hildjj/"
      }
    ],
    "scripts": {
      "clean": "rimraf lib cmake_install.cmake CTestTestfile.cmake Makefile",
      "prebuild": "npm run clean",
      "build": "cmake . && tsc",
      "pretest": "npm run build && npm run lint",
      "test": "npm run test:all",
      "test:all": "mocha && ctest . --preset Test",
      "precoverage": "npm run build -- --inlineSourceMap",
      "coverage": "c8 npm run test:all",
      "postcoverage": "npm run build",
      "ci": "npm run coverage -- -- -VV --output-on-failure",
      "lint": "eslint . --ext ts",
      "prepub": "npm run lint && npm run build",
      "pub": "npm publish"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/editorconfig/editorconfig-core-js.git"
    },
    "bugs": {
      "url": "https://github.com/editorconfig/editorconfig-core-js/issues"
    },
    "author": {
      "name": "EditorConfig Team"
    },
    "license": "MIT",
    "dependencies": {
      "@one-ini/wasm": "0.1.1",
      "commander": "^10.0.0",
      "minimatch": "9.0.1",
      "semver": "^7.5.3"
    },
    "devDependencies": {
      "@types/mocha": "^10.0.1",
      "@types/node": "^20.3.1",
      "@types/semver": "^7.5.0",
      "@typescript-eslint/eslint-plugin": "5.60.0",
      "@typescript-eslint/parser": "5.60.0",
      "c8": "8.0.0",
      "eslint": "8.43.0",
      "eslint-plugin-jsdoc": "46.2.6",
      "mocha": "^10.2.0",
      "rimraf": "^5.0.1",
      "should": "^13.2.3",
      "typescript": "^5.1.3"
    },
    "engines": {
      "node": ">=14"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-editorconfig-1.0.4-040c9a8e9a6c5288388b87c2db07028aa89f53a3-integrity\\node_modules\\editorconfig\\package.json",
    "readmeFilename": "README.md",
    "readme": "# EditorConfig JavaScript Core\n\n[![Tests](https://github.com/editorconfig/editorconfig-core-js/actions/workflows/node.js.yml/badge.svg)](https://github.com/editorconfig/editorconfig-core-js/actions/workflows/node.js.yml)\n[![Coverage Status](https://coveralls.io/repos/github/editorconfig/editorconfig-core-js/badge.svg?branch=master)](https://coveralls.io/github/editorconfig/editorconfig-core-js?branch=master)\n\nThe EditorConfig JavaScript core will provide the same functionality as the\n[EditorConfig C Core][] and [EditorConfig Python Core][].\n\n## Installation\n\nYou need [node][] to use this package.\n\nTo install the package locally:\n\n```bash\n$ npm install editorconfig\n```\n\nTo install the package system-wide:\n\n```bash\n$ npm install -g editorconfig\n```\n\n## Usage\n\n### Options\n\nMost of the API takes an `options` object, which has the following defaults:\n\n```js\n{\n  config: '.editorconfig',\n  version: pkg.version,\n  root: '/',\n  files: undefined,\n  cache: undefined,\n};\n```\n\n<dl>\n  <dt>config</dt>\n  <dd>The name of the config file to look for in the current and every parent\n      directory.</dd>\n\n  <dt>version</dt>\n  <dd>Which editorconfig spec version to use.  Earlier versions had different\n      defaults.</dd>\n\n  <dt>root</dt>\n  <dd>What directory to stop processing in, even if we haven't found a file\n      containing root=true.  Defaults to the root of the filesystem containing\n      `process.cwd()`.</dd>\n\n  <dt>files</dt>\n  <dd>Pass in an empty array, which will be filled with one object for each\n      config file processed.  The objects will have the shape\n      `{filename: \"[DIRECTORY]/.editorconfig\", glob: \"*\"}`</dd>\n\n  <dt>cache</dt>\n  <dd>If you are going to process more than one file in the same project, pass\n      in a cache object.  It must have `get(string): object|undefined` and\n      `set(string, object)` methods, like a JavaScript Map.  A long-running\n      process might want to consider that this cache might grow over time,\n      and that the config files might change over time.  However, we leave any\n      complexity of that nature to the caller, since there are so many different\n      approaches that might be taken based on latency, memory, and CPU trade-offs.\n      Note that some of the objects in the cache will be for files that did not\n      exist.  Those objects will have a `notfound: true` property.  All of the\n      objects will have a `name: string` property that contains the\n      fully-qualified file name of the config file and a `root: boolean` property\n      that describes if the config file had a `root=true` at the top.  Any other\n      properties in the objects should be treated as opaque.</dd>\n</dl>\n\n### in Node.js:\n\n#### parse(filePath[, options])\n\nSearch for `.editorconfig` files starting from the current directory to the\nroot directory.  Combine all of the sections whose section names match\nfilePath into a single object.\n\nExample:\n\n```js\nconst editorconfig = require('editorconfig');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, 'sample.js');\n\n(async () => {\n  console.log(await editorconfig.parse(filePath, {files: []}));\n})();\n/*\n  {\n    indent_style: 'space',\n    indent_size: 2,\n    end_of_line: 'lf',\n    charset: 'utf-8',\n    trim_trailing_whitespace: true,\n    insert_final_newline: true,\n    tab_width: 2\n  };\n  assert.deepEqual(files, [\n    { fileName: '[DIRECTORY]/.editorconfig', glob: '*' },\n    { fileName: '[DIRECTORY]/.editorconfig', glob: '*.js' }\n  ])\n*/\n```\n\n#### parseSync(filePath[, options])\n\nSynchronous version of `editorconfig.parse()`.\n\n#### parseBuffer(fileContent)\n\nThe `parse()` function above uses `parseBuffer()` under the hood. If you have\nthe contents of a config file, and want to see what is being processed for\njust that file rather than the full directory hierarchy, this might be useful.\n\n#### parseString(fileContent)\n\nThis is a thin wrapper around `parseBuffer()` for backward-compatibility.\nPrefer `parseBuffer()` to avoid an unnecessary UTF8-to-UTF16-to-UTF8\nconversion.  Deprecated.\n\n#### parseFromFiles(filePath, configs[, options])\n\nLow-level interface, which exists only for backward-compatibility.  Deprecated.\n\nExample:\n\n```js\nconst editorconfig = require('editorconfig');\nconst fs = require('fs');\nconst path = require('path');\n\nconst configPath = path.join(__dirname, '.editorconfig');\nconst configs = [\n  {\n    name: configPath,\n    contents: fs.readFileSync(configPath, 'utf8')\n  }\n];\n\nconst filePath = path.join(__dirname, '/sample.js');\n\n(async () => {\n  console.log(await editorconfig.parseFromFiles(filePath, Promise.resolve(configs)))\n})();\n/*\n  {\n    indent_style: 'space',\n    indent_size: 2,\n    end_of_line: 'lf',\n    charset: 'utf-8',\n    trim_trailing_whitespace: true,\n    insert_final_newline: true,\n    tab_width: 2\n  };\n*/\n```\n\n#### parseFromFilesSync(filePath, configs[, options])\n\nSynchronous version of `editorconfig.parseFromFiles()`.  Deprecated.\n\n### in Command Line\n\n```bash\n$ ./bin/editorconfig\n\nUsage: editorconfig [options] <FILEPATH...>\n\nArguments:\n  FILEPATH       Files to find configuration for.  Can be a hyphen (-) if you\n                 want path(s) to be read from stdin.\n\nOptions:\n  -v, --version  Display version information from the package\n  -f <path>      Specify conf filename other than '.editorconfig'\n  -b <version>   Specify version (used by devs to test compatibility)\n  --files        Output file names that contributed to the configuration,\n                 rather than the configuation itself\n  -h, --help     display help for command\n```\n\nExample:\n\n```bash\n$ ./bin/editorconfig /home/zoidberg/humans/anatomy.md\ncharset=utf-8\ninsert_final_newline=true\nend_of_line=lf\ntab_width=8\ntrim_trailing_whitespace=sometimes\n```\n\n```bash\n$ ./bin/editorconfig --files /home/zoidberg/humans/anatomy.md\n/home/zoidberg/.editorconfig [*]\n/home/zoidberg/.editorconfig [*.md]\n/home/zoidberg/humans/.editorconfig [*]\n```\n\n## Development\n\nTo install dependencies for this package run this in the package directory:\n\n```bash\n$ npm install\n```\n\nNext, run the following commands:\n\n```bash\n$ npm run build\n$ npm link\n```\n\nThe global editorconfig will now point to the files in your development\nrepository instead of a globally-installed version from npm. You can now use\neditorconfig directly to test your changes.\n\nIf you ever update from the central repository and there are errors, it might\nbe because you are missing some dependencies. If that happens, just run npm\nlink again to get the latest dependencies.\n\nTo test the command line interface:\n\n```bash\n$ editorconfig <filepath>\n```\n\n# Testing\n\n[CMake][] must be installed to run the tests.\n\nTo run the tests:\n\n```bash\n$ npm test\n```\n\nTo run the tests with increased verbosity (for debugging test failures):\n\n```bash\n$ npm run ci\n```\n\n[EditorConfig C Core]: https://github.com/editorconfig/editorconfig-core\n[EditorConfig Python Core]: https://github.com/editorconfig/editorconfig-core-py\n[node]: http://nodejs.org/\n[cmake]: http://www.cmake.org\n",
    "bin": {
      "editorconfig": "bin\\editorconfig"
    },
    "licenseText": "Copyright © 2012 EditorConfig Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the “Software”), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/editorconfig/-/editorconfig-1.0.4.tgz#040c9a8e9a6c5288388b87c2db07028aa89f53a3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/editorconfig/-/editorconfig-1.0.4.tgz",
    "hash": "040c9a8e9a6c5288388b87c2db07028aa89f53a3",
    "integrity": "sha512-L9Qe08KWTlqYMVvMcTIvMAdl1cDUubzRNYL+WfA4bLDMHe4nemKkpmYzkznE1FwLKu0EEmy6obgQKzMJrg4x9Q==",
    "registry": "npm",
    "packageName": "editorconfig",
    "cacheIntegrity": "sha512-L9Qe08KWTlqYMVvMcTIvMAdl1cDUubzRNYL+WfA4bLDMHe4nemKkpmYzkznE1FwLKu0EEmy6obgQKzMJrg4x9Q== sha1-BAyajppsUog4i4fC2wcCiqifU6M="
  },
  "registry": "npm",
  "hash": "040c9a8e9a6c5288388b87c2db07028aa89f53a3"
}
/** @hidden */
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import { CompilerOutput } from '@lwc/compiler/dist/types/compiler/compiler';
import { BundleFiles, DynamicComponentConfig, NormalizedOutputConfig, StylesheetConfig, TransformOptions } from '@lwc/compiler/dist/types/options';
import { CompilerDiagnostic } from '@lwc/errors';
import { ModuleFormat, Plugin } from 'rollup';
export interface InlineConfig {
    descriptor: string;
    exclude?: string[];
}
interface AmdFormatConfig {
    define: string;
}
export interface FormatConfig {
    amd: AmdFormatConfig;
}
export declare type CompilerPlugin = Plugin;
export declare type LwcPluginOptions = {
    rootDir?: string;
    modules?: string[];
    exclude?: any[];
    stylesheetConfig?: StylesheetConfig;
    experimentalDynamicComponent?: DynamicComponentConfig;
};
/**
 * @noInheritDoc
 */
export interface RuntimeCompilerOptions extends Partial<TransformOptions> {
    files?: BundleFiles;
    input?: string;
    format?: ModuleFormat;
    formatConfig?: FormatConfig;
    plugins?: CompilerPlugin[];
    external?: Function | string[];
    inlineConfig?: (string | InlineConfig)[];
    lwcOptions?: LwcPluginOptions;
}
/**
 * @noInheritDoc
 */
export interface NormalizedRuntimeCompilerOptions extends Required<RuntimeCompilerOptions> {
    outputConfig: NormalizedOutputConfig;
}
export interface RuntimeCompilerDiagnostic extends CompilerDiagnostic {
    originalError: Error;
}
export interface DynamicImport {
    specifier: string;
    pivots?: string[];
}
export interface RuntimeCompilerMetadata {
    dependencies: string[];
    dynamicImports: DynamicImport[];
}
/**
 * @noInheritDoc
 */
export interface RuntimeCompilerOutput extends CompilerOutput {
    metadata?: RuntimeCompilerMetadata;
}
export {};
//# sourceMappingURL=interfaces.d.ts.map
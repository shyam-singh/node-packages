"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @hidden */
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const memoizee_1 = __importDefault(require("memoizee"));
const loading_cache_1 = __importDefault(require("../../utils/loading-cache"));
const pluginCache = new loading_cache_1.default(() => new loading_cache_1.default());
/**
 * Plugin wrapper that memoizes the resolveId, load, and transform
 * functions of the delegate, and invoke the options function only once.
 */
class MemoizedPlugin {
    constructor(delegate) {
        this.setup = false;
        this.delegate = delegate;
        this.name = `${delegate.name}-memoized`;
        this.resolveId = memoizee_1.default(delegate.resolveId.bind(delegate));
        this.load = memoizee_1.default(delegate.load.bind(delegate));
        this.transform = memoizee_1.default(delegate.transform.bind(delegate));
        // Note: options is called via .call from rollup, with its own
        // 'this' context
        this.options = this._options.bind(this);
    }
    _options(rollupOptions) {
        if (!this.setup) {
            this.setup = true;
            this.delegate.options(rollupOptions);
        }
    }
}
function memoizePlugin(plugin, options, versionKey = '') {
    const key = `${versionKey}:${JSON.stringify(options)}`;
    return pluginCache.get(plugin).get(key, () => {
        return new MemoizedPlugin(plugin(options));
    });
}
exports.default = memoizePlugin;
//# sourceMappingURL=rollup-plugin-memoize.js.map
{
  "manifest": {
    "name": "@webruntime/compiler",
    "license": "MIT",
    "version": "0.30.12",
    "main": "dist/commonjs/index.js",
    "types": "dist/commonjs/index.d.ts",
    "files": [
      "dist",
      "!**/__tests__",
      "!**/__mocks__"
    ],
    "scripts": {
      "clean": "rm -rf dist tsconfig.tsbuildinfo",
      "doc": "typedoc",
      "test": "yarn test:unit && yarn test:integration",
      "test:unit": "jest --config jest-unit.config.js",
      "test:integration": "jest --config jest-integration.config.js",
      "test:debug": "node --inspect-brk ./node_modules/.bin/jest --runInBand",
      "build": "tsc -b && node scripts/update-compiler-version.js"
    },
    "dependencies": {
      "@babel/core": "^7.5.5",
      "@lwc/compiler": "1.2.2",
      "@lwc/rollup-plugin": "1.2.2",
      "@webruntime/performance": "0.30.12",
      "babel-eslint": "^10.0.1",
      "body-parser": "^1.19.0",
      "chokidar": "^3.3.0",
      "colors": "^1.4.0",
      "eslint": "^6.8.0",
      "memoizee": "^0.4.14",
      "path-to-regexp": "^6.0.0",
      "rollup": "^1.7.4",
      "rollup-plugin-commonjs": "^9.1.3",
      "rollup-plugin-compat": "^0.22.0",
      "rollup-plugin-node-resolve": "^4.2.3",
      "rollup-plugin-replace": "^2.2.0",
      "rollup-pluginutils": "^2.3.3",
      "terser": "^3.16.1"
    },
    "devDependencies": {
      "@babel/plugin-proposal-class-properties": "^7.5.5",
      "@babel/plugin-proposal-export-default-from": "^7.5.2",
      "@babel/plugin-proposal-object-rest-spread": "^7.5.5",
      "@babel/plugin-transform-modules-commonjs": "^7.5.5",
      "@babel/plugin-transform-regenerator": "^7.4.5",
      "@babel/plugin-transform-typescript": "^7.6.3",
      "@babel/preset-env": "^7.5.5",
      "@babel/preset-typescript": "^7.3.3",
      "@lwc/engine": "1.2.2",
      "@lwc/errors": "1.2.2",
      "@types/eslint": "^6.8.0",
      "@types/jest": "^24.0.19",
      "babel-jest": "^24.1.0",
      "cross-env": "^5.2.0",
      "glob": "^7.1.5",
      "glob-to-regexp": "^0.4.1",
      "jest": "^24.8.0",
      "jsdom": "^15.1.1",
      "npm-run-all": "^4.1.5",
      "prettier": "^1.18.2",
      "require-from-string": "^2.0.2",
      "rollup-plugin-typescript": "^1.0.1",
      "tmp": "^0.1.0",
      "ts-jest": "^24.0.2",
      "tslib": "^1.10.0",
      "typedoc": "^0.15.0",
      "typedoc-plugin-internal-external": "^2.0.2",
      "typedoc-plugin-markdown": "^2.2.4",
      "typedoc-plugin-no-inherit": "^1.1.10",
      "typescript": "^3.7.0"
    },
    "publishConfig": {
      "access": "public",
      "registry": "https://registry.npmjs.org"
    },
    "gitHead": "f91998cb535573b8cf07f2a0ce7595c10ff466c1",
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-@webruntime-compiler-0.30.12-d6bf4cad1063b0ab47abcd1380d630944298810c-integrity\\node_modules\\@webruntime\\compiler\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Lightning Web Runtime :: Compiler\n\n## Table of contents\n\n-   [Introduction](#introduction)\n-   [Background](#background)\n    -   [Definitions](#definitions)\n    -   [Rollup plugins](#rollup-plugins)\n-   [APIs](#apis)\n    -   [`compile()`](#compile)\n        -   [Compiler input](#compiler-input)\n        -   [Compiler output](#compiler-output)\n-   [Examples](#examples)\n    -   [Simple application](#simple-application)\n    -   [LWC](#lwc)\n    -   [JavaScript library](#javascript-library)\n    -   [Full Compiler config object](#full-compiler-config-object)\n-   [Container config mappings](#container-config-mappings)\n\n## Introduction\n\nThe Lightning Web Runtime Compiler is a pluggable [Rollup](https://rollupjs.org/guide)-based bundler for off-core [LWC](https://developer.salesforce.com/docs/component-library/documentation/lwc)-based applications.\n\nThe Web Runtime Compiler extends the LWC/Rollup bundling functionality with the ability to inject [container services](https://salesforce.quip.com/d9ojAnuvm6fm), which can then participate in the compilation lifecycle phase.\n\n## Background\n\n### Definitions\n\n**Lightning Web Runtime**: A LWC application runtime.\n\n**container**: Initializes and builds the set of container services which make up an application.\n\n**container service**: A service plugin, which can be (1) addressed and (2) hook into various container lifecycle phases.\n\n**specifier**: A string import value (eg: `import('app/home')`, `import('lodash')`).\n\n**[pivot](https://salesforce.quip.com/bqE4AR4iyZLu)**: A way to specify when a particular component/module may be loaded relative to some context (eg: 'mobile' vs 'desktop', locale, etc).\n\n### Rollup plugins\n\nAlong with custom plugins, these Rollup plugins are automatically included and used by the Compiler:\n\n-   [@lwc/rollup-plugin](https://www.npmjs.com/package/@lwc/rollup-plugin)\n-   [rollup-plugin-node-resolve](https://github.com/rollup/rollup-plugin-node-resolve)\n-   [rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-commonjs)\n-   If `compat` mode is on: [rollup-plugin-compat](https://www.npmjs.com/package/rollup-plugin-compat)\n-   If `minify` mode is on: [terser](https://www.npmjs.com/package/terser) is used\n\n## APIs\n\n### `compile()`\n\nThe Web Runtime Compiler exposes one main function:\n\n```javascript\nasync function compile(input):Promise<output>\n```\n\nIt takes in a configuration object, and returns a `Promise` to its output.\n\n#### Compiler input\n\n-   [LWC compiler options](https://github.com/salesforce/lwc/tree/master/packages/%40lwc/compiler#compile):\n\n    -   `name` (string, required): component name.\n    -   `namespace` (string, required): component namespace.\n    -   `files` ({ string: string, ...}, required): key/value pairs where each key is a file path and its value is a string containing the file contents.\n    -   `baseDir` (string, optional, default = `\"\"`): a directory prefix which contains contains the components being compiled.\n    -   `lwcOptions` (object, optional): pass in a customized [LWC Rollup plugin](https://www.npmjs.com/package/@lwc/rollup-plugin) config object, which gets merged with a default object. The following options are available (all are optional): `rootDir`, `modules`, `exclude`, `stylesheetConfig`, and `experimentalDynamicComponent`.\n    -   `outputConfig` (object[], optional):\n        -   `compat` (boolean, optional, default = `false`): `true` indicates browser compatibility mode.\n        -   `minify` (boolean, optional, default = `false`): `true` if the bundle should be minified.\n        -   `sourcemap` (boolean, optional, default = `false`): `true` if a source map should be generated.\n        -   `env` (object, optional, default = `{ NODE_ENV: 'development' }`):\n            -   `NODE_ENV` (string, required) = node environment string (eg: 'production', 'development', etc).\n\n-   [Rollup](https://rollupjs.org/guide/en/#rolluprollup) options:\n\n    -   `input` (string, optional, default = `${namespace}/${name}`): the input path for the bundle, similar to Rollup's `input`.\n    -   `external` (string[], optional, default =`['lwc']`): list of dependencies that should not be included in the bundled output, similar to Rollup's `external`.\n    -   `format` (string, optional, default = 'amd'): type of output ('amd', 'cjs', 'esm', 'iife', 'umd') similar to Rollup's `output.format`.\n    -   `formatConfig` (object, optional, default = `{ id: namespace + '/' + name, define: undefined }`):\n        -   `amd` (object):\n            -   `define` (string): function to use in place of `define`, similar to Rollup's `output.amd.define`\n\n-   Web Runtime options:\n    -   `plugins` ([Plugin](https://rollupjs.org/guide/en/#plugins-overview)[], optional, default = `[]`): array of Rollup plugins to use.\n    -   `inlineConfig` (object[], optional, default = `[]`): describes the exclusion patterns for each module descriptor; array of objects with the following properites:\n        -   `descriptor` (string | [glob](<https://en.wikipedia.org/wiki/Glob_(programming)>), required): specifier which should have all dependencies inlined, EXCEPT for those in the `exclude` array.\n        -   `exclude` (string[] | RegExp | glob, optional, default = `[]`): array of specifiers which should be excluded from being inlined.\n\n#### Compiler output\n\nThe Compiler's output uses the same format as the [LWC compiler](https://github.com/salesforce/lwc/tree/master/packages/%40lwc/compiler#compile).\n\n-   output (object):\n    -   `success` (boolean): `true` if the Compiler encountered no fatal errors.\n    -   `diagnostics` ([CompilerDiagnostic](https://github.com/salesforce/lwc/blob/044077f385e76b1661c76c4764611294251beb45/packages/%40lwc/errors/src/compiler/utils.ts#L14)[]): array of error and warning information.\n    -   `result`:\n        -   `code` (string): the resulting bundled code.\n        -   `map` (\\* | null): the generated source map, if requested.\n        -   `outputConfig` (object | `undefined`): same object passed in as `[Compiler input](#compiler-input).outputConfig`.\n    -   `version` (string): the version of the Compiler which bundled this code.\n\n## Examples\n\n### Simple application\n\nCreating a bundle for an LWC application. Components are stored in _./src_.\n\n```javascript\nimport { compile } from '@webruntime/compiler';\nimport * as path from 'path';\n\nconst options = {\n    name: 'main',\n    namespace: 'any',\n    external: ['lwc'],\n    baseDir: path.join(__dirname, 'src'),\n    files: {\n        'any/main': `\n            import { createElement } from 'lwc';\n            import App from 'x/app';\n            const element = createElement('x-app', { is: App });\n            document.body.appendChild(element);\n        `,\n    },\n};\n\nconst { success, diagnostics } = await compile(options);\n\nif (!success) {\n    for (let diagnostic of diagnostics) {\n        console.error(`${diagnostic.level}: ${diagnostic.message}`);\n    }\n}\n```\n\n### LWC\n\nCreating a bundle for a LWC stored in the `files` object:\n\n```javascript\nimport { compile } from '@webruntime/compiler';\n\nconst options = {\n    name: 'lwc',\n    namespace: 'my',\n    external: ['lwc'],\n    files: {\n        'my/lwc.js': `\n            import { LightningElement } from 'lwc';\n            export default class Lwc extends LightningElement {}\n        `,\n        'my/lwc.html': '<template>lwc</template>',\n        'my/lwc.css': ':host { font-size: 16px; }',\n    },\n};\n\nconst { success, code } = await compile(options);\n\nconsole.log('The bundle is: ', success ? code : 'a failure');\n\n// Output:\n// The bundle is: define('my/lwc', ['lwc'], function (lwc) { ... });\n```\n\n### JavaScript library\n\nCreate a non-LWC bundle. The JavaScript entry point must live in the `files` object:\n\n```javascript\nimport { compile } from '@webruntime/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst filePath = path.join(__dirname, 'src', 'x', 'file.js');\nconst fileContents = fs.readFileSync(filePath).toString();\nexport const options = {\n    name: 'file',\n    namespace: '',\n    files: {\n        'file.js': fileContents,\n    },\n};\n\nconst { code = '' } = await compile(options);\nexport default code;\n```\n\n### Full Compiler config object\n\n```\n{\n    // LWC\n    name: 'cmp',\n    input: 'x',\n    files: {\n        'logger.js': 'export const logger = console.log;'\n    },\n    baseDir: path.join(__dirname, 'apps'),\n    lwcOptions: {\n        stylesheetConfig: {\n            customProperties: {\n                resolution: {\n                    type: 'module',\n                    name: '@salesforce/cssvars/customProperties',\n                },\n            },\n        },\n        experimentalDynamicComponent: {\n            loader: '',\n            strictSpecifier: true,\n        },\n    },\n    outputConfig: {\n        compat: true,\n        minify: true,\n        sourcemap: true,\n        env: { NODE_ENV: 'production' }\n    },\n\n    // Rollup\n    external: [\n        'lwc',\n        'force/lds',\n        'wire-service'\n    ],\n    format: 'amd',\n    formatConfig: {\n        amd: { define: 'loader.addModule' }\n    },\n\n    // Web Runtime\n    plugins: [\n        {\n            plugin: 'src/rollup/global-rollup.js',\n            config: {\n                globals: {\n                    'lodash': '_',\n                },\n            },\n        },\n    ],\n    inlineConfig: [\n       { descriptor: 'view/*', exclude: ['view/faq', 'wire-service'] },\n       { descriptor: 'x/foo', exclude: ['@salesforce/**'] }\n    ],\n}\n```\n\n## Container config mappings\n\nCompiler configuration options are gathered from different areas, including:\n\n-   the calling service, possibly via a Rollup plugin (`service`)\n-   the Container config object (`containerConfig`)\n\n```\nname: service\nnamespace: service\nfiles: service\nbaseDir: containerConfig.moduleDir\nstylesheetConfig: service or containerConfig.compilerConfig.lwcOptions\nexperimentalDynamicComponent: service or containerConfig.compilerConfig.lwcOptions\noutputConfig: containerConfig.compilerConfig.outputConfig[mode]\nexternal: containerConfig.externals, containerConfig.preloadModules, compilerConfig.external and exclusionsFrom(config.bundle)\nformat: service or container defaults\nformatConfig: containerConfig.compilerConfig.formatConfig\nplugins: service or container defaults\ninlineConfig: containerConfig.bundle\n```\n",
    "description": "## Table of contents",
    "licenseText": "MIT LICENSE\n\nCopyright (c) 2019, Salesforce.com, Inc.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@webruntime/compiler/-/compiler-0.30.12.tgz#d6bf4cad1063b0ab47abcd1380d630944298810c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@webruntime/compiler/-/compiler-0.30.12.tgz",
    "hash": "d6bf4cad1063b0ab47abcd1380d630944298810c",
    "integrity": "sha512-2pzJcf4BM8HUN3jc4dxeE0nQWR9G9ibliR2zfS9AdcjFoY6oOouzwvIDKeKgIaFJsyjr7JBeL62xgU3xjYogvA==",
    "registry": "npm",
    "packageName": "@webruntime/compiler",
    "cacheIntegrity": "sha512-2pzJcf4BM8HUN3jc4dxeE0nQWR9G9ibliR2zfS9AdcjFoY6oOouzwvIDKeKgIaFJsyjr7JBeL62xgU3xjYogvA== sha1-1r9MrRBjsKtHq80TgNYwlEKYgQw="
  },
  "registry": "npm",
  "hash": "d6bf4cad1063b0ab47abcd1380d630944298810c"
}
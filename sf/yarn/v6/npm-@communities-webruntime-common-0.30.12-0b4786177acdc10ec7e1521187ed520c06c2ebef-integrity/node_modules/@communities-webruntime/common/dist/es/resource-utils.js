/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import { isValidMode } from './output-configs';
/**
 * Webruntime prefix constant
 * use a constant prefix for URL, we can make it configurable if needed
 */
const WEBRUNTIME_PREFIX = 'webruntime';
/**
 * JS extension constant
 * use a constant extension as we only have JavaScript resources
 */
const JS_EXTENSION = 'js';
/**
 * the default UID used in URLs
 */
const DEFAULT_UID = 'latest';
/**
 * Available resource types
 */
export const RESOURCE_TYPES = {
    FRAMEWORK: 'framework',
    DESIGN: 'design',
    COMPONENT: 'component',
    VIEW: 'view',
    DESIGNCOMPONENT: 'designcomponent',
};
function assert(assertion, message) {
    if (!assertion) {
        throw new Error(message);
    }
}
/**
 * A resource descriptor
 *
 * @typedef {Object} ResourceDescriptor
 * @property {string} type The resource type
 * @property {string} name The resource name, unique for a given type
 * @property {string} [locale] The resource locale, if applicable
 */
/**
 * Parse a resource descriptor string representation.
 *
 * @param {string} resourceDescriptor The resource descriptor string representation to parse
 * @returns {ResourceDescriptor} the parsed resource descriptor
 */
export function parseResourceDescriptor(resourceDescriptor) {
    const [type, nameAndLocale = ''] = resourceDescriptor.split('://');
    const [name, locale] = nameAndLocale.split('@');
    return { type, name, locale };
}
/**
 * A parsed resource URL
 *
 * @typedef {Object} ParsedUrl
 * @property {string} type The resource type
 * @property {string} name The resource name, unique for a given type
 * @property {string} [locale] The resource locale, if applicable
 * @property {string} mode The compile mode
 * @property {string} [uid] The resource UID, or DEFAULT_UID
 */
/**
 * Get the URL of a given resource, compile mode and UID.
 *
 * The format is the following:
 *
 *    /webruntime/:type[/:uid]/:mode[/:locale]/:name[.js]
 *
 * @param {string|ResourceDescriptor} resource Either a resource descriptor as a string, or an object containing the resource type, name and locale
 * @param {string} resource.type The resource type
 * @param {string} resource.name The resource name
 * @param {string} [resource.locale] The resource locale
 * @param {string} mode The resource compile mode
 * @param {string} [uid] The resource UID. If not specified, default UID will be used.
 * @param {boolean} [appendExt] Append .js on the resource URL. Defaults to true
 * @returns {string} the resource URL
 */
export function getResourceUrl(resource = { type: '', name: '' }, mode, uid, appendExt = true) {
    const { name } = typeof resource === 'string' ? parseResourceDescriptor(resource) : resource;
    assert(name, 'Name not specified');
    const urlPrefix = getResourceUrlPrefix(resource, mode, uid);
    const extension = appendExt ? `.${JS_EXTENSION}` : '';
    return `${urlPrefix}${name}${extension}`;
}
/**
 * Get the URL prefix of a given resource, compile mode and UID.
 *
 * The format is the following:
 *
 *    /webruntime/:type[/:uid]/:mode[/:locale]/
 *
 * @param {string|ResourceDescriptor} resource Either a resource descriptor as a string, or an object containing the resource type, name and locale
 * @param {string} resource.type The resource type
 * @param {string} [resource.locale] The resource locale
 * @param {string} mode The resource compile mode
 * @param {string} [uid] The resource UID. If not specified, default UID will be used.
 * @returns {string} the resource URL
 */
function getResourceUrlPrefix(resource = { type: '', name: '' }, mode, uid) {
    const { type, locale } = typeof resource === 'string' ? parseResourceDescriptor(resource) : resource;
    const isComponent = type === RESOURCE_TYPES.COMPONENT;
    assert(type, 'Type not specified');
    assert(mode, 'Mode not specified');
    assert(isValidMode(mode), `Invalid mode: ${mode}`);
    assert(locale || !isComponent, 'Component locale not specified');
    return `/${WEBRUNTIME_PREFIX}/${type}/${uid || DEFAULT_UID}/${mode}${locale ? `/${locale}` : ``}/`;
}
//# sourceMappingURL=resource-utils.js.map
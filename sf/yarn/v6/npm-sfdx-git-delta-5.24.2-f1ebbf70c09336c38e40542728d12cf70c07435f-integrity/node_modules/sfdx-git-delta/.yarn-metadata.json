{
  "manifest": {
    "name": "sfdx-git-delta",
    "version": "5.24.2",
    "description": "Generate the sfdx content in source format and destructive change from two git commits",
    "keyword": [
      "salesforce",
      "package",
      "git",
      "sfdx",
      "sfdx-plugin"
    ],
    "engines": {
      "node": ">=16.20.0"
    },
    "files": [
      "/bin",
      "/lib",
      "/messages",
      "/oclif.manifest.json"
    ],
    "main": "lib/main.js",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/scolladon/sfdx-git-delta.git"
    },
    "author": {
      "name": "Sebastien Colladon",
      "email": "colladonsebastien@gmail.com"
    },
    "dependencies": {
      "@salesforce/command": "^5.3.9",
      "fast-xml-parser": "^4.2.7",
      "fs-extra": "^11.1.1",
      "ignore": "^5.2.4",
      "lodash": "^4.17.21",
      "micromatch": "^4.0.5",
      "xmlbuilder2": "^3.1.1"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/scolladon/sfdx-git-delta/issues"
    },
    "homepage": "https://github.com/scolladon/sfdx-git-delta#readme",
    "scripts": {
      "analysis": "codeclimate analyze",
      "clean": "shx rm -rf lib 'reports/*' .nyc_output oclif.manifest.json package.tgz 'sfdx-git-delta-v*.tgz' 'stderr*.txt' 'stdout*.txt' '.stryker-tmp/*' perf-result.txt",
      "increment:apiversion": "bash ./tooling/incrementApiVersion.sh",
      "lint": "eslint src/",
      "lint:dependencies": "depcheck",
      "lint:fix": "eslint --fix src/",
      "test": "yarn test:unit && yarn test:nut",
      "test:build:local": "yarn clean ; shx rm -rf .yarn/cache node_modules ; yarn && yarn pack && yarn test",
      "test:mutation": "stryker run",
      "test:nut": "nyc mocha **/*.nut.ts",
      "test:perf": "node __tests__/perf/bench.js | tee perf-result.txt",
      "test:unit": "jest",
      "test:unit:clear:cache": "jest --clearCache",
      "test:unit:coverage": "jest --coverage",
      "test:unit:debug": "node --inspect node_modules/.bin/jest",
      "test:unit:debug:break": "node --inspect-brk node_modules/.bin/jest",
      "test:unit:watch": "jest --watch",
      "build": "tsc -b",
      "postpack": "shx rm -f oclif.manifest.json && prettier --write README.md",
      "prebuild": "yarn clean",
      "prepack": "yarn build && oclif-dev manifest && oclif-dev readme",
      "prepare": "husky install",
      "upgrade:dependencies": "shx rm -rf yarn.lock ; shx touch yarn.lock ; yarn-upgrade-all ; yarn-audit-fix"
    },
    "devDependencies": {
      "@commitlint/cli": "^17.6.7",
      "@commitlint/config-conventional": "^17.6.7",
      "@oclif/dev-cli": "^1.26.10",
      "@salesforce/cli-plugins-testkit": "^4.2.8",
      "@salesforce/dev-config": "^4.0.1",
      "@salesforce/ts-sinon": "^1.4.13",
      "@stryker-mutator/core": "^7.1.1",
      "@stryker-mutator/jest-runner": "^7.1.1",
      "@swc/core": "^1.3.74",
      "@types/mocha": "^10.0.1",
      "@types/node": "^20.4.8",
      "@typescript-eslint/parser": "^6.2.1",
      "benchmark": "^2.1.4",
      "chai": "^4.3.7",
      "depcheck": "^1.4.3",
      "eslint": "^8.46.0",
      "eslint-config-prettier": "^9.0.0",
      "eslint-plugin-prettier": "^5.0.0",
      "husky": "^8.0.3",
      "jest": "^29.6.2",
      "lint-staged": "^13.2.3",
      "mocha": "^10.2.0",
      "nyc": "^15.1.0",
      "prettier": "^3.0.1",
      "shx": "^0.3.4",
      "sinon": "^15.2.0",
      "ts-node": "^10.9.1",
      "typescript": "^5.1.6",
      "yarn-audit-fix": "^10.0.0",
      "yarn-upgrade-all": "^0.7.2"
    },
    "oclif": {
      "commands": "./lib/commands",
      "bin": "sfdx",
      "devPlugins": [
        "@oclif/plugin-help"
      ]
    },
    "publishConfig": {
      "access": "public"
    },
    "packageManager": "yarn@3.6.0",
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-sfdx-git-delta-5.24.2-f1ebbf70c09336c38e40542728d12cf70c07435f-integrity\\node_modules\\sfdx-git-delta\\package.json",
    "readmeFilename": "README.md",
    "readme": "<!-- markdownlint-disable MD040 MD041 -->\n![Actions Status](https://github.com/scolladon/sfdx-git-delta/workflows/Main/badge.svg)\n[![npm](https://badgen.net/npm/v/sfdx-git-delta)](https://badgen.net/npm/v/sfdx-git-delta)\n[![Maintainability](https://api.codeclimate.com/v1/badges/95619399c7bb2cf60da4/maintainability)](https://codeclimate.com/github/scolladon/sfdx-git-delta/maintainability)\n[![Code Coverage](https://codecov.io/gh/scolladon/sfdx-git-delta/branch/main/graph/badge.svg?token=92T8XKKBHN)](https://codecov.io/gh/scolladon/sfdx-git-delta)\n[![Known Vulnerabilities](https://snyk.io//test/github/scolladon/sfdx-git-delta/badge.svg?targetFile=package.json)](https://snyk.io//test/github/scolladon/sfdx-git-delta?targetFile=package.json)\n[![downloads](https://badgen.net/npm/dw/sfdx-git-delta)](https://badgen.net/npm/dw/sfdx-git-delta)\n[![Join the chat at https://gitter.im/sfdx-git-delta/community](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sfdx-git-delta/community)\n\n<br />\n<div align=\"center\">  \n  <img src=\"img/SGD_logo.png\" width=\"128\">\n  <h1 align=\"center\">SFDX-Git-Delta </h1>\n\n  <p align=\"center\">\n    SFDX plugin to generate Incremental Salesforce deployments manifests and artifacts\n    <br />\n    <a href=\"https://github.com/scolladon/sfdx-git-delta/issues/new?assignees=scolladon&labels=bug&template=issue.md\">Report Bug</a>\n    ¬∑\n    <a href=\"https://github.com/scolladon/sfdx-git-delta/issues/new?assignees=scolladon&labels=enhancement&template=enhancement.md\">Request Feature</a>\n  </p>\n</div>\n\n<!-- TABLE OF CONTENTS -->\n<details>\n  <summary>Table of Contents</summary>\n\n- [TL;DR](#tldr)\n- [What is SFDX-Git-Delta?](#what-is-sfdx-git-delta)\n- [Is SGD for you?](#is-sgd-for-you)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n- [How to use it?](#how-to-use-it)\n- [`sfdx sgd:source:delta -f <string> [-t <string>] [-r <filepath>] [-i <filepath>] [-D <filepath>] [-s <filepath>] [-W] [-o <filepath>] [-a <number>] [-d] [-n <filepath>] [-N <filepath>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]`](#sfdx-sgdsourcedelta--f-string--t-string--r-filepath--i-filepath--d-filepath--s-filepath--w--o-filepath--a-number--d--n-filepath--n-filepath---json---loglevel-tracedebuginfowarnerrorfataltracedebuginfowarnerrorfatal)\n  - [Windows users](#windows-users)\n  - [CI/CD specificity](#cicd-specificity)\n  - [Use cases](#use-cases)\n- [Walkthrough](#walkthrough)\n  - [Execute sgd](#execute-sgd)\n  - [Deploy the delta metadata](#deploy-the-delta-metadata)\n- [Advanced use-cases](#advanced-use-cases)\n  - [Generate a folder containing only the added/modified sources](#generate-a-folder-containing-only-the-addedmodified-sources)\n  - [Exclude some metadata only from destructiveChanges.xml](#exclude-some-metadata-only-from-destructivechangesxml)\n  - [Explicitly including specific files for inclusion or destruction regardless of diff](#explicitly-including-specific-files-for-inclusion-or-destruction-regardless-of-diff)\n  - [Scoping delta generation to a specific folder](#scoping-delta-generation-to-a-specific-folder)\n  - [Generate a comma-separated list of the added and modified Apex classes](#generate-a-comma-separated-list-of-the-added-and-modified-apex-classes)\n  - [Condition deployment on package.xml and destructiveChange content](#condition-deployment-on-packagexml-and-destructivechange-content)\n  - [Use the module in your own node application](#use-the-module-in-your-own-node-application)\n- [Changelog](#changelog)\n- [Built With](#built-with)\n- [Versioning](#versioning)\n- [Authors](#authors)\n- [Contributing](#contributing)\n- [License](#license)\n</details>\n\n## TL;DR\n\n```sh\nsfdx plugins:install sfdx-git-delta\n```\n\n```sh\nsfdx sgd:source:delta --to \"HEAD\" --from \"HEAD~1\" --output \".\"\n```\n\n```sh\nsfdx force:source:deploy -x package/package.xml --postdestructivechanges destructiveChanges/destructiveChanges.xml\n```\n\n## What is SFDX-Git-Delta?\n\n**SFDX-Git-Delta** (_a.k.a. **SGD**_) helps Salesforce Architects and Developers do 2 things with their source deployments:\n\n- **Make deployments faster**: identify the changed metadata since a reference commit.\n\n- **Automate destructive deployments**: build the destructiveChanges.xml from the deleted (or renamed) metadata\n\nHave a look at this post on the Salesforce Developers Blog to dive into it: [Optimizing Unpackaged Deployments Using a Delta Generation Tool](https://developer.salesforce.com/blogs/2021/01/optimizing-unpackaged-deployments-using-a-delta-generation-tool.html).\n\n![delta_principle](img/delta_principles.png)\n\n## Is SGD for you?\n\nIf you are not a Salesforce Architect or Developer, probably not, _sorry_.\n\nIf you are a Technical Architect or Developer, then it‚Äôs a very useful tool for you, when meeting the 3 conditions below:\n\n1. Your Salesforce project uses a git repo as the source of truth.\n2. You use the Source (DX) format in the repo.\n3. Your metadata is unmanaged (in other words, you are not building a managed or unlocked package).\n\nSGD is designed to be part of a CI/CD pipeline (Jenkins, Bitbucket Pipelines, GitLab CI, GitHub Actions, Azure DevOps...) that handles the deployment of the sources to the Salesforce org(s).\n\nPro tip: Make sure your pipeline works **before** implementing incremental deployments. Otherwise it will just make it harder to debug your pipeline.\nIt's also important to implement a way to switch back to full deployment in case the incremental deployment does not behave as expected.\n\n**DISCLAIMER:**\n\n**‚ö†Ô∏è SFDX-Git-Delta is NOT an officially supported tool ‚ö†Ô∏è**\n\nüë∑ Use it at your own risk, wear a helmet, and test it first before adding it to your pipeline üî•\n\n## Getting Started\n\n### Prerequisites\n\nThe plugin requires git command line on the running environment.\n\n**Node v16.20.0 or above is required**.\nTo check if Salesforce CLI runs under a supported node version for SGD, run `sfdx --version`. You should see a node version above v.16.20.0 to use SGD.\n\nIf you encounter this issue whereas the node version is OK on the running environment, try to [install the Salesforce CLI via npm](https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli.htm#sfdx_setup_install_cli_npm) (`npm install sfdx-cli --global`).\n\n### Installation\n\nSGD is a Salesforce CLI plugin (`sfdx sgd:source:delta`). Run the following command to install it:\n\n```sh\nsfdx plugins:install sfdx-git-delta\n```\n\nBecause this plugin is not signed, you will get a warning saying that \"This plugin is not digitally signed and its authenticity cannot be verified\". This is expected, and you will have to answer `y` (yes) to proceed with the installation.\n\nIf you run your CI/CD jobs inside a Docker image, you can add the plugin to your image (such as in [this example](https://github.com/mehdisfdc/sfdx-cli-gitlab)). If you use GitHub Actions, you can find some examples of using SGD [here](https://github.com/mehdisfdc/sfdx-GitHub-actions/tree/main/.github/workflows).\n\n‚ö†Ô∏è The Salesforce CLI plugin is now the only supported way to install SGD. There used to be another way to install it using yarn or npm. The legacy `sgd` command is now deprecated and decommissioned.\n\n## How to use it?\n\n<!-- commands -->\n* [`sfdx sgd:source:delta -f <string> [-t <string>] [-r <filepath>] [-i <filepath>] [-D <filepath>] [-s <filepath>] [-W] [-o <filepath>] [-a <number>] [-d] [-n <filepath>] [-N <filepath>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]`](#sfdx-sgdsourcedelta--f-string--t-string--r-filepath--i-filepath--d-filepath--s-filepath--w--o-filepath--a-number--d--n-filepath--n-filepath---json---loglevel-tracedebuginfowarnerrorfataltracedebuginfowarnerrorfatal)\n\n## `sfdx sgd:source:delta -f <string> [-t <string>] [-r <filepath>] [-i <filepath>] [-D <filepath>] [-s <filepath>] [-W] [-o <filepath>] [-a <number>] [-d] [-n <filepath>] [-N <filepath>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]`\n\nGenerate the sfdx content in source format and destructive change from two git commits\n\n```\nUSAGE\n  $ sfdx sgd:source:delta -f <string> [-t <string>] [-r <filepath>] [-i <filepath>] [-D <filepath>] [-s <filepath>] [-W]\n   [-o <filepath>] [-a <number>] [-d] [-n <filepath>] [-N <filepath>] [--json] [--loglevel \n  trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nOPTIONS\n  -D, --ignore-destructive=ignore-destructive                                       file listing paths to explicitly\n                                                                                    ignore for any destructive actions\n\n  -N, --include-destructive=include-destructive                                     file listing paths to explicitly\n                                                                                    include for any destructive actions\n\n  -W, --ignore-whitespace                                                           ignore git diff whitespace (space,\n                                                                                    tab, eol) changes\n\n  -a, --api-version=api-version                                                     salesforce metadata API version,\n                                                                                    default to sfdx-project.json\n                                                                                    \"sourceApiVersion\" attribute or\n                                                                                    latest version\n\n  -d, --generate-delta                                                              generate delta files in [--output]\n                                                                                    folder\n\n  -f, --from=from                                                                   (required) commit sha from where the\n                                                                                    diff is done [git rev-list\n                                                                                    --max-parents=0 HEAD]\n\n  -i, --ignore=ignore                                                               file listing paths to explicitly\n                                                                                    ignore for any diff actions\n\n  -n, --include=include                                                             file listing paths to explicitly\n                                                                                    include for any diff actions\n\n  -o, --output=output                                                               [default: ./output] source package\n                                                                                    specific output\n\n  -r, --repo=repo                                                                   [default: ./] git repository\n                                                                                    location\n\n  -s, --source=source                                                               [default: ./] source folder focus\n                                                                                    location related to --repo\n\n  -t, --to=to                                                                       [default: HEAD] commit sha to where\n                                                                                    the diff is done\n\n  --json                                                                            format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)  [default: warn] logging level for\n                                                                                    this command invocation\n```\n\n_See code: [src/commands/sgd/source/delta.ts](https://github.com/scolladon/sfdx-git-delta/blob/v5.24.2/src/commands/sgd/source/delta.ts)_\n<!-- commandsstop -->\n\n### Windows users\n\nIf you run SGD on a Windows system, use double quotes [to prevent the terminal to interpret parameters](https://github.com/scolladon/sfdx-git-delta/issues/134)\n\nYou should also avoid using the \"^\" character ([shorthand for parent commit in git](https://git-scm.com/docs/git-rev-parse#Documentation/git-rev-parse.txt-emltrevgtltngtemegemHEADv1510em)) because it is the [escape character in Windows](https://ss64.com/nt/syntax-esc.html#:~:text=include%20the%20delimiters.-,Escape%20Character,-%5E%20%20Escape%20character.).\nSo instead of:\n```sh\nsfdx sgd:source:delta --from \"HEAD^\" # wrong git shortcut with windows because it uses \"^\" syntax\n````\nYou should write:\n```sh\nsfdx sgd:source:delta --from \"HEAD~1\" # right git shortcut with windows because it does not use \"^\", it uses \"~n\" syntax\n```\n\n\n\n### CI/CD specificity\n\nIn CI/CD pipelines, for most of the CI/CD providers, the checkout operation fetch only the last commit of the branch currently evaluated.\nYou need to fetch all the needed commits, as the plugin needs to have the branch to compare from as well,\nExample for Github action checkout [here](https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches).\n\nIn CI/CD pipelines, branches are not checked out locally when the repository is cloned, so you must specify the remote prefix.\nIf you do not specify the remote in CI context, the git pointer check will raise an error (as the branch is not created locally).\nThis applies to both `--from` and `--to` parameters as they both accept git pointers.\n\nExample comparing `HEAD` with a `development` branch when the CI clone the repository with `origin` set as reference to the remote:\n\n```sh\nsfdx sgd:source:delta --to \"HEAD\" --from \"origin/development\" --output .\n```\n\nUse global variable when you need to easily switch sgd version (`vX.X.X` format) or channel (`stable`, `latest`, `latest-rc`) in your pipeline, without having to commit a new version of your pipeline.\n\nExample with [github action](https://docs.github.com/en/actions/learn-github-actions/variables#using-the-vars-context-to-access-configuration-variable-values), [create a variable](https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository) SGD_VERSION and use it in the plugin installation phase\n\n```yaml\n- name: Install SGD\n  run: echo y | sfdx plugins:install \"sfdx-git-delta@${{ vars.SGD_VERSION }}\"\n```\n\n### Use cases\n\nAny git sha pointer is supported: commit sha, branch, tag, git expression (HEAD, etc.).\n\nHere are examples of how to compare the content of different branches:\n\n- **Comparing between commits in different branches**\n  For example, if you have commit `fbc3ade6` in branch `develop` and commit `61f235b1` in branch `main`:\n\n```sh\nsfdx sgd:source:delta --to fbc3ade6 --from 61f235b1 --output .\n```\n\n- **Comparing branches (all changes)**\n  Comparing all changes between the `develop` branch and the `main` branch:\n\n```sh\nsfdx sgd:source:delta --to develop --from main --output .\n```\n\n- **Comparing branches (from a common ancestor)**\n  To compare the `develop` branch since its common ancestor with the `main` branch (i.e. ignoring the changes performed in the `main` branch after `develop` creation):\n\n```sh\nsfdx sgd:source:delta --to develop --from $(git merge-base develop main) --output .\n```\n\n## Walkthrough\n\nLet‚Äôs take a look at the following scenario:\n\n> **_The CI pipelines deploys the sources to Production anytime there is a new commit in the main branch._**\n\nIn our example, the latest commit to main is composed of:\n\n- _Apex Class added:_ TriggerHandler\n- _Apex Class added:_ TriggerHandler_Test\n- _Apex Class modified:_ TestDataFactory\n- _Apex Class deleted:_ AnotherTriggerFramework\n\n![commit](img/example_commit.png)\n\nIn this situation, we would expect the CI pipeline to:\n\n1. **Deploy to Production only 3 classes** (no matter how much metadata is present in the force-app folder): `TriggerHandler`, `TriggerHandler_Test`, and `TestDataFactory`\n2. **Delete from Production 1 class**: `AnotherTriggerFramework`\n\nSo let‚Äôs do it!\n\n### Execute sgd\n\nFrom the project repo folder, the CI pipeline will run the following command:\n\n```sh\nsfdx sgd:source:delta --to \"HEAD\" --from \"HEAD~1\" --output .\n```\n\nwhich means:\n\n> Analyze the difference between HEAD (latest commit) and HEAD~1 (previous commit), and output the result in the current folder.\n\nThe `sfdx sgd:source:delta` command produces 2 useful artifacts:\n\n**1) A `package.xml` file, inside a `package` folder.** This `package.xml` file contains just the added/changed metadata to deploy to the target org.\n\n_Content of the `package.xml` file in our scenario:_\n![package](img/example_package.png)\n\n**2) A `destructiveChanges.xml` file, inside a `destructiveChanges` folder.** This `destructiveChanges.xml` file contains just the removed/renamed metadata to delete from the target org. Note: the `destructiveChanges` folder also contains a minimal package.xml file, because deploying destructive changes requires a package.xml (even an empty one).\n\n_Content of the `destructiveChanges.xml` file in our scenario:_\n![destructiveChange](img/example_destructiveChange.png)\n\nNote: it is also possible to generate a **source** folder containing added/changed metadata with the [`--generate-delta (-d)`](#scoping-delta-generation-to-a-specific-folder) parameter. See the \"Advanced use-cases\" section for more examples.\n\n### Deploy the delta metadata\n\nThe simplest option to deploy the incremental changes is to use `force:source:deploy` command with `-x` parameter:\n\n```sh\nsfdx force:source:deploy -x package/package.xml --postdestructivechanges destructiveChanges/destructiveChanges.xml\n```\n\nAnd voil√†! ü•≥\n\nHowever, keep in mind that the above command will fail if the destructive change was supposed to be executed before the deployment (i.e. as `--predestructivechanges`), or if a warning occurs during deployment. Make sure to protect your CI/CD pipeline from those scenarios, so that it doesn't get stuck by a failed destructive change.\n\nIf needed, you can also split the added/modified metadata deployment from the deleted/renamed metadata deployment, as in the below examples:\n\nUse the `package/package.xml` file to deploy only the added/modified metadata:\n\n```sh\necho \"--- package.xml generated with added and modified metadata ---\"\ncat package/package.xml\necho\necho \"---- Deploying added and modified metadata ----\"\nsfdx force:source:deploy -x package/package.xml\n```\n\nUse the `destructiveChanges` folder to deploy only the destructive changes:\n\n```sh\necho \"--- destructiveChanges.xml generated with deleted metadata ---\"\ncat destructiveChanges/destructiveChanges.xml\necho\necho \"--- Deleting removed metadata ---\"\nsfdx force:mdapi:deploy -d destructiveChanges --ignorewarnings\n```\n\n## Advanced use-cases\n\n### Generate a folder containing only the added/modified sources\n\nUsing a package.xml for deployment is the simplest approach to delta deployments. But in some cases you may want to have only the actual recently changed source files.\n\nOne example is to speed up object deployments: the package.xml approach will deploy the entire sub-folder for a given object. Having a copy of the actual sources added/modified allows you to deploy only those components.\n\nThis is where the `--generate-delta (-d)` option comes handy!\n\nLet's use this option with our previous example:\n\n```sh\nmkdir changed-sources\nsfdx sgd:source:delta --to \"HEAD\" --from \"HEAD~1\" --output changed-sources/ --generate-delta\n```\n\nIt generates the `package` and `destructiveChanges` folders, and copies added/changed files in the output folder.\n\n_Content of the output folder when using the --generate-delta option, with the same scenario as above:_\n\n![delta-source](img/example_generateDelta.png)\n\n> ‚ö†Ô∏è Use `--generate-delta (-d)` when `--to (-t)` value is set to \"HEAD\" or to the \"HEAD commit SHA\".\n> If you need to use it with `--to (-t)` pointing to another commit than \"HEAD\", checkout that commit first. Example:\n>\n> ```sh\n> # move HEAD to the wanted past commit\n> $ git checkout <not-HEAD-commit-sha>\n> # You can omit --to, it will take \"HEAD\" as default value\n> $ sfdx sgd:source:delta --from \"HEAD~1\" --output changed-sources/ --generate-delta\n> ```\n\nThen it is possible to deploy the `change-sources` folder using `force:source:deploy` command with `-p` parameter:\n\n```sh\nsfdx force:source:deploy -p change-sources\n```\n\n### Exclude some metadata only from destructiveChanges.xml\n\nThe `--ignore [-i]` parameter allows you to specify an [ignore file](https://git-scm.com/docs/gitignore) to filter the\nelement on the diff to ignore. SGD ignores every diff line matching the pattern from the ignore file specified in the `--ignore [-i]`. `package.xml` generation, `destructiveChanges.xml` generation and `--delta-generate` will ignore those lines.\n\nSometimes you may need to have two different ignore policies. One for the `package.xml` and another one for `destructiveChanges.xml` files. This is where the `--ignore-destructive [-D]` option comes handy!\nUse the `--ignore-destructive` parameter to specify a dedicated ignore file to handle deletions. It will apply to metadata listed in the `destructiveChanges.xml`. In other words, this will override the `--ignore [-i]` parameter for deleted items.\n\nConsider the following:\n\n- a repository containing many sub-folders (force-app/main, force-app/sample, etc)\n- a commit deleting the Custom\\_\\_c object from one folder and modifying the Custom\\_\\_c object from another folder. This is a Modification and a Deletion events.\n\nThe Custom\\_\\_c object appears in the `package.xml` and in `destructiveChanges.xml` and fail the deployment. This is a situation where your may want to use the `--ignore-destructive [-D]` parameter! Add the Custom\\_\\_c object pattern in an ignore file and pass it in the CLI parameter:\n\n```sh\n# destructiveignore\n*Custom\\_\\_c.object-meta.xml\n\n$ sfdx sgd:source:delta --from commit --ignore-destructive destructiveignore\n\n```\n\nNote: when only using the `--ignore [-i]` parameter (and not `--ignore-destructive [-D]`) the plugin will apply it to added/changed/deleted elements.\n\n### Explicitly including specific files for inclusion or destruction regardless of diff\n\nThe `--include [-n]` parameter allows you to specify a file based on [micromatch glob matching](https://github.com/micromatch/micromatch) to include specific files. Regardless whether they appears in the diff or not.\nLike the `--ignore` flag, this file defines a list of glob file matchers to always include `git` aware files in the `package.xml` package.\nSGD will include every line matching the pattern from the include file specified in the `--include [-n]`.\n\nAs with `--ignore`, you may need different policies for the `package.xml` and `destructiveChanges.xml` files. This is where the `--include-destructive [-N]` option comes handy!\n\nUse the `--include-destructive` parameter to specify a dedicated include file to handle deletions. Related metadata will appear in the `destructiveChanges.xml` output. Here, you will show which files should the `destructiveChanges.xml` should include .\nConsider the following:\n\n- a repository containing many sub-folders (force-app/main,force-app/sample, etc)\n- a CI/CD platform generating a `force-app/generated/foo` file the `source:deploy` command should not include.\n  You can create a file with a line matching this new file and specify this file using the `--include-destructive [-N]` parameter.\n\n```sh\n# .destructiveinclude\n*generated/foo\n\n$ sfdx sgd:source:delta --from commit --include-destructive .destructiveinclude\n```\n\nThe path matchers in includes file must follow [`gitignore`](https://git-scm.com/docs/gitignore#:~:text=The%20slash%20/%20is%20used%20as%20the%20directory%20separator.) spec and accept only unix path separator `/` (even for windows system).\n\n### Scoping delta generation to a specific folder\n\nThe `--source [-s]`parameter allows you to specify a folder to focus on, making any other folder ignored.\nIt means the delta generation will only focus on the dedicated folder.\n\nFor example, consider a repository containing many sub-folders (force-app/package, force-app/unpackaged, etc).\nThis repository contains packaged (deployed via package) and unpackaged (deployed via CLI) sources.\nYou only want to apply delta generation for the unpackaged sources.\n\n```sh\n$ tree\n.\n‚îú‚îÄ‚îÄ force-app\n    ‚îú‚îÄ‚îÄ packaged\n    ‚îÇ    ‚îî‚îÄ‚îÄ classes\n    ‚îÇ        ‚îî‚îÄ‚îÄ PackagedClass.cls\n    ‚îî‚îÄ‚îÄ unpackaged\n        ‚îî‚îÄ‚îÄ classes\n            ‚îî‚îÄ‚îÄ UnpackagedClass.cls\n‚îú‚îÄ‚îÄ ...\n\n# scope the delta generation only to the unpackaged folder\n$ sfdx sgd:source:delta --from commit --source force-app/unpackaged\n```\n\n> The ignored patterns specified using `--ignore [-i]` and `--ignore-destructive [-D]` still apply.\n> The `--source` path must be relative to the `--repo` path\n\n### Generate a comma-separated list of the added and modified Apex classes\n\nDepending on your testing strategy, [you may want to generate a comma-separated list of the added and modified Apex classes](https://github.com/scolladon/sfdx-git-delta/issues/126). This list can feed the `sfdx force:source:deploy --testlevel RunSpecifiedTests` command, for example.\nTo cover this need, parse the content of the package.xml file produced by SGD using [yq](https://github.com/kislyuk/yq):\n\n`xq . < package/package.xml | jq '.Package.types | [.] | flatten | map(select(.name==\"ApexClass\")) | .[] | .members | [.] | flatten | map(select(. | index(\"*\") | not)) | unique | join(\",\")'`\n\n### Condition deployment on package.xml and destructiveChange content\n\nSGD does not always generate content in the package.xml (or destructiveChanges.xml). Sometimes the commit range contains changes only within files to ignore (using .sgdignore and `--i` parameter).\n[Deploying empty package.xml can lead to deployment errors.](https://github.com/scolladon/sfdx-git-delta/issues/249)\nTo avoid starting a failing deployment, test files content before execution:\n\n```sh\n# run deploy command only if the generated package contains metadata\nif grep -q '<types>' ./package/package.xml ; then\n  echo \"---- Deploying added and modified metadata ----\"\n  sfdx force:source:deploy -x package/package.xml\nelse\n  echo \"---- No changes to deploy ----\"\nfi\n```\n\n### Use the module in your own node application\n\nIf you want to embed sgd in your node application, install it as a dependency for your application\n\n```sh\nyarn add sfdx-git-delta\n```\n\nThen use the JavaScript module\n\n```js\n// sample/app.js\nconst sgd = require('sfdx-git-delta')\n\nconst work = await sgd({\n  to: '', // commit sha to where the diff is done. [default : \"HEAD\"]\n  from: '', // (required) commit sha from where the diff is done. [default : git rev-list --max-parents=0 HEAD]\n  output: '', // source package specific output. [default : \"./output\"]\n  apiVersion: '', // salesforce API version. [default : latest]\n  repo: '', // git repository location. [default : \".\"]\n})\n\nconsole.log(JSON.stringify(work))\n/* {\n *   config: config,\n *   diffs: { package: {...}, destructiveChanges: {...} },\n *   warnings: []\n * }\n */\n```\n\n## Changelog\n\n[changelog.md](CHANGELOG.md) is available for consultation.\n\n## Built With\n\n- [fast-xml-parser](https://github.com/NaturalIntelligence/fast-xml-parser) - Validate XML, Parse XML to JS/JSON and vise versa, or parse XML to Nimn rapidly without C/C++ based libraries and no callback\n- [fs-extra](https://github.com/jprichardson/node-fs-extra) - Node.js: extra methods for the fs object like copy(), remove(), mkdirs().\n- [ignore](https://github.com/kaelzhang/node-ignore#readme) - is a manager, filter and parser which implemented in pure JavaScript according to the .gitignore spec 2.22.1.\n- [lodash](https://github.com/lodash/lodash) - A modern JavaScript utility library delivering modularity, performance & extras.\n- [micromatch](https://github.com/micromatch/micromatch) - a file glob matcher utility\n- [xmlbuilder2](https://github.com/oozcitak/xmlbuilder2) - An XML builder for node.js.\n- [MegaLinter](https://megalinter.io) - Open-Source tool for CI/CD workflows that analyzes the consistency of your code, IAC, configuration, and scripts\n\n## Versioning\n\nVersioning follows [SemVer](http://semver.org/) specification.\n\n## Authors\n\n- **Sebastien Colladon** - Developer - [scolladon](https://github.com/scolladon)\n- **Mehdi Cherfaoui** - Tester - [mehdisfdc](https://github.com/mehdisfdc)\n\n## Contributing\n\nContributions are what make the trailblazer community such an amazing place. I regard this component as a way to inspire and learn from others. Any contributions you make are **appreciated**.\n\nSee [contributing.md](CONTRIBUTING.md) for sgd contribution principles.\n\n## License\n\nThis project license is MIT - see the [LICENSE.md](LICENSE.md) file for details\n",
    "licenseText": "<!-- markdownlint-disable -->\nMIT License\n\nCopyright (c) 2019 Sebastien Colladon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sfdx-git-delta/-/sfdx-git-delta-5.24.2.tgz#f1ebbf70c09336c38e40542728d12cf70c07435f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sfdx-git-delta/-/sfdx-git-delta-5.24.2.tgz",
    "hash": "f1ebbf70c09336c38e40542728d12cf70c07435f",
    "integrity": "sha512-bhxoRdTJ/3DuUUzBdS+G9YIGGDxeKZQZDT+gst2NRzrNBElsPucsXdl64GrqH4o2WgDaHbU1tvxTJ3hRMEr65g==",
    "registry": "npm",
    "packageName": "sfdx-git-delta",
    "cacheIntegrity": "sha512-bhxoRdTJ/3DuUUzBdS+G9YIGGDxeKZQZDT+gst2NRzrNBElsPucsXdl64GrqH4o2WgDaHbU1tvxTJ3hRMEr65g== sha1-8eu/cMCTNsOOQFQnKNEs9wwHQ18="
  },
  "registry": "npm",
  "hash": "f1ebbf70c09336c38e40542728d12cf70c07435f"
}
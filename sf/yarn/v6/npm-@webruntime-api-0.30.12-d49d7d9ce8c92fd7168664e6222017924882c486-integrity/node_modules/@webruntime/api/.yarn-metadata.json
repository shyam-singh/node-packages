{
  "manifest": {
    "name": "@webruntime/api",
    "version": "0.30.12",
    "description": "Lightning Web Runtime API",
    "keywords": [],
    "license": "MIT",
    "main": "dist/commonjs/index.js",
    "files": [
      "dist/"
    ],
    "publishConfig": {
      "access": "public",
      "registry": "https://registry.npmjs.org"
    },
    "scripts": {
      "clean": "rm -rf dist tsconfig.tsbuildinfo",
      "build": "tsc -b",
      "doc": "typedoc",
      "test": "jest"
    },
    "dependencies": {
      "@lwc/compiler": "1.2.2",
      "@lwc/errors": "1.2.2",
      "@webruntime/compiler": "0.30.12",
      "deepmerge": "^3.2.0",
      "express": "^4.16.4",
      "helmet": "^3.18.0",
      "path-to-regexp": "^6.0.0",
      "rollup": "^1.7.4"
    },
    "devDependencies": {
      "@babel/core": "^7.7.4",
      "@babel/plugin-proposal-class-properties": "^7.7.4",
      "@babel/plugin-proposal-nullish-coalescing-operator": "^7.7.4",
      "@babel/plugin-proposal-optional-chaining": "^7.7.5",
      "@babel/plugin-transform-modules-commonjs": "^7.7.5",
      "@types/helmet": "^0.0.47",
      "typedoc": "^0.15.0",
      "typedoc-plugin-internal-external": "^2.0.2",
      "typedoc-plugin-markdown": "^2.2.4",
      "typedoc-plugin-no-inherit": "^1.1.10"
    },
    "gitHead": "f91998cb535573b8cf07f2a0ce7595c10ff466c1",
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-@webruntime-api-0.30.12-d49d7d9ce8c92fd7168664e6222017924882c486-integrity\\node_modules\\@webruntime\\api\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Lightning Web Runtime :: Core API\n\nThe Lightning Web Runtime server is a pluggable application server. The Core API package provides the base definitions which describe the Runtime's configuration.\n\n## Configuration\n\nApplication configuration and customization is done primarily in `webruntime-app.config.js`. Customization includes:\n\n-   what services the application server will use\n-   the page application container to use, which governs the pages rendered by the application\n-   how the module bundler ([rollup.js](https://rollupjs.org/guide/en/)) choses which components to bundle together during compilation\n-   how components are bundled and provided to the client\n\n### Services Configuration\n\nAddressable Services configuration describes the HTTP addressable services supported by your LWR application.\n\n```js\nconst { ComponentService, ImportMapService, AppBootstrapService } = require('@webruntime/services');\n\nmodule.exports = {\n    // Addressable Services\n    services: [ComponentService, ImportMapService, AppBootstrapService],\n};\n```\n\nSee [Addressable Services API](ADDRESSABLE_SERVICES_API.md)\n\n### Application Configuration\n\nApplication configuration defines your application component(s) (an application component is simply a LWC that is the root/parent component of a page), and the page(s) which contain them.\n\n```js\n    // Application Configuration\n    app: {\n        defaultComponent: 'my/app',\n        defaultTemplate: 'src/index.html',\n    },\n```\n\nSee [Application API](APPLICATION_API.md)\n\n### Component Rollup\n\nConfiguration of how components are bundled together during compilation is described by the [`CompilerConfig.inlineConfig`](docs/modules/_config_.md) configuration property.\n\nWhen a component is compiled, dependent components can be rolled up in to the component's source. This produces a compiled component with both the root and its dependencies inlined in to the resulting generated code.\n\nThe `inlineConfig` property allows you to configure which components are rolled up in to the generated source.\n\nBy default, the compiler will attempt to rollup all components available to the compiler. This includes components in the `moduleDir` as well as components provided via package.json dependencies.\n\nAs a result, the `inlineConfig` directive is primarily an exclusion policy.\n\nFor example the following configuration, will exclude the `shared/library` component from being woven in to the generated code for the `my/app` component. This enables re-use of the `shared/library` component by others via [Component Bundling](#component-bundling) or `externals`.\n\n```javascript\nmodule.exports = {\n    // Component Bundling Configuration\n    compilerConfig {\n        inlineConfig: [{ descriptor: 'my/app', exclude:['shared/library']}],\n    }\n};\n```\n\n### Component Bundling\n\nLWR compiles all your application code into manageable code \"bundles\". This is meant to ensure the application doesn't try to load unnecessary code, while also ensuring that code is available when the application needs it. When LWR creates these bundles, a decision has to be made on how large each bundle should be. The act of drawing that line at a certain boundary is usually referred to as code-splitting. LWR gives you control over the code splitting strategy.\n\nFor example, the following configuration directs the runtime to split the application in two ways --\n\n-   bundle all available dependencies of the root component -- `my/app`\n-   bundle all available dependencies for each page component -- `pages/*`\n\nThe bundle will not include dependendies, which are either preloaded using the `preloadModules` or consider external to the runtime container by the `externals` configuration property.\n\n```javascript\nmodule.exports = {\n    // Component Bundling Configuration\n    bundle: ['my/app', 'pages/*'],\n};\n```\n\n**_Note_:** In the case of component bundling the components are still individually registered in to the client component module registry, but are grouped together in to bundled response payload.\n\n#### Bundling Exclusions\n\nIt is also possible to exclude components from a bundling request using the `exclude` property in the [Bundle Config Entry](docs/modules/_config_.md#bundleconfigentry).\n\n```javascript\nmodule.exports = {\n    // Component Bundling Configuration\n    bundle: [{ descriptor: 'my/app', exclude: ['shared/library'] }, 'pages/*'],\n};\n```\n\nThis type of configuration can useful when you want to share a module across application component graphs. Use in conjunction with `preloadModules` or `externals` configuration properties.\n",
    "licenseText": "MIT LICENSE\n\nCopyright (c) 2019, Salesforce.com, Inc.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@webruntime/api/-/api-0.30.12.tgz#d49d7d9ce8c92fd7168664e6222017924882c486",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@webruntime/api/-/api-0.30.12.tgz",
    "hash": "d49d7d9ce8c92fd7168664e6222017924882c486",
    "integrity": "sha512-pwmom706bqcOWr1fuQ4SE2gi1W1HOAOIBb3AipRGtidFBE61VvmeVU1SN1FYxdNCjXyEVg+Ib2Ug4DWid0tedQ==",
    "registry": "npm",
    "packageName": "@webruntime/api",
    "cacheIntegrity": "sha512-pwmom706bqcOWr1fuQ4SE2gi1W1HOAOIBb3AipRGtidFBE61VvmeVU1SN1FYxdNCjXyEVg+Ib2Ug4DWid0tedQ== sha1-1J19nOjJL9cWhmTmIiAXkkiCxIY="
  },
  "registry": "npm",
  "hash": "d49d7d9ce8c92fd7168664e6222017924882c486"
}
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const fs_1 = __importDefault(require("fs"));
/**
 * The Base LWR Page class which LWR pages extend
 *
 * Create a custom Page class extended from WebruntimePage:
 * @example
 *```js
 * const {WebruntimePage} = require('@webruntime/api');
 *
 * class SamplePage extends WebruntimePage {
 *   get experimental_scripts() {
 *     const { request } = this.pageContext;
 *     const mode = request.query && request.query['lwr.mode']
 *     return [{
 *       code: `alert("${mode}")`;
 *     }, {
 *       href: `/public/js/assets/${mode}/metrics.js`
 *     }]
 *   }
 *
 *   get experimental_styles() {
 *     return '/public/css/main.css';
 *   }
 * }
 * ```
 */
class WebruntimePage {
    constructor(app, req, locals, config, opts) {
        var _a, _b, _c, _d;
        this.app = app;
        this.req = req;
        this.locals = locals;
        this.config = config;
        Object.freeze(this.req);
        // TODO <W-6894762>: component overrides currently not working
        this.component = (_b = (_a = opts) === null || _a === void 0 ? void 0 : _a.component, (_b !== null && _b !== void 0 ? _b : app.defaultComponent));
        this.template = (_d = (_c = opts) === null || _c === void 0 ? void 0 : _c.template, (_d !== null && _d !== void 0 ? _d : app.defaultTemplate));
        this.templateContent = fs_1.default.readFileSync(this.template, 'utf8');
    }
    /**
     * A context object containing metadata for this page. This method should *not* be overridden.
     */
    get pageContext() {
        return {
            app: this.app,
            request: this.req,
            locals: this.locals,
            config: this.config,
            template: this.template,
            templateContent: this.templateContent,
            component: this.component,
        };
    }
    /**
     * The template contents used to render the document for this page. Can be overriden to
     * customize the contents prior to rendering of the final page document.
     *
     * @example
     *```js
     * const {WebruntimePage} = require('@webruntime/api');
     * const moment = require('moment');
     * class SamplePage extends WebruntimePage {
     *   get experimental_content() {
     *      const content = this.pageContext.templateContent;
     *      // Replace a directive present in your template file
     *      content.replace('{someDsl}', moment.now());
     *      return content;
     *   }
     * }
     *```
     *
     * This is an experimental feature.
     */
    get experimental_content() {
        return this.pageContext.templateContent;
    }
    /**
     * The HTTP content-type header returned for this page.
     */
    get contentType() {
        return 'text/html';
    }
    /**
     * Custom styles that are rendered for this page.
     *
     * This is an experimental feature.
     */
    get experimental_styles() {
        return [];
    }
    /**
     * Custom scripts that are rendered for this page.
     *
     * This is an experimental feature.
     */
    get experimental_scripts() {
        return [];
    }
}
exports.WebruntimePage = WebruntimePage;
//# sourceMappingURL=webruntime-page.js.map
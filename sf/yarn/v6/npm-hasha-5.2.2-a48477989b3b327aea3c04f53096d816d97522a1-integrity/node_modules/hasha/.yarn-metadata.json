{
  "manifest": {
    "name": "hasha",
    "version": "5.2.2",
    "description": "Hashing made simple. Get the hash of a buffer/string/stream/file.",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/hasha.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "engines": {
      "node": ">=8"
    },
    "scripts": {
      "test": "xo && ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts",
      "thread.js"
    ],
    "keywords": [
      "hash",
      "hashing",
      "crypto",
      "hex",
      "base64",
      "md5",
      "sha1",
      "sha256",
      "sha512",
      "sum",
      "stream",
      "file",
      "fs",
      "buffer",
      "string",
      "text",
      "rev",
      "revving",
      "simple",
      "easy"
    ],
    "dependencies": {
      "is-stream": "^2.0.0",
      "type-fest": "^0.8.0"
    },
    "devDependencies": {
      "@types/node": "^12.7.5",
      "ava": "^2.4.0",
      "proxyquire": "^2.1.0",
      "tsd": "^0.8.0",
      "xo": "^0.24.0"
    },
    "xo": {
      "rules": {
        "import/no-unresolved": "off"
      }
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-hasha-5.2.2-a48477989b3b327aea3c04f53096d816d97522a1-integrity\\node_modules\\hasha\\package.json",
    "readmeFilename": "readme.md",
    "readme": "<h1 align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<img width=\"380\" src=\"media/logo.svg\" alt=\"hasha\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> Hashing made simple. Get the hash of a buffer/string/stream/file.\n\n[![Build Status](https://travis-ci.com/sindresorhus/hasha.svg?branch=master)](https://travis-ci.com/github/sindresorhus/hasha)\n\nConvenience wrapper around the core [`crypto` Hash class](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm) with simpler API and better defaults.\n\n## Install\n\n```\n$ npm install hasha\n```\n\n## Usage\n\n```js\nconst hasha = require('hasha');\n\nhasha('unicorn');\n//=> 'e233b19aabc7d5e53826fb734d1222f1f0444c3a3fc67ff4af370a66e7cadd2cb24009f1bc86f0bed12ca5fcb226145ad10fc5f650f6ef0959f8aadc5a594b27'\n```\n\n```js\nconst hasha = require('hasha');\n\n(async () => {\n\tconsole.log(await hasha.async('unicorn'));\n\t//=> 'e233b19aabc7d5e53826fb734d1222f1f0444c3a3fc67ff4af370a66e7cadd2cb24009f1bc86f0bed12ca5fcb226145ad10fc5f650f6ef0959f8aadc5a594b27'\n})();\n```\n\n```js\nconst hasha = require('hasha');\n\n// Hash the process input and output the hash sum\nprocess.stdin.pipe(hasha.stream()).pipe(process.stdout);\n```\n\n```js\nconst hasha = require('hasha');\n\n(async () => {\n\t// Get the MD5 hash of an image\n\tconst hash = await hasha.fromFile('unicorn.png', {algorithm: 'md5'});\n\n\tconsole.log(hash);\n\t//=> '1abcb33beeb811dca15f0ac3e47b88d9'\n})();\n```\n\n## API\n\nSee the Node.js [`crypto` docs](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options) for more about hashing.\n\n### hasha(input, options?)\n\nReturns a hash.\n\n#### input\n\nType: `Buffer | string | Array<Buffer | string>`\n\nBuffer you want to hash.\n\nWhile strings are supported you should prefer buffers as they're faster to hash. Although if you already have a string you should not convert it to a buffer.\n\nPass an array instead of concatenating strings and/or buffers. The output is the same, but arrays do not incur the overhead of concatenation.\n\n#### options\n\nType: `object`\n\n##### encoding\n\nType: `string`\\\nDefault: `'hex'`\\\nValues: `'hex' | 'base64' | 'buffer' | 'latin1'`\n\nEncoding of the returned hash.\n\n##### algorithm\n\nType: `string`\\\nDefault: `'sha512'`\\\nValues: `'md5' | 'sha1' | 'sha256' | 'sha512'` *([Platform dependent](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options))*\n\n*The `md5` algorithm is good for [file revving](https://github.com/sindresorhus/rev-hash), but you should never use `md5` or `sha1` for anything sensitive. [They're insecure.](https://security.googleblog.com/2014/09/gradually-sunsetting-sha-1.html)*\n\n### hasha.async(input, options?)\n\nIn Node.js 12 or later, the operation is executed using `worker_threads`. A thread is lazily spawned on the first operation and lives until the end of the program execution. It's unrefed, so it won't keep the process alive.\n\nReturns a hash asynchronously.\n\n### hasha.stream(options?)\n\nReturns a [hash transform stream](https://nodejs.org/api/crypto.html#crypto_class_hash).\n\n### hasha.fromStream(stream, options?)\n\nReturns a `Promise` for the calculated hash.\n\n### hasha.fromFile(filepath, options?)\n\nIn Node.js 12 or later, the operation is executed using `worker_threads`. A thread is lazily spawned on the first operation and lives until the end of the program execution. It's unrefed, so it won't keep the process alive.\n\nReturns a `Promise` for the calculated file hash.\n\n### hasha.fromFileSync(filepath, options?)\n\nReturns the calculated file hash.\n\n## Related\n\n- [hasha-cli](https://github.com/sindresorhus/hasha-cli) - CLI for this module\n- [crypto-hash](https://github.com/sindresorhus/crypto-hash) - Tiny hashing module that uses the native crypto API in Node.js and the browser\n- [hash-obj](https://github.com/sindresorhus/hash-obj) - Get the hash of an object\n- [md5-hex](https://github.com/sindresorhus/md5-hex) - Create a MD5 hash with hex encoding\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hasha/-/hasha-5.2.2.tgz#a48477989b3b327aea3c04f53096d816d97522a1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hasha/-/hasha-5.2.2.tgz",
    "hash": "a48477989b3b327aea3c04f53096d816d97522a1",
    "integrity": "sha512-Hrp5vIK/xr5SkeN2onO32H0MgNZ0f17HRNH39WfL0SYUNOTZ5Lz1TJ8Pajo/87dYGEFlLMm7mIc/k/s6Bvz9HQ==",
    "registry": "npm",
    "packageName": "hasha",
    "cacheIntegrity": "sha512-Hrp5vIK/xr5SkeN2onO32H0MgNZ0f17HRNH39WfL0SYUNOTZ5Lz1TJ8Pajo/87dYGEFlLMm7mIc/k/s6Bvz9HQ== sha1-pIR3mJs7MnrqPAT1MJbYFtl1IqE="
  },
  "registry": "npm",
  "hash": "a48477989b3b327aea3c04f53096d816d97522a1"
}
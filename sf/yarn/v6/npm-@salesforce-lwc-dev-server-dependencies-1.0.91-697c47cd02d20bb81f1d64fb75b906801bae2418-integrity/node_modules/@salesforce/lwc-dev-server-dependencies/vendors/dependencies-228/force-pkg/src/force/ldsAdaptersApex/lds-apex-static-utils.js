const { hasOwnProperty } = Object.prototype;

/**
 * Returns the field API name, qualified with an object name if possible.
 * @param value The value from which to get the qualified field API name.
 * @return The qualified field API name.
 */
function getFieldApiName(value) {
    if (typeof value === 'string') {
        return value;
    }
    else if (value &&
        typeof value.objectApiName === 'string' &&
        typeof value.fieldApiName === 'string') {
        return value.objectApiName + '.' + value.fieldApiName;
    }
    throw new TypeError('Value is not a string or FieldId.');
}
/**
 * Split the object API name and field API name from a qualified field name.
 * Eg: Opportunity.Title returns ['Opportunity', 'Title']
 * Eg: Opportunity.Account.Name returns ['Opportunity', 'Account.Name']
 * @param fieldApiName The qualified field name.
 * @return The object and field API names.
 */
function splitQualifiedFieldApiName(fieldApiName) {
    const idx = fieldApiName.indexOf('.');
    if (idx < 1) {
        // object api name must non-empty
        throw new TypeError('Value does not include an object API name.');
    }
    return [fieldApiName.substring(0, idx), fieldApiName.substring(idx + 1)];
}

const { isArray: ArrayIsArray } = Array;
function untrustedIsObject(untrusted) {
    return typeof untrusted === 'object' && untrusted !== null && ArrayIsArray(untrusted) === false;
}

/**
 * Gets a field value from an Apex sObject.
 * @param sobject The sObject holding the field.
 * @param field The qualified API name of the field to return.
 * @returns The field's value. If it doesn't exist, undefined is returned.
 */
function getSObjectValue(sObject, field) {
    if (untrustedIsObject(sObject) === false) {
        return;
    }
    const unqualifiedField = splitQualifiedFieldApiName(getFieldApiName(field))[1];
    const fields = unqualifiedField.split('.');
    let ret = sObject;
    for (let i = 0, fieldsLength = fields.length; i < fieldsLength; i++) {
        const nextField = fields[i];
        if (!hasOwnProperty.call(ret, nextField)) {
            return undefined;
        }
        ret = ret[nextField];
    }
    return ret;
}

export { getSObjectValue };

{
  "manifest": {
    "name": "helmet-csp",
    "author": {
      "name": "Adam Baldwin",
      "email": "adam@npmjs.com",
      "url": "https://evilpacket.net"
    },
    "contributors": [
      {
        "name": "Evan Hahn",
        "email": "me@evanhahn.com",
        "url": "https://evanhahn.com"
      },
      {
        "name": "Ryan Cannon",
        "email": "ryan@ryancannon.com",
        "url": "https://ryancannon.com"
      }
    ],
    "description": "Content Security Policy middleware.",
    "version": "2.10.0",
    "license": "MIT",
    "keywords": [
      "helmet",
      "security",
      "express",
      "connect",
      "content",
      "policy",
      "csp",
      "xss"
    ],
    "repository": {
      "type": "git",
      "url": "git://github.com/helmetjs/csp.git"
    },
    "bugs": {
      "url": "https://github.com/helmetjs/csp/issues",
      "email": "me@evanhahn.com"
    },
    "homepage": "https://helmetjs.github.io/docs/csp/",
    "engines": {
      "node": ">=4.0.0"
    },
    "main": "./dist/index.js",
    "typings": "./dist/index.d.ts",
    "files": [
      "CHANGELOG.md",
      "LICENSE",
      "README.md",
      "dist/index.js",
      "dist/index.d.ts",
      "dist/lib/**/*.js",
      "dist/lib/types.d.ts"
    ],
    "scripts": {
      "pretest": "npm run lint",
      "prepublishOnly": "npm run build",
      "lint": "eslint --fix '**/*.ts'",
      "test": "jest --config test/jest-config.json",
      "clean": "rm -rf dist",
      "build": "npm run clean && tsc",
      "generate-supported-directives-docs": "./scripts/generate_supported_directives_docs"
    },
    "dependencies": {
      "bowser": "2.9.0",
      "camelize": "1.0.0",
      "content-security-policy-builder": "2.1.0",
      "dasherize": "2.0.0"
    },
    "devDependencies": {
      "@types/connect": "^3.4.33",
      "@types/jest": "^25.1.4",
      "@types/supertest": "^2.0.7",
      "@typescript-eslint/eslint-plugin": "^2.25.0",
      "@typescript-eslint/parser": "^2.25.0",
      "connect": "^3.7.0",
      "content-security-policy-parser": "^0.3.0",
      "eslint": "^6.8.0",
      "eslint-config-helmet": "^0.2.0",
      "jest": "^25.1.0",
      "supertest": "^4.0.2",
      "ts-jest": "^25.2.1",
      "typescript": "^3.8.3"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-helmet-csp-2.10.0-685dde1747bc16c5e28ad9d91e229a69f0a85e84-integrity\\node_modules\\helmet-csp\\package.json",
    "readmeFilename": "README.md",
    "readme": "Content Security Policy middleware\n==================================\n[![Build Status](https://travis-ci.org/helmetjs/csp.svg?branch=master)](https://travis-ci.org/helmetjs/csp)\n\nContent Security Policy helps prevent unwanted content being injected into your webpages; this can mitigate cross-site scripting (XSS) vulnerabilities, malicious frames, unwanted trackers, and more. If you want to learn how CSP works, check out the fantastic [HTML5 Rocks guide](http://www.html5rocks.com/en/tutorials/security/content-security-policy/), the [Content Security Policy Reference](http://content-security-policy.com/), and the [Content Security Policy specification](http://www.w3.org/TR/CSP/). This module helps set Content Security Policies.\n\nUsage:\n\n```javascript\nconst csp = require('helmet-csp')\n\napp.use(csp({\n  // Specify directives as normal.\n  directives: {\n    defaultSrc: [\"'self'\", 'default.com'],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    styleSrc: ['style.com'],\n    fontSrc: [\"'self'\", 'fonts.com'],\n    imgSrc: ['img.com', 'data:'],\n    sandbox: ['allow-forms', 'allow-scripts'],\n    reportUri: '/report-violation',\n    objectSrc: [\"'none'\"],\n    upgradeInsecureRequests: true,\n    workerSrc: false  // This is not set.\n  },\n\n  // This module will detect common mistakes in your directives and throw errors\n  // if it finds any. To disable this, enable \"loose mode\".\n  loose: false,\n\n  // Set to true if you only want browsers to report errors, not block them.\n  // You may also set this to a function(req, res) in order to decide dynamically\n  // whether to use reportOnly mode, e.g., to allow for a dynamic kill switch.\n  reportOnly: false,\n\n  // Set to true if you want to blindly set all headers: Content-Security-Policy,\n  // X-WebKit-CSP, and X-Content-Security-Policy.\n  setAllHeaders: false,\n\n  // Set to true if you want to disable CSP on Android where it can be buggy.\n  disableAndroid: false,\n\n  // Set to false if you want to completely disable any user-agent sniffing.\n  // This may make the headers less compatible but it will be much faster.\n  // This defaults to `true`.\n  browserSniff: true\n}))\n```\n\nThere are a lot of inconsistencies in how browsers implement CSP. Helmet looks at the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is matched, it will set _all_ the headers with the 2.0 spec.\n\nSupported directives\n--------------------\n\nDirectives can be kebab-cased (like `script-src`) or camel-cased (like `scriptSrc`); they are equivalent.\n\nThe following directives are supported:\n\n* `base-uri` or `baseUri`\n* `block-all-mixed-content` or `blockAllMixedContent`\n* `child-src` or `childSrc`\n* `connect-src` or `connectSrc`\n* `default-src` or `defaultSrc`\n* `font-src` or `fontSrc`\n* `form-action` or `formAction`\n* `frame-ancestors` or `frameAncestors`\n* `frame-src` or `frameSrc`\n* `img-src` or `imgSrc`\n* `manifest-src` or `manifestSrc`\n* `media-src` or `mediaSrc`\n* `object-src` or `objectSrc`\n* `plugin-types` or `pluginTypes`\n* `prefetch-src` or `prefetchSrc`\n* `report-to` or `reportTo`\n* `report-uri` or `reportUri`\n* `require-sri-for` or `requireSriFor`\n* `sandbox` or `sandbox`\n* `script-src` or `scriptSrc`\n* `style-src` or `styleSrc`\n* `upgrade-insecure-requests` or `upgradeInsecureRequests`\n* `worker-src` or `workerSrc`\n\nHandling CSP violations\n-----------------------\n\nIf you've specified a `reportUri`, browsers will POST any CSP violations to your server. Here's a simple example of a route that handles those reports:\n\n```js\napp.post(\n  '/report-violation',\n  bodyparser.json({\n    type: ['json', 'application/csp-report']\n  }),\n  (req, res) => {\n    if (req.body) {\n      console.log('csp violation: ', req.body)\n    } else {\n      console.log('csp violation: no data received!')\n    }\n    res.status(204).end()\n  }\n)\n```\n\nNot all browsers send CSP violations in the same way, so this might require a little work.\n\n*Note*: If you're using a CSRF module like [csurf](https://github.com/expressjs/csurf), you might have problems handling these violations without a valid CSRF token. The fix is to put your CSP report route *above* csurf middleware.\n\nGenerating nonces\n-----------------\n\nYou can dynamically generate nonces to allow inline `<script>` tags to be safely evaluated. Here's a simple example:\n\n```js\nconst crypto = require('crypto')\n\napp.use((req, res, next) => {\n  res.locals.nonce = crypto.randomBytes(16).toString('hex')\n  next()\n})\n\napp.use(csp({\n  directives: {\n    scriptSrc: [\n      \"'self'\",\n      (req, res) => `'nonce-${res.locals.nonce}'`  // 'nonce-348c18b14aaf3e00938d8bdd613f1149'\n    ]\n  }\n}))\n\napp.use((req, res) => {\n  res.end(`<script nonce=\"${res.locals.nonce}\">alert(1 + 1);</script>`)\n})\n```\n\nUsing CSP with a CDN\n--------------------\n\nThe default behavior of CSP is generate headers tailored for the browser that's requesting your page. If you have a CDN in front of your application, the CDN may cache the wrong headers, rendering your CSP useless. Make sure to eschew a CDN when using this module or set the `browserSniff` option to `false`.\n\nSee also\n--------\n\n* [Google's CSP Evaluator tool](https://csp-evaluator.withgoogle.com/)\n* [GitHub's CSP journey](http://githubengineering.com/githubs-csp-journey/)\n* [Content Security Policy for Single Page Web Apps](https://developer.squareup.com/blog/content-security-policy-for-single-page-web-apps/)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-2020 Evan Hahn, Adam Baldwin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/helmet-csp/-/helmet-csp-2.10.0.tgz#685dde1747bc16c5e28ad9d91e229a69f0a85e84",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/helmet-csp/-/helmet-csp-2.10.0.tgz",
    "hash": "685dde1747bc16c5e28ad9d91e229a69f0a85e84",
    "integrity": "sha512-Rz953ZNEFk8sT2XvewXkYN0Ho4GEZdjAZy4stjiEQV3eN7GDxg1QKmYggH7otDyIA7uGA6XnUMVSgeJwbR5X+w==",
    "registry": "npm",
    "packageName": "helmet-csp",
    "cacheIntegrity": "sha512-Rz953ZNEFk8sT2XvewXkYN0Ho4GEZdjAZy4stjiEQV3eN7GDxg1QKmYggH7otDyIA7uGA6XnUMVSgeJwbR5X+w== sha1-aF3eF0e8FsXiitnZHiKaafCoXoQ="
  },
  "registry": "npm",
  "hash": "685dde1747bc16c5e28ad9d91e229a69f0a85e84"
}
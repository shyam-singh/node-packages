{
  "manifest": {
    "name": "@webruntime/navigation",
    "description": "LWR Client-side Navigation APIs",
    "license": "MIT",
    "version": "0.30.12",
    "main": "dist/commonjs/services/index.js",
    "files": [
      "dist/",
      "src/modules/webruntime_navigation/*",
      "!**/__tests__"
    ],
    "publishConfig": {
      "access": "public",
      "registry": "https://registry.npmjs.org"
    },
    "scripts": {
      "clean": "rm -rf dist && rm -f ./src/modules/webruntime_navigation/router/pathToRegexp.js",
      "test": "yarn build && jest",
      "coverage": "yarn build && jest --coverage",
      "lint": "eslint . --max-warnings 0",
      "build:copy": "rollup -c scripts/rollup.config.path.js",
      "build": "yarn build:copy && tsc -b"
    },
    "dependencies": {
      "@lwc/errors": "1.2.2",
      "@webruntime/api": "0.30.12",
      "@webruntime/compiler": "0.30.12",
      "chokidar": "^3.3.0"
    },
    "devDependencies": {
      "@babel/plugin-proposal-class-properties": "^7.5.5",
      "@babel/plugin-transform-modules-commonjs": "^7.5.5",
      "@babel/preset-env": "^7.5.5",
      "@babel/preset-typescript": "^7.3.3",
      "@lwc/jest-preset": "3.0.0-alpha.7",
      "@rollup/plugin-alias": "^3.0.1",
      "jest": "^24.1.0",
      "lwc": "1.2.2",
      "path-to-regexp": "^6.0.0",
      "rollup": "^1.25.1",
      "rollup-plugin-commonjs": "^10.1.0",
      "rollup-plugin-node-resolve": "^5.2.0",
      "rollup-plugin-typescript": "^1.0.1",
      "ts-jest": "^25.2.1",
      "typescript": "^3.7.5"
    },
    "lwc": {
      "modules": [
        "src/modules",
        {
          "name": "webruntime/navigation",
          "path": "src/modules/webruntime_navigation/navigation/navigation.js"
        },
        {
          "name": "lightning/navigation",
          "path": "src/modules/webruntime_navigation/lightningNavigation/lightningNavigation.js"
        },
        {
          "name": "webruntime/link",
          "path": "src/modules/webruntime_navigation/link/link.js"
        },
        {
          "name": "webruntime/router",
          "path": "src/modules/webruntime_navigation/childRouter/childRouter.js"
        },
        {
          "name": "webruntime/outlet",
          "path": "src/modules/webruntime_navigation/outlet/outlet.js"
        }
      ]
    },
    "gitHead": "f91998cb535573b8cf07f2a0ce7595c10ff466c1",
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-@webruntime-navigation-0.30.12-7d6c503451a7e833f7212ebfa0f614f0069da750-integrity\\node_modules\\@webruntime\\navigation\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Lightning Web Runtime :: Navigation and Routing\n\n## Table of contents\n\n-   [Introduction](#introduction)\n-   [Background](#background)\n    -   [Definitions](#definitions)\n    -   [Prerequisites](#prerequisites)\n-   [Webruntime Routing APIs](#webruntime-routing-apis)\n    -   [`createRouter()`](#createrouter)\n        -   [Lifecycle hooks](#lifecycle-hooks)\n    -   [`NavigationContext`](#navigationcontext)\n    -   [`navigate()`](#navigate)\n    -   [`generateUrl()`](#generateurl)\n    -   [`subscribe()`](#subscribe)\n    -   [`webruntime-link`](#webruntime-link)\n    -   [Usage examples](#usage-examples)\n        -   [Creating a root router with hooks](#creating-a-root-router-with-hooks)\n        -   [Using the `webruntime/navigation` APIs](#using-the-webruntimenavigation-apis)\n-   [Customize a router](#customize-a-router)\n    -   [Translation layer plug-points](#translation-layer-plug-points)\n    -   [Navigation event plug-points](#navigation-event-plug-points)\n    -   [Usage examples](#usage-examples-1)\n        -   [Customizing a root router](#customizing-a-root-router)\n-   [Nesting routers](#nesting-routers)\n    -   [`webruntime-router`](#webruntime-router)\n    -   [Usage examples](#usage-examples-2)\n        -   [Create and customize a `webruntime-router`](#create-and-customize-a-webruntime-router)\n        -   [Root router and `webruntime-router` relationship](#root-router-and-webruntime-router-relationship)\n-   [Using Router Views](#using-router-views)\n    -   [Setup route definitions](#setup-route-definitions)\n    -   [Generate a router](#generate-a-router)\n    -   [Add a router outlet](#add-a-router-outlet)\n-   [Lightning Navigation](#lightning-navigation)\n    -   [`CurrentPageReference`](#currentpagereference)\n    -   [`NavigationMixin`](#navigationmixin)\n    -   [Usage examples](#usage-examples-3)\n        -   [`NavigationMixin` and `CurrentPageReference`](#navigationmixin-and-currentpagereference)\n-   [Advanced topics](#advanced-topics)\n    -   [`provideContext()`](#providecontext)\n    -   [Hardcoding context](#hardcoding-context)\n-   [Setup](#setup)\n    -   [Install](#install)\n    -   [Build](#build)\n    -   [Tests](#tests)\n-   [Architecture](#architecture)\n    -   [Static analysis](#static-analysis)\n    -   [Route definition matching](#route-definition-matching)\n    -   [Diagrams](#diagrams)\n\n## Introduction\n\nThis is a client-side routing package for off-core [LWC](https://developer.salesforce.com/docs/component-library/documentation/lwc)-based applications, from Lightning Web Runtime (Webruntime).\n\nIt supplies an API with the ability to create a router, navigate, generate URLs and subscribe to navigation events.\n\nRouters can be customized at various plug points, or used as-is. Routers can also be nested, to create a hierarchy on the page.\n\nBuilt on top of the Webruntime routing APIs is a **Lightning Navigation** layer. It provides implementations for the `NavigationMixin` and `CurrentPageReference` wire adapter from [lightning/navigation](http://component-library-dev.herokuapp.com/docs/component-library/bundle/lightning-navigation/documentation). This allows a component to be written once, and plugged in anywhere that uses the `lightning/navigation` contracts.\n\nA consumer of this package can write an application that uses the Webruntime routing APIs, the Lightning Navigation layer, or both. Customer components or applications will most likely use the Lightning Navigation API, as our public-facing contract.\n\n## Background\n\n### Definitions\n\nThese concepts are used throughout this documentation. All examples are using this URL:\n\n```\nhttps://www.somewhere.com/case/10?param1=one&param2=two&param3\n```\n\n-   **URL**: A browser URL, either absolute or relative, containing both the path and query parameters (e.g.: `https://www.somewhere.com/case/10?param1=one&param2=two&param3` or `/case/10?param1=one&param2=two&param3`)\n-   **path**: The `pathname` of a URL (e.g.: `/case/10`)\n-   **absolute path**: A path that contains the entire `pathname` of a URL (e.g.: `/case/10` NOT `/10`)\n-   **query string**: The query part of a URL (e.g.: `?param1=one&param2=two&param3`)\n-   **query object**: An object representing a parsed query string, e.g.:\n\n```json\n{\n    \"param1\": \"one\",\n    \"param2\": \"two\",\n    \"param3\": \"\"\n}\n```\n\n-   **route definition**: An object used to describe a URL category or pattern. A shape containing a **unique** `id` and an optionally parameterized `path` is used. [Path-to-regexp](https://github.com/pillarjs/path-to-regexp) is used to parse the `path`. To support `lightning/navigation` APIs, add the `page` property. Additional custom data may also be included, e.g.:\n\n```js\n{\n    /* required data */\n    \"path\": \"/case/:recordId/:optional?\", // Uses path-to-regexp for parsing parameters.\n    \"exact\": true/false, // When true, will only match if the path matches location.pathname exactly. The default is `true`.\n\n    /* Basic routing */\n    \"id\": \"case-detail\",\n\n    /* lightning/navigation */\n    \"page\": {\n        \"type\": \"standard__recordPage\",\n        \"attributes\": {\n            \"objectApiName\": \"Case\"\n        }\n    },\n\n    /* custom data */\n    \"view\": \"caseDetail\"\n    \"label\": \"Case Detail\"\n}\n```\n\n_Note_: More information about route definition matching can be found [here](#route-definition-matching).\n\n-   **route**: An object representing the current URL. The `id` comes from the matching route definition. The `attributes` property contains the parameters parsed from the URL using the route definition `path`. The `state` property contains the query object, e.g.:\n\n```json\n{\n    \"id\": \"case-detail\",\n    \"attributes\": {\n        \"objectApiName\": \"Case\",\n        \"recordId\": \"place\"\n    },\n    \"state\": {\n        \"param1\": \"one\",\n        \"param2\": \"two\",\n        \"param3\": \"\"\n    }\n}\n```\n\n-   **[page reference](https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/components_navigation_page_definitions.htm)**: A special type of route object used for `lightning/navigation`. The `type` property is used instead of the `id`, e.g.:\n\n```json\n{\n    \"type\": \"standard__recordPage\",\n    \"attributes\": {\n        \"objectApiName\": \"Case\",\n        \"recordId\": \"place\"\n    },\n    \"state\": {\n        \"param1\": \"one\",\n        \"param2\": \"two\",\n        \"param3\": \"\"\n    }\n}\n```\n\n-   **simple route**: When a URL does not match any route definitions, a default route containing the absolute path and query object is produced by the router, e.g.:\n\n```json\n{\n    \"type\": \"standard__simpleRoute\",\n    \"attributes\": {\n        \"path\": \"/case/10\"\n    },\n    \"state\": {\n        \"param1\": \"one\",\n        \"param2\": \"two\",\n        \"param3\": \"\"\n    }\n}\n```\n\n-   **navigation event**: The navigation state is changing, either by a browser URL update, or programmatically.\n-   **navigation context**: When a component provides navigation context, it implements the functions necessary to support the Webruntime routing APIs for its descendent components.\n-   **router**: A piece of code that manages navigation changes. A router can have up to 1 direct child router. A router provides navigation context.\n-   **root router**: The router instance that sits highest up in the DOM hierarchy. Updates flow from the root router to its child router, then grandchild router, etc. Some applications may only have a root router.\n-   **translation layer**: The functions a router uses to translate a URL to a route, and a route to a URL.\n\n### Prerequisites\n\nThe navigation package has a dependency upon the [LWC wire-service](https://developer.salesforce.com/docs/component-library/documentation/lwc/data_wire_service_about). To include the `wire-service`:\n\n1. Preload the `wire-service` in `webruntime-app.config.js`:\n\n```js\npreloadModules: ['wire-service'],\n```\n\n2. Register the `wire-service` in the root component of the application:\n\n```js\nimport { LightningElement, register } from 'lwc';\nimport { registerWireService } from 'wire-service';\n\nregisterWireService(register);\n\nexport default class RootApp extends LightningElement {\n    // ...\n}\n```\n\n## Webruntime routing APIs\n\nThe Webruntime routing APIs supply functions to create a root router, navigate (programmatically and declaratively), generate URLs, and subscribe to navigation events.\n\n```js\n// app.js\nimport { createRouter, navigate, generateUrl, subscribe, NavigationContext } from 'webruntime/navigation';\n\n<!-- component.html -->\n<webruntime-link path=\"/some/where\">CLICK ME</webruntime-link>`\n```\n\n### `createRouter()`\n\n`const router = createRouter(config);`\n\nCreate a new root router for an application with arguments:\n\n-   `config`: Configure the router with an object containing these properties:\n    -   `basePath`: Set a base path for this router. The default is an empty string.\n    -   `routes`: Set an array of route definitions for URL parsing. The default is an empty array.\n    -   `noHistory`: By default, the router will manage the [browser history](https://developer.mozilla.org/en-US/docs/Web/API/Window/history). To turn this behavior off, set `noHistory: true`.\n    -   `caseSensitive`: When `true`, the route definition path matching will be case sensitive. The default is `false`.\n\nA router object is returned:\n\n-   `connect()`: Call this to start the router.\n-   `disconnect()`: Call this to stop the router from interacting with the application.\n-   `addPreNavigate(function | function[]) -> this router`: Add a listener function, or array of functions, to the pre navigate event hook.\n-   `addPostNavigate(function | function[]) -> this router`: Add a listener function, or array of functions, to the post navigate event hook.\n-   `addErrorNavigate(function | function[]) -> this router`: Add a listener function, or array of functions, to the navigation error hook.\n-   `id`: The navigation context ID for this router.\n\n#### Lifecycle hooks\n\nA router can have 0 or more listeners attached to each of its lifecycle hooks. The listeners are fired synchronously in the order in which they were attached:\n\n-   `preNavigate(transaction)`: This runs during a navigation event, before the state is changed. Listeners can stop the transaction at this point. If stopped, the `errorNavigate` listeners will be fired. The `preNavigate` functions should return one of these values:\n    -   `true`: The route should be processed.\n    -   `false`: The navigation event should be stopped, and no more listeners run on _any_ router.\n    -   `Promise`: Resolves to one of the values above; rejected `Promise`s are treated as `false`.\n-   `postNavigate(transaction)`: This runs after a navigation event completes. Subscribers will not be notified until all post navigation listeners have finished executing. If a `postNavigate` listener returns `false` or a rejected `Promise`, the remaining listeners for that router are skipped, but the `postNavigate` listeners on any descendent routers will still run.\n-   `errorNavigate(error)`: This runs if the router encounters an error trying to navigate.\n\nThe pre and post navigation listens are passed a read-only transaction object:\n\n-   `current`: The navigation information `{ route, data }` for the current state, route may be `null` during `preNavigate`.\n-   `next` (`preNavigate` only): The navigation information that will load next (if not stopped).\n-   `previous` (`postNavigate` only): The navigation information that just unloaded, route may be `null`.\n\nThe `postNavigate` listeners are passed an `error` object:\n\n```\n{\n    code: an integer error code,\n    message: a string error message,\n    level: 1,\n    url: an optional URL where more information on the error can be found\n}\n```\n\nSee an example [here](#creating-a-root-router-with-hooks).\n\n### `NavigationContext`\n\n```js\n@wire(NavigationContext)\nnavContext;\n```\n\nA [wire adapter](https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.data_wire_service_about) that gives a component access to the its navigation context. The navigation context is used to call the Webruntime routing APIs below.\n\n### `navigate()`\n\n`navigate(navigationContext, location, shouldReplace);`\n\nNavigate to a new page programmatically with arguments:\n\n-   `navigationContext`: The navigation context in which to navigate.\n-   `location`: A route, or absolute path, to navigate to.\n-   `shouldReplace`: Send `true` if the new location should replace the current one in the browser history. The default is `false`.\n\n### `generateUrl()`\n\n`generateUrl(navigationContext, route).then((url) => this.path = url);`\n\nGiven a route, returns a `Promise` to a string URL.\n\n### `subscribe()`\n\n```js\nconst callback = (route, data) => console.log(route, data);\nthis.subscription = subscribe(navigationContext, callback);\n// .....\nif (this.subscription) {\n    this.subscription.unsubscribe();\n}\n```\n\nPass in a callback function that will get executed every time the navigation state changes. Receive a `Promise` to an observer with an `unsubscribe()` function in return.\n\nThe callback function takes these arguments:\n\n-   `route`: The new current route.\n-   `data`: Extra data associated with the current route. In the default implementation, this is the route definition which matches the current route. It will be null in the case of Simple Route (i.e.: no match).\n\n### `webruntime-link`\n\nA LWC used for declarative navigation. It can take either a string URL or a route as input.\n\n```html\n<webruntime-link path=\"/a/path?filter=all\">\n    <span>CLICK HERE</span>\n</webruntime-link>\n```\n\n```html\n<webruntime-link route=\"{route}\">\n    <img src=\"/my/link.gif\" alt=\"click me\" />\n</webruntime-link>\n```\n\nThe following CSS variables are used to style the internal `a` tag. Overwrite the values to update the look of the `link`s.\n\n```css\na {\n    color: var(--webruntime-link-color);\n    font-size: var(--webruntime-link-font-size);\n    text-decoration: var(--webruntime-link-text-decoration);\n}\na:hover,\na:active {\n    color: var(--webruntime-link-color-active, var(--webruntime-link-color));\n    font-size: var(--webruntime-link-font-size-active, var(--webruntime-link-font-size));\n    text-decoration: var(--webruntime-link-text-decoration-active);\n}\n```\n\n### Usage examples\n\n#### Creating a root router with hooks\n\n```js\nimport { createRouter } from 'webruntime/navigation';\nconst ROUTE_DEFINITIONS = [\n    {\n        id: 'recordPage',\n        path: '/r/:objectApiName/:recordId/:actionName',\n    },\n    {\n        id: 'objectPage',\n        path: '/o/:objectApiName/:actionName',\n    },\n    {\n        id: 'homePage',\n        path: '/', // This is the default route, and it must be last.\n    },\n];\n\nconst router = createRouter({ basePath: '/demo', routes: ROUTE_DEFINITIONS });\n\n// Add logger pre and post navigation hook listeners. Then connect.\nrouter\n    .addPreNavigate(t => console.log(`pre: Current: %o. Next: %o`, t.current.route, t.next.route))\n    .addPostNavigate(t =>\n        console.log(`post: Current: %o. Previous: %o`, t.current.route, t.previous.route)\n    )\n    .addErrorNavigate(e =>\n        console.error(`There was a problem during navigation: ${e.code} :: ${e.message}`)\n    )\n    .connect();\n```\n\n#### Using the `webruntime/navigation` APIs\n\n```js\nimport { track, wire, LightningElement } from 'lwc';\nimport { navigate, generateUrl, subscribe, NavigationContext } from 'webruntime/navigation';\n\nconst aRoute = {\n    id: 'page',\n    attributes: {\n        name: 'sample',\n    },\n};\n\nexport default class Example extends LightningElement {\n    @track name = '';\n    @track path = null;\n    subscription = null;\n\n    // Get a reference to the navigation context for this component.\n    @wire(NavigationContext)\n    navContext;\n\n    // Subscribe to updates on the current state.\n    connectedCallback() {\n        this.subscription = subscribe(this.navContext, (route, data) => {\n            this.name = route.attributes.name || '';\n            this.path = data ? data.path : null;\n        });\n    }\n\n    // Navigate programmatically by URL.\n    navUrl() {\n        navigate(this.navContext, '/some/path');\n    }\n\n    // Navigate programmatically by route.\n    navRoute() {\n        navigate(this.navContext, aRoute);\n    }\n\n    // Generate a URL for a route.\n    getUrl() {\n        generateUrl(this.navContext, aRoute).then(url => console.log(url));\n    }\n\n    // Disconnect from the navigation event subscription.\n    disconnectedCallback() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n```\n\n## Customize a router\n\nA router has plug-points that accept logic to override the default behavior. The translation layer (route <-> URL) and navigation event handling can be customized. Pass the plug-points in as properties on a router's [config](#createrouter) object.\n\n### Translation layer plug-points\n\n-   **getRouteFromUrl**: `f(url, defaultImpl) -> { route, data }`: Given a URL (absolute or relative), return the associated route and data. If a route could not be found to match the given URL then `route: null`.\n-   **getUrlFromRoute**: `f(route, defaultImpl) -> { url, data }`: Given a route, return the associated relative URL string with an absolute path and data. If a URL could not be created for the given route then `url: null`.\n\nThings to note:\n\n-   Returning `null` for a `url` or `route` will result in the `errorNavigation` hook listeners being call on all routers.\n-   If a plug-point is not provided, a default implementation is used. The default implementation function is provided as a second argument to the plug-point functions for convenience.\n-   The default implementation of `getRouteFromUrl` will never return `route: null`. A Simple Route is returned for URLs that do not match any route definition. See this [example](#customizing-a-root-router) for turning off Simple Routes.\n\n### Navigation event plug-points\n\n-   **handleNavigation**: `f(url | route, shouldReplace) -> boolean`: This is called whenever a navigation event bubbles up through a router. Return false to stop propagation and cancel the event. This function is a no-op by default. The arguments are:\n    -   `url` | `route`: The string URL or route object passed in from [`navigate()`](#navigate).\n    -   `shouldReplace`: `true` if the URL should replace the current one in the browser history.\n\n### Usage examples\n\n#### Customizing a root router\n\n```js\nimport { LightningElement } from 'lwc';\nimport { createRouter } from 'webruntime/navigation';\nimport ROUTE_DEFINITIONS from './routeDefinitions';\n\nexport default class Example extends LightningElement {\n    constructor() {\n        super();\n        this.router = createRouter({\n            basePath: '/demo',\n            routes: ROUTE_DEFINITIONS,\n            handleNavigation: this.handleNavigation.bind(this),\n            getRouteFromUrl: this.getRouteFromUrl.bind(this),\n            getUrlFromRoute: this.getUrlFromRoute.bind(this),\n        });\n        this.router.connect();\n    }\n\n    disconnectedCallback() {\n        this.router.disconnect();\n    }\n\n    // Process a navigation event bubbling up from descendent components.\n    // The getRouteFromUrl function is provided for convenience.\n    // This example stops propagation if the route id is 'no__good'.\n    handleNavigation(input, options, getRouteFromUrl) {\n        const route = typeof input === 'string' ? getRouteFromUrl(input).route : input;\n        return route.id !== 'no__good';\n    }\n\n    // Return null as the route instead of Simple Routes.\n    // This turns off the Simple Route feature.\n    // The errorNavigate hook listeners are run when { route: null }\n    getRouteFromUrl(url, defaultImpl) {\n        const defaultInfo = defaultImpl(url);\n        return defaultInfo.route.type === 'standard__simpleRoute'\n            ? { route: null, data: null }\n            : defaultInfo;\n    }\n\n    // Set a sticky query parameter on every URL.\n    getUrlFromRoute(route, defaultImpl) {\n        const { url, routeDef } = defaultImpl(route);\n        return {\n            url: url ? `${url}?new=param` : null,\n            data: routeDef,\n        };\n    }\n}\n```\n\n## Nesting routers\n\nMultiple routers can be nested, with each router having up to 1 child. Each router is responsible for parsing part of the URL path, and providing the associated route to its descendent subscribers.\n\n### `webruntime-router`\n\n```html\n<webruntime-router\n    routes=\"{routes}\"\n    base-path=\"/base\"\n    no-history\n    case-sensitive\n    onprenavigate=\"{preNavigate}\"\n    onpostnavigate=\"{postNavigate}\"\n    onerrornavigate=\"{errorNavigate}\"\n    onhandlenavigation=\"{handleNavigation}\"\n></webruntime-router>\n```\n\nCreate a child router declaratively with this LWC. Pass the [config](#createrouter) options to the router via [@api properties](https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.js_props_public):\n\n-   `routes`\n-   `base-path`\n-   `no-history`\n-   `case-sensitive`\n\nAttach hooks with event listeners:\n\n-   `onprenavigate` is cancelable\n-   `onpostnavigate`\n-   `onerrornavigate`\n-   `onhandlenavigation` is cancelable\n\n### Usage examples\n\n#### Create and customize a `webruntime-router`\n\n```html\n<template>\n    <webruntime-router\n        routes=\"{routes}\"\n        base-path=\"/demo\"\n        onprenavigate=\"{preNavigate}\"\n        onpostnavigate=\"{postNavigate}\"\n        onerrornavigate=\"{errorNavigate}\"\n        onhandlenavigation=\"{handleNavigation}\"\n    >\n        <template if:true=\"{message}\"><error>{message}</error></template>\n        <webruntime-link path=\"/a/place\">\n            I'm inside the child navigation context\n        </webruntime-link>\n        <view></view>\n    </webruntime-router>\n</template>\n```\n\n```js\nimport { track, LightningElement } from 'lwc';\nimport ROUTE_DEFINITIONS from './routeDefinitions';\nimport { user } from '../services/user';\nimport { getData } from '../services/xhr';\n\nexport default class Example extends LightningElement {\n    @track errorMessage = null;\n    routes = ROUTE_DEFINITIONS;\n\n    // Add lifecycle hook events.\n    preNavigate(e) {\n        e.stopPropagation();\n        // If any pre-navigate hook returns false, cancel the event.\n        if (!this.authorization(e.detail) || !this.unmountCheck(e.detail)) {\n            e.preventDefault();\n        }\n    }\n    postNavigate(e) {\n        e.stopPropagation();\n        this.logNav(e.detail);\n        this.getData(e.detail);\n    }\n    errorNavigate(e) {\n        e.stopPropagation();\n        this.showError(e.detail);\n        this.getData(e.detail);\n    }\n    handleNavigation(e) {\n        e.stopPropagation();\n        const { input } = e.detail;\n        console.log('Bubbling navigation event: ', input);\n    }\n\n    // Do not allow navigation to private pages for guest users.\n    authorization(transaction) {\n        if (user.isGuest() && transaction.next.route.id === 'private-page') {\n            return false;\n        }\n        return true;\n    }\n\n    // Warn users before leaving the current page.\n    // !transaction.current.route indicates a first time page load.\n    unmountCheck(transaction) {\n        return !transaction.current.route\n            ? true\n            : new Promise(resolve => {\n                  resolve(confirm('Are you sure you want to leave?'));\n              });\n    }\n\n    // Log navigation events that just completed.\n    // Clear the error message.\n    logNav(transaction) {\n        console.log(\n            `postNav -> Current: %o. Previous: %o`,\n            transaction.current.route,\n            transaction.previous.route\n        );\n        this.errorMessage = null;\n    }\n\n    // Get some XHR data before the subscribers are notified of this navigation event.\n    getData(transaction) {\n        return getData(transaction.current.route.id).then(data => doSomething(data));\n    }\n\n    // Show navigation errors to the user.\n    showError(e) {\n        this.errorMessage = `There was a problem during navigation: ${e.message}`;\n    }\n}\n```\n\n#### Root router and `webruntime-router` relationship\n\nWhen a child router is added, there are two navigation context providers present in the application. Consider a root router with these properties:\n\n```js\nbasePath: '/lightning';\nroutes: [\n    {\n        id: 'app',\n        path: '/app/:appName',\n        exact: false, // This allows the child router at this route definition\n    },\n];\n```\n\na child router with:\n\n```js\nbasePath: '';\nroutes: [\n    {\n        id: 'page',\n        path: '/page/:name',\n    },\n];\n```\n\nand a URL like this:\n`/lightning/app/cat+app/page/siamese?cute=yes`\n\nA successful navigation event looks like this:\n\n1. A navigation event is detected, and the `preNavigate` hooks are fired from root -> leaf router node.\n2. The root router matches the first 3 segments of the path and produces this route:\n\n```json\n{\n    \"id\": \"app\",\n    \"attributes\": {\n        \"appName\": \"cat app\"\n    },\n    \"state\": {\n        \"cute\": \"yes\"\n    }\n}\n```\n\n3. The route is sent to the subscribers of the root router navigation context.\n4. The root router delegates to the child router by sending it the absolute path of the URL.\n5. The child router matches the last 2 segments of the path and produces this route:\n\n```json\n{\n    \"id\": \"page\",\n    \"attributes\": {\n        \"name\": \"siamese\"\n    },\n    \"state\": {\n        \"cute\": \"yes\"\n    }\n}\n```\n\n6. The `postNavigate` hooks are fired on the **root** and its subscribers are notified.\n7. The `postNavigate` hooks are fired on the **child** and its subscribers are notified.\n\n_Note_: Subscribers receive different data depending on their navigation context, provided by the closest ancestor router.\n\n## Using Router Views\n\nThe LWR Routing Service allows a lwc to be specified for each route definition. LWR also provides a component which automatically displays the lwc associated with each route. To use the Routing Service, add it to the `services` array in _webruntime-app.config.js_:\n\n```js\nconst { RoutingService } = require('@webruntime/navigation');\nmodule.exports = {\n    services: [RoutingService],\n};\n```\n\n### Setup route definitions\n\nCreate one or more JSON files in a LWR project to hold route defintion data:\n\n```\nprojectRoot\n├── routes/\n│   └── cooking.json    // route set id = \"cooking\"\n│   └── child.json      // route set id = \"child\"\n```\n\n_Note_: Multiple files are created to support [nested routers](#nesting-routers).\n\nEach file holds a \"route set\" with an ID matching the filename. The route set JSON looks like this:\n\n```json\n{\n    \"home\": {\n        \"path\": \"/\",\n        \"component\": \"x/home\"\n    },\n    \"recipe\": {\n        \"path\": \"/recipes/:title\",\n        \"component\": \"x/recipeItem\"\n    }\n}\n```\n\n_Note_: The route definition IDs are keys in this object. This automatically supports ID uniqueness across the route set.\n\n### Generate a router\n\nThe LWR Routing Service generates a router component, given a route set ID:\n\n```html\n<!-- x/app template -->\n<template>\n    <!-- Add a router to the application template\n         This router receives the data from cooking.json above -->\n    <webruntime-router-cooking></webruntime-router-cooking>\n</template>\n```\n\nThe `webruntime-router-{setID}` components support the same properties and events as the [`webruntime-router`](#webruntime-router) component, besides `routes` which is passed automatically given the route set ID.\n\n### Add a router outlet\n\nThe [route sets](#setup-route-definitions) contain a component for each route definition. Add a `webruntime-outlet` component under a router to automatically display the component on route change:\n\n```html\n<!-- x/app template -->\n<template>\n    <!-- Add a router to the application template\n         This router receives the data from cooking.json above -->\n    <webruntime-router-cooking>\n        <!-- Add an outlet as a child to the router\n             This renders the current component view -->\n        <webruntime-outlet>\n            <span slot=\"error\">\n                <x-error></x-error>\n            </span>\n            <span slot=\"404\">\n                <x-404></x-404>\n            </span>\n        </webruntime-outlet>\n    </webruntime-router-cooking>\n</template>\n```\n\nThe `webruntime-outlet` component contains:\n\n-   slots:\n    -   \"error\": Shows when there is an error loading the component for the route.\n    -   \"404\": Shows when the component could not be resolved.\n-   properties:\n    -   `refocus-off`: The outlet automatically puts [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus) on the component when it is loaded, for accessibility. To turn this feature off, add the `refocus-off` property to `webruntime-outlet`\n\nThe attributes for the current route are automatically passed into the corresponding component as public properties (`@api`). Given this route:\n\n```json\n{\n    \"id\": \"recipe\",\n    \"attributes\": {\n        \"title\": \"bread\"\n    }\n}\n```\n\nand the \"x/recipeItem\" component:\n\n```js\nimport { LightningElement, api } from 'lwc';\nexport default class XRecipeItem extends LightningElement {\n    @api title;\n}\n```\n\nthe router outlet would pass in \"bread\" for the title property:\n\n```html\n<x-recipe-item title=\"bread\"></x-recipe-item>\n```\n\n## Lightning Navigation\n\nThe `webruntime/lightningNavigation` package provides implementations for the `NavigationMixin` and `CurrentPageReference` wire adapter from [lightning/navigation](http://component-library-dev.herokuapp.com/docs/component-library/bundle/lightning-navigation/documentation).\n\n```js\nimport { NavigationMixin, CurrentPageReference } from 'webruntime/lightningNavigation';\n```\n\n### `CurrentPageReference`\n\nA [wire adapter](https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.data_wire_service_about) that gives a component access to the current page reference (relative to its navigation context).\n\n### `NavigationMixin`\n\nA JavaScript class mixin that provides functions to navigate or generate a URL:\n\n-   `this[NavigationMixin.Navigate](url | pageRef)`: Programmatically navigate to a string URL or page reference.\n-   `this[NavigationMixin.GenerateUrl](pageRef) => Promise<string>`: Translate a page reference into an absolute path.\n\n### Usage examples\n\n#### `NavigationMixin` and `CurrentPageReference`\n\nThis example is analogous to the [`webruntime/navigation` API example](#using-the-webruntimenavigation-apis).\n\n```js\nimport { wire, LightningElement } from 'lwc';\nimport { NavigationMixin, CurrentPageReference } from 'webruntime/lightningNavigation';\n\nconst aPageRef = {\n    type: 'page',\n    attributes: {\n        name: 'sample',\n    },\n};\n\nexport default class Example extends NavigationMixin(LightningElement) {\n    // Subscribe to updates on the current state.\n    @wire(CurrentPageReference)\n    currentPageRef;\n\n    // Use the current page reference.\n    @track\n    get name() {\n        return this.currentPageRef ? this.currentPageRef.attributes.name : '';\n    }\n\n    // Navigate by URL.\n    navUrl() {\n        this[NavigationMixin.Navigate]('/some/path');\n    }\n\n    // Navigate by page reference.\n    navPageRef() {\n        this[NavigationMixin.Navigate](aPageRef);\n    }\n\n    // Generate a URL.\n    getUrl() {\n        this[NavigationMixin.GenerateUrl](aPageRef).then(url => console.log(url));\n    }\n}\n```\n\n## Advanced topics\n\n### `provideContext()`\n\n`provideContext(context, node)`\n\nUsing the [`createRouter()`](#createrouter) API will create a `Router` with navigation context automatically. To create custom navigation context, call the `provideContext()` API with the following arguments:\n\n-   `context`: The provided context must have exactly these properties:\n    -   `navigate`: An implementation of the [`navigate()`](#navigate) function.\n    -   `generateUrl`: An implementation of the [`generateUrl()`](#generateurl) function.\n    -   `subscribe`: An implementation of the [`subscribe()`](#subscribe) function.\n\nAn object is returned containing these properties:\n\n-   `id`: An identifier for the navigation context. This is the value returned over the [`NavigationContext`](#navigationcontext) wire adapter.\n-   `update(value)`: Update the `context` object to a new value. Subscribers will be updated with the new API implementations.\n-   `disconnect()`: Stop the navigation context from being detected by descendant components.\n\n### Hardcoding context\n\nIn a case where an application only has one router, the application developers can consider providing their users with Navigation APIs which are locked to the single navigation context. Then users do not need to pull in the navigation context themselves.\n\n```js\nimport {\n    navigate as webruntimeNavigate,\n    generateUrl as webruntimeGenerateUrl,\n    subscribe as webruntimeSubscribe,\n    createRouter\n} from 'webruntime/navigation';\n\n// Create and start the router.\nconst router = createRouter({...});\n\n// Navigate programmatically.\nexport function navigate(loc, options) {\n    webruntimeNavigate(router.id, loc, options);\n}\n\n// Generate a URL for the given route.\nexport function generateUrl(route) {\n    return webruntimeGenerateUrl(router.id, route);\n}\n\n// Subscribe to navigation state changes.\nexport function subscribe(callback) {\n    webruntimeSubscribe(router.id, callback);\n}\n```\n\n## Setup\n\n### Install\n\n```bash\nyarn add @webruntime/navigation\n```\n\n### Build\n\nBuild tasks can be run in this repository from the **/packages/@webruntime/navigation** directory with:\n\n```bash\nyarn clean\nyarn build\n```\n\n### Tests\n\nTest tasks can be run in this repository from the **/packages/@webruntime/navigation** directory with:\n\n```bash\nyarn test     // run jest tests\nyarn coverage // test with coverage output\nyarn lint     // lint the code\n```\n\n## Architecture\n\n### Static analysis\n\nA routing goal is to be able to statically analyze by URL path. Meaning, the code needed to display a component/view/page for a given path can be known ahead of runtime. Route definitions should contain the metadata needed for a builder plugin to do the analysis. A different builder plugin is written to analyze different styles of route definition metadata. Example route definitions:\n\n-   Basic id-based routing:\n\n```json\n{\n    \"id\": \"home\",\n    \"path\": \"/home\",\n    \"component\": \"our-home\"\n}\n```\n\n-   Lightning Navigation page-based:\n\n```json\n{\n    \"path\": \"/case/:recordId\",\n    \"page\": {\n        \"type\": \"standard__recordPage\",\n        \"attributes\": {\n            \"objectApiName\": \"Case\"\n        }\n    }\n}\n```\n\n-   Webruntime view-based, with Lightning Navigation support:\n\n```json\n{\n    \"id\": \"path-detail\",\n    \"path\": \"/case/:recordId\",\n    \"view\": \"caseDetail\",\n    \"label\": \"Case Detail\",\n    \"page\": {\n        \"type\": \"standard__recordPage\",\n        \"attributes\": {\n            \"objectApiName\": \"Case\"\n        }\n    }\n}\n```\n\n### Route definition matching\n\nMatching a route to a route definition is relatively straight forward, since the `id`s are unique. Here is the criteria:\n\n-   `route.id === routeDef.id`\n-   each non-optional parameterized path segment (e.g.: `/:recordId`) in the route definition `path`, must match a key in the route `attributes`\n\nHere is an example:\n\n```json\n// route definition\n{\n    \"id\": \"home\",\n    \"path\": \"/app/:appName\"\n}\n// matching route\n{\n    \"id\": \"home\",\n    \"attributes\": {\n        \"appName\": \"awesome\"\n    }\n}\n// NOT matching route\n{\n    \"id\": \"home\"\n}\n```\n\nMatching a page reference is more complex. Here is the criteria:\n\n-   `pageRef.type === routeDef.page.type`\n-   each non-optional parameterized path segment (e.g.: `/:recordId`) in the route definition `path`, must match a key in the page reference `attributes`\n-   each key/value pair in the route definition `page.attributes`, must match a key/value pair in the page reference `attributes`\n-   if there is more than 1 route definition match for a page reference, pick the first one\n\nHere are some examples:\n\n-   simplest case, no `attributes`:\n\n```json\n// page reference\n{\n    \"type\": \"home\"\n}\n// matching route definition\n{\n    \"path\": \"/home\",\n    \"page\": {\n        \"type\": \"home\"\n    }\n}\n// NOT matching route definition\n{\n    \"path\": \"/old/home\",\n    \"page\": {\n        \"type\": \"home\"\n    }\n}\n```\n\n-   route definition with parameterized `path`:\n\n```json\n// page reference\n{\n    \"type\": \"standard__recordPage\",\n    \"attributes\": {\n        \"recordId\": \"0D50M00004NgNxtSAF\"\n    }\n}\n// matching route definition\n{\n    \"path\": \"/record/:recordId\",\n    \"page\": {\n        \"type\": \"standard__recordPage\"\n    }\n}\n```\n\n-   route definition with parameterized `path` containing optional parameters:\n\n```json\n// page reference\n{\n    \"type\": \"standard__recordPage\",\n    \"attributes\": {\n        \"recordId\": \"0D50M00004NgNxtSAF\"\n    }\n}\n// matching route definition\n{\n    \"path\": \"/record/:recordId/:recordName?\",\n    \"page\": {\n        \"type\": \"standard__recordPage\"\n    }\n}\n```\n\n-   route definition has `page.attributes`:\n\n```json\n// page reference\n{\n    \"type\": \"standard__objectPage\",\n    \"attributes\": {\n        \"objectApiName\": \"Case\"\n    }\n}\n// matching route definition\n{\n    \"path\": \"/cases\",\n    \"page\": {\n        \"type\": \"standard__objectPage\",\n        \"attributes\": {\n            \"objectApiName\": \"Case\"\n        }\n    }\n}\n```\n\n-   route definition has both a parameterized `path` and `page.attributes`:\n\n```json\n// page reference\n{\n    \"type\": \"standard__recordPage\",\n    \"attributes\": {\n        \"objectApiName\": \"Case\",\n        \"recordId\": \"0D50M00004NgNxtSAF\"\n    }\n}\n// matching route definition\n{\n    \"path\": \"/case/:recordId\",\n    \"page\": {\n        \"type\": \"standard__recordPage\",\n        \"attributes\": {\n            \"objectApiName\": \"Case\"\n        }\n    }\n}\n```\n\n### Diagrams\n\nProgrammatic navigation events flow up from their source node through each navigation context. If not stopped, they eventually reach the root router, which processes the event.\n\nThe URL is then parsed starting at the root router and flowing down through any child routers. First the `preNavigate` hook listeners are run, from root to leaf. If all return true, the `postNavigate` hook listeners are run, then each router hydrates their subscribers with a new route/page reference.\n\n![navigation event flow diagram](./doc/nav_flow.png?raw=true)\n",
    "licenseText": "MIT LICENSE\n\nCopyright (c) 2019, Salesforce.com, Inc.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@webruntime/navigation/-/navigation-0.30.12.tgz#7d6c503451a7e833f7212ebfa0f614f0069da750",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@webruntime/navigation/-/navigation-0.30.12.tgz",
    "hash": "7d6c503451a7e833f7212ebfa0f614f0069da750",
    "integrity": "sha512-8m+taaBzPW68BUhmSBcTA/hn2yxyKyo+Q3tt98/vk2hv1J8cfKGM2fYeTo9GAdbMgUc5rpXlmaFF2dTO16TvkA==",
    "registry": "npm",
    "packageName": "@webruntime/navigation",
    "cacheIntegrity": "sha512-8m+taaBzPW68BUhmSBcTA/hn2yxyKyo+Q3tt98/vk2hv1J8cfKGM2fYeTo9GAdbMgUc5rpXlmaFF2dTO16TvkA== sha1-fWxQNFGn6DP3IS6/oPYU8Aadp1A="
  },
  "registry": "npm",
  "hash": "7d6c503451a7e833f7212ebfa0f614f0069da750"
}
"use strict";
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@webruntime/api");
const compiler_1 = require("@webruntime/compiler");
exports.WEBRUNTIME_NAMESPACE = 'webruntime';
exports.NAVIGATION_NAMESPACE = 'navigation';
/**
 * Create a request service response with the given data.
 *
 * @param specifier - Bare specifier that was requested
 * @param compilerInput - Object to pass to the compiler
 */
async function createRequestOutput(specifier, compilerInput) {
    const { result, metadata, success, diagnostics } = await compiler_1.compile(compilerInput);
    return {
        type: api_1.RequestOutputTypes.COMPONENT,
        specifier,
        resource: result,
        metadata: metadata,
        success,
        diagnostics,
    };
}
exports.createRequestOutput = createRequestOutput;
/**
 * Create an error diagnostic for the given message.
 *
 * @param specifier - Bare specifier that failed somehow
 * @param message - Error message
 */
function createErrorDiagnostic(specifier, message) {
    return {
        type: api_1.RequestOutputTypes.JSON,
        specifier,
        success: false,
        diagnostics: [{ code: 4999, message, level: 1 }],
    };
}
exports.createErrorDiagnostic = createErrorDiagnostic;
/**
 * Convert a bare specifier or camel case string to an HTML-friendly DOM/property name.
 * @example "sample/app" => "sample-app"
 * @example "sample/listItem" => "sample-list-item"
 *
 * @param str
 */
function toElementName(str) {
    return str.replace(/\//g, '-').replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);
}
exports.toElementName = toElementName;
/**
 * Create a class name out of a namespace and an id
 * @example ('webruntimeView', 'default') => 'WebruntimeViewDefault'
 *
 * @param namespace
 * @param id
 */
function toClassName(namespace, id) {
    const upperCaseFirstChar = (s) => (s.length ? s.replace(/^./, s[0].toUpperCase()) : '');
    return `${upperCaseFirstChar(namespace)}${upperCaseFirstChar(id)}`;
}
exports.toClassName = toClassName;
//# sourceMappingURL=utils.js.map
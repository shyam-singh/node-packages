/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import {
    NavigationContext,
    getNavigationContext,
    provideContext,
} from 'webruntime_navigation/navigationContext';
import { createRouter } from 'webruntime_navigation/navigationService';
/**
 * Navigate programmatically.
 * The Promise used within is deliberately not returned.
 *
 * @param {HTMLElement} context - The navigation context
 * @param {object | string} loc - A route or URL for navigating
 * @param {*} options - Usually a boolean; when true the previous browser history
 *              entry should be replaced by this one
 */
export function navigate(context, loc, options) {
    const api = getNavigationContext(context);
    api.navigate(loc, options);
}

/**
 * Generate a URL for the given route.
 *
 * @param {HTMLElement} context - The navigation context
 * @param {object} route - A route
 *
 * @returns {Promise<string>}
 */
export function generateUrl(context, route) {
    const api = getNavigationContext(context);
    return api.generateUrl(route);
}

/**
 * Subscribe to navigation state changes.
 *
 * @param {HTMLElement} context - The navigation context
 * @param {function} callback - A callback function invoked when the navigation state changes
 *                     callback(route, routeDef)
 * @param {boolean} replay - Flag to determine if callback should be called with current route and data immediately
 */
export function subscribe(context, callback, replay = true) {
    const api = getNavigationContext(context);
    return api.subscribe(callback, replay);
}

export { NavigationContext, provideContext, createRouter };

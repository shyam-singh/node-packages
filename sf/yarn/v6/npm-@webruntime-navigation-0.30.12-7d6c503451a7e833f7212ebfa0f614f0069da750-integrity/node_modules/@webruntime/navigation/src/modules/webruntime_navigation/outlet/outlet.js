import { LightningElement, api, track, wire } from 'lwc';
import { NavigationContext, subscribe } from 'webruntime_navigation/navigation';
import { getNavigationData } from 'webruntime_navigation/navigationContext';
import { invariant, messages } from 'webruntime_navigation/utils';

export default class WebruntimeView extends LightningElement {
    @api refocusOff = false;
    @track viewCtor = undefined;
    @track hasError = false;
    @track has404 = false;
    currentId = null;
    routingData = [];

    // Get a reference to the navigation context.
    @wire(NavigationContext)
    navContext;

    connectedCallback() {
        // Get the generated route definitions from the nearest router.
        this.routingData = getNavigationData(this.navContext);

        // Subscribe to updates on the current state.
        this.subscription = subscribe(this.navContext, ({ id }) => {
            this.hasError = false;
            this.has404 = false;
            this.renderComponent(id);
        });
    }

    async renderComponent(id) {
        // Skip re-rendering if it's the same id.
        if (id && id === this.currentId) {
            return;
        }

        // Show an error if the generated view component was not resolved.
        // Example view property: async () => await import('webruntimeView/<set ID>.<route ID>')
        const data = (id && this.routingData.find(r => r.id === id)) || {};
        const view = data.view;
        if (!id || !view) {
            this.has404 = true;
            // eslint-disable-next-line no-console
            console.error(`404: Cannot find a view for route with id "${id}"`);
            return;
        }

        // Load the generated view component.
        try {
            const { default: viewCtor } = await view();
            invariant(typeof viewCtor === 'function', messages.MISSING_ROUTE_CMP);
            this.viewCtor = viewCtor;
            this.currentId = id;
            this.refocus();
        } catch (e) {
            // eslint-disable-next-line no-console
            console.error(`Error loading page contents: "${e.message || e}"`);
            this.hasError = true;
        }
    }

    refocus() {
        // If the feature is not turned off, put the browser focus onto the dynamic content.
        // This is done after a route change for accessibility.
        if (!this.refocusOff) {
            this.template.querySelector(`div[role='region']`).focus();
        }
    }

    // Unsubscribe from route changes.
    disconnectedCallback() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}

/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { ValueChangedEvent, register } from 'wire-service';
import {
    getNavigationContext,
    getNavigationContextId,
    getNavigationData,
    provideContext,
} from './navContextService';

/**
 * Services @wire(NavigationContext) requests.
 * Hooks up to an Observable from the current navigation context.
 *
 * @param {*} NavigationContext - Wire name
 * @param {WireEventTarget} target - Component target to listen to the wire
 */
const NavigationContext = () => {
    throw new Error('Imperative use is not supported. Use @wire(NavigationContext)');
};

register(NavigationContext, target => {
    // Invoked when a component is connected.
    // Dispatch an event to find the closest navigation context.
    target.addEventListener('connect', () => {
        // Return the context ID as the wire value.
        // Do not expose the actual navigation API.
        target.dispatchEvent(new ValueChangedEvent(getNavigationContextId(target, true)));
    });

    // There is no 'disconnect' listener because the value of this wire never changes/updates.
});

export {
    provideContext,
    getNavigationContext,
    getNavigationContextId,
    getNavigationData,
    NavigationContext,
};

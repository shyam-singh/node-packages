{
  "manifest": {
    "name": "line-column",
    "version": "1.0.2",
    "description": "Convert efficiently index to/from line-column in a string",
    "author": {
      "name": "IRIDE Monad",
      "email": "iride.monad@gmail.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/io-monad/line-column.git"
    },
    "homepage": "https://github.com/io-monad/line-column",
    "bugs": {
      "url": "https://github.com/io-monad/line-column/issues"
    },
    "keywords": [
      "string",
      "index",
      "line",
      "column",
      "linecol",
      "position"
    ],
    "main": "lib/line-column.js",
    "files": [
      "lib"
    ],
    "scripts": {
      "test": "gulp test",
      "watch": "gulp watch",
      "benchmark": "node benchmark/benchmark.js"
    },
    "devDependencies": {
      "benchmark": "^2.1.0",
      "find-line-column": "^0.5.2",
      "gulp": "^3.9.1",
      "gulp-coveralls": "^0.1.4",
      "gulp-istanbul": "^0.10.3",
      "gulp-mocha": "^2.2.0",
      "gulp-plumber": "^1.1.0",
      "intelli-espower-loader": "^1.0.1",
      "istanbul": "^0.4.2",
      "mocha": "^2.4.5",
      "power-assert": "^1.3.1"
    },
    "dependencies": {
      "isarray": "^1.0.0",
      "isobject": "^2.0.0"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-line-column-1.0.2-d25af2936b6f4849172b312e4792d1d987bc34a2-integrity\\node_modules\\line-column\\package.json",
    "readmeFilename": "README.md",
    "readme": "# line-column\n\n[![Build Status](https://travis-ci.org/io-monad/line-column.svg?branch=master)](https://travis-ci.org/io-monad/line-column) [![Coverage Status](https://coveralls.io/repos/github/io-monad/line-column/badge.svg?branch=master)](https://coveralls.io/github/io-monad/line-column?branch=master) [![npm version](https://badge.fury.io/js/line-column.svg)](https://badge.fury.io/js/line-column)\n\nNode module to convert efficiently index to/from line-column in a string.\n\n## Install\n\n    npm install line-column\n\n## Usage\n\n### lineColumn(str, options = {})\n\nReturns a `LineColumnFinder` instance for given string `str`.\n\n#### Options\n\n| Key     | Description | Default |\n| ------- | ----------- | ------- |\n| `origin`  | The origin value of line number and column number | `1` |\n\n### lineColumn(str, index)\n\nThis is just a shorthand for `lineColumn(str).fromIndex(index)`.\n\n### LineColumnFinder#fromIndex(index)\n\nFind line and column from index in the string.\n\nParameters:\n\n- `index` - `number` Index in the string. (0-origin)\n\nReturns:\n\n- `{ line: x, col: y }` Found line number and column number.\n- `null` if the given index is out of range.\n\n### LineColumnFinder#toIndex(line, column)\n\nFind index from line and column in the string.\n\nParameters:\n\n- `line` - `number` Line number in the string.\n- `column` - `number` Column number in the string.\n\nor\n\n- `{ line: x, col: y }` - `Object` line and column numbers in the string.<br>A key name `column` can be used instead of `col`.\n\nor\n\n- `[ line, col ]` - `Array` line and column numbers in the string.\n\nReturns:\n\n- `number` Found index in the string.\n- `-1` if the given line or column is out of range.\n\n## Example\n\n```js\nvar lineColumn = require(\"line-column\");\n\nvar testString = [\n  \"ABCDEFG\\n\",         // line:0, index:0\n  \"HIJKLMNOPQRSTU\\n\",  // line:1, index:8\n  \"VWXYZ\\n\",           // line:2, index:23\n  \"日本語の文字\\n\",    // line:3, index:29\n  \"English words\"      // line:4, index:36\n].join(\"\");            // length:49\n\nlineColumn(testString).fromIndex(3)   // { line: 1, col: 4 }\nlineColumn(testString).fromIndex(33)  // { line: 4, col: 5 }\nlineColumn(testString).toIndex(1, 4)  // 3\nlineColumn(testString).toIndex(4, 5)  // 33\n\n// Shorthand of .fromIndex (compatible with find-line-column)\nlineColumn(testString, 33)            // { line:4, col: 5 }\n\n// Object or Array is also acceptable\nlineColumn(testString).toIndex({ line: 4, col: 5 })     // 33\nlineColumn(testString).toIndex({ line: 4, column: 5 })  // 33\nlineColumn(testString).toIndex([4, 5])                  // 33\n\n// You can cache it for the same string. It is so efficient. (See benchmark)\nvar finder = lineColumn(testString);\n\nfinder.fromIndex(33)     // { line: 4, column: 5 }\nfinder.toIndex(4, 5)     // 33\n\n// For 0-origin line and column numbers\nvar oneOrigin = lineColumn(testString, { origin: 0 });\n\noneOrigin.fromIndex(33)  // { line: 3, column: 4 }\noneOrigin.toIndex(3, 4)  // 33\n```\n\n## Testing\n\n    npm test\n\n## Benchmark\n\nThe popular package [find-line-column](https://www.npmjs.com/package/find-line-column) provides the same \"index to line-column\" feature.\n\nHere is some benchmarking on `line-column` vs `find-line-column`. You can run this benchmark by `npm run benchmark`. See [benchmark/](benchmark/) for the source code.\n\n```\nlong text  + line-column (not cached) x     72,989 ops/sec ±0.83% (89 runs sampled)\nlong text  + line-column (cached)     x 13,074,242 ops/sec ±0.32% (89 runs sampled)\nlong text  + find-line-column         x     33,887 ops/sec ±0.54% (84 runs sampled)\nshort text + line-column (not cached) x  1,636,766 ops/sec ±0.77% (82 runs sampled)\nshort text + line-column (cached)     x 21,699,686 ops/sec ±1.04% (82 runs sampled)\nshort text + find-line-column         x    382,145 ops/sec ±1.04% (85 runs sampled)\n```\n\nAs you might have noticed, even not cached version of `line-column` is 2x - 4x faster than `find-line-column`, and cached version of `line-column` is remarkable 50x - 380x faster.\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## License\n\nMIT (See LICENSE)\n",
    "licenseText": "Copyright (c) 2016 IRIDE Monad <iride.monad@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/line-column/-/line-column-1.0.2.tgz#d25af2936b6f4849172b312e4792d1d987bc34a2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/line-column/-/line-column-1.0.2.tgz",
    "hash": "d25af2936b6f4849172b312e4792d1d987bc34a2",
    "integrity": "sha512-Ktrjk5noGYlHsVnYWh62FLVs4hTb8A3e+vucNZMgPeAOITdshMSgv4cCZQeRDjm7+goqmo6+liZwTXo+U3sVww==",
    "registry": "npm",
    "packageName": "line-column",
    "cacheIntegrity": "sha512-Ktrjk5noGYlHsVnYWh62FLVs4hTb8A3e+vucNZMgPeAOITdshMSgv4cCZQeRDjm7+goqmo6+liZwTXo+U3sVww== sha1-0lryk2tvSEkXKzEuR5LR2Ye8NKI="
  },
  "registry": "npm",
  "hash": "d25af2936b6f4849172b312e4792d1d987bc34a2"
}
/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { isElementVisible } from '../shared/utils';
import {
    clearSectionProxyChangesIfNeeded,
    isSection,
    updateProxyForSection,
} from '../shared/section-utils';
import { configureLabel } from '../shared/proxy-utils';
import {
    BASE_Z_INDEX,
    COMPONENT_LABEL_ATTRIBUTE_NAME,
    PROXY_LABEL_CLASS,
} from '../shared/constants';

function hoverProxyInitHandler({ element }) {
    // create a reusable hover proxy label element
    const label = document.createElement('div');
    label.classList.add(PROXY_LABEL_CLASS);
    Object.assign(label.style, {
        position: 'absolute',
        padding: '0 10px',
        'background-color': '#0069c6',
        color: 'white',
        height: '26px',
        'user-select': 'none',
        'border-radius': '3px 3px 0 0',
        display: 'flex',
        'align-items': 'center',
        'justify-content': 'center',
    });
    element.appendChild(label);
}

function hoverProxyEnableHandler({ element, params, postMessageManager }) {
    const component = params.payload.element;
    const rect = component.element.getBoundingClientRect();

    const style = {
        display: '',
        width: `${rect.width}px`,
        height: `${rect.height}px`,
        'box-shadow': '0 0 0 2px #0069c6',
        position: 'absolute',
        top: `${window.scrollY + rect.top}px`,
        left: `${window.scrollX + rect.left}px`,
        zIndex: BASE_Z_INDEX + 1,
    };

    Object.assign(element.style, style);

    if (isElementVisible(element) && isElementVisible(component.element)) {
        const label = element.querySelector(`.${PROXY_LABEL_CLASS}`);

        // for sections, we hide the label and add the click-to-add buttons
        if (isSection(component.element)) {
            updateProxyForSection(element, component.element, postMessageManager);
        } else {
            configureLabel(label, component.element.getAttribute(COMPONENT_LABEL_ATTRIBUTE_NAME));
            clearSectionProxyChangesIfNeeded(element);
        }
    }
}

function hoverProxyDisableHandler({ element }) {
    element.style.display = 'none';
    clearSectionProxyChangesIfNeeded(element);
}

export { hoverProxyDisableHandler, hoverProxyEnableHandler, hoverProxyInitHandler };

/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { LightningElement, api, track } from 'lwc';
import componentService from 'webruntimedesign/componentService';

export default class ComponentWrapper extends LightningElement {
    @api componentId;
    @api label;
    @api componentName;
    @api isLocked = false;
    @api componentAttributes;

    @track generatedTemplate;

    childComponentAttached = false;

    async renderedCallback() {
        await this.createChildComponentIfNotPresent();
    }

    async createChildComponentIfNotPresent() {
        if (this.childComponentAttached) {
            return;
        }

        // Fetch the generated component
        const generated = await componentService.generateComponent(this.componentId);
        this.generatedTemplate = generated;

        this.childComponentAttached = true;
    }

    async disconnectedCallback() {
        await this.destroyChildComponentIfPresent();
    }

    async destroyChildComponentIfPresent() {
        if (!this.childComponentAttached) {
            return;
        }

        // re-render without attached generated component
        this.generatedTemplate = null;
        this.childComponentAttached = false;
    }
}

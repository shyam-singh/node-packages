/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { Interactions, config as defaultConfig } from '../lbf/interactions';
import { handleStateChange } from './shared/rich-text-editor-utils';
import { startDocumentListeners } from './listeners/document-listeners';
import {
    startPostMessageListeners,
    startPostMessageManager,
} from './listeners/postmessage-listeners';
import { startRouteListeners } from './listeners/route-listeners';
import { startWindowListeners } from './listeners/window-listeners';
import { regionDisableHandler, regionEnableHandler } from './handlers/region-handlers';
import { componentDisableHandler, componentEnableHandler } from './handlers/component-handlers';
import {
    selectProxyDisableHandler,
    selectProxyEnableHandler,
    selectProxyInitHandler,
} from './handlers/select-proxy-handlers';
import {
    hoverProxyDisableHandler,
    hoverProxyEnableHandler,
    hoverProxyInitHandler,
} from './handlers/hover-proxy-handlers';
import { dragProxyDisableHandler, dragProxyEnableHandler } from './handlers/drag-proxy-handlers';
import {
    dropTargetProxyDisableHandler,
    dropTargetProxyEnableHandler,
    dropTargetProxyInitHandler,
} from './handlers/drop-target-proxy-handlers';
import { dropEventHandler } from './handlers/drop-event-handler';
import {
    ELEMENT_ID_ATTRIBUTE_NAME,
    ELEMENT_WRAPPER_CLASS,
    POLLING_INTERVAL,
} from './shared/constants';
import interactionsManager from './interactionsManager';

/**
 * Observer for state
 * Gets triggered everytime there is a state change within @lbf/interactions
 */
function stateObserver({ prop, val, postMessageManager }) {
    handleStateChange(prop, postMessageManager);

    // when prop === 'current', this indicates a change to the currently selected interactions element
    // that is, either a new element has been selected, or the current element has been deselected
    if (prop === 'current') {
        if (val) {
            postMessageManager.sendPostmessage(window.parent, 'select-item', {
                id: val.key,
            });
        } else {
            postMessageManager.sendPostmessage(window.parent, 'unselect-element');
        }
    }
}

/**
 * Start the designmode
 */
function start() {
    const postMessageManager = startPostMessageManager();

    // inform the builder that the canvas has loaded
    postMessageManager.sendPostmessage(window.parent, 'live-loaded');

    const configuration = {
        ...defaultConfig,
        selectHandler: () => {}, // override to remove default behavior
        element: {
            ...defaultConfig.element,
            selector: `.${ELEMENT_WRAPPER_CLASS}`,
            key: el => el.getAttribute(ELEMENT_ID_ATTRIBUTE_NAME),
            handlers: {
                enable: ({ context }) => {
                    if (context.isContainer) {
                        regionEnableHandler(context);
                    } else {
                        componentEnableHandler(context);
                    }
                },
                disable: ({ context }) => {
                    if (context.isContainer) {
                        regionDisableHandler(context);
                    } else {
                        componentDisableHandler(context);
                    }
                },
            },
        },
        proxy: {
            ...defaultConfig.proxy,
            select: {
                init: ({ element }) => {
                    selectProxyInitHandler({ element, postMessageManager });
                },
                enable: ({ element, params }) => {
                    selectProxyEnableHandler({ element, params, postMessageManager });
                },
                disable: selectProxyDisableHandler,
            },
            drag: {
                enable: dragProxyEnableHandler,
                disable: dragProxyDisableHandler,
            },
            hover: {
                init: hoverProxyInitHandler,
                enable: ({ element, params }) => {
                    hoverProxyEnableHandler({ element, params, postMessageManager });
                },
                disable: hoverProxyDisableHandler,
            },
            dropTarget: {
                init: dropTargetProxyInitHandler,
                enable: dropTargetProxyEnableHandler,
                disable: dropTargetProxyDisableHandler,
            },
        },
        dropHandler: ({ element, position, container }) => {
            dropEventHandler({ element, position, container, postMessageManager });
        },
        stateObserver: (obj, prop, val) => {
            stateObserver({ prop, val, postMessageManager });
        },
    };

    // initialize @lbf/interactions
    const instance = new Interactions({
        key: 'webruntime',
        scope: document,
        selector: `.${ELEMENT_WRAPPER_CLASS}`,
        configuration: configuration,
    });

    interactionsManager.setInteractions(instance);

    // start polling
    instance.poll(POLLING_INTERVAL);

    // start all the listeners
    startRouteListeners(postMessageManager, instance);
    startWindowListeners(instance);
    startDocumentListeners(postMessageManager);
    startPostMessageListeners({
        postMessageManager,
        interactions: instance,
    });
}

export { start };

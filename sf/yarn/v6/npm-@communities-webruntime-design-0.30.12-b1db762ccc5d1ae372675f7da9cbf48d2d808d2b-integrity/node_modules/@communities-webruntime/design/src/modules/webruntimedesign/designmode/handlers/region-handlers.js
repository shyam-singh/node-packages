/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { updateRegionVisibility } from '../shared/utils';
import {
    REGION_LABEL_ATTRIBUTE_NAME,
    REGION_NAME_ATTRIBUTE_NAME,
    REGION_WRAPPER_MANUAL_CLASS,
} from '../shared/constants';

function regionEnableHandler({ element }) {
    // style region
    Object.assign(element.style, {
        border: '1px dashed #bbbbbb',
        margin: '20px',
        padding: '20px',
        'padding-bottom': '0',
        'min-height': '60px',
    });

    // clear manual DOM
    const manual = element.querySelector('.manual');
    while (manual.firstChild) {
        manual.removeChild(manual.firstChild);
    }

    // create region label element inside the manual DOM
    const label = document.createElement('div');
    Object.assign(label.style, {
        'text-align': 'center',
        'font-style': 'italic',
        color: '#667889',
    });
    // fallback to region name when region label is not available
    label.textContent =
        element.getAttribute(REGION_LABEL_ATTRIBUTE_NAME) ||
        element.getAttribute(REGION_NAME_ATTRIBUTE_NAME);
    manual.appendChild(label);

    // Update visibility based on children
    updateRegionVisibility(element);
}

function regionDisableHandler({ element }) {
    Object.assign(element.style, {
        border: '',
        margin: '',
        padding: '',
        'min-height': '',
    });

    // clear manual DOM
    const manual = element.querySelector(`.${REGION_WRAPPER_MANUAL_CLASS}`);
    while (manual.firstChild) {
        manual.removeChild(manual.firstChild);
    }
}

export { regionEnableHandler, regionDisableHandler };

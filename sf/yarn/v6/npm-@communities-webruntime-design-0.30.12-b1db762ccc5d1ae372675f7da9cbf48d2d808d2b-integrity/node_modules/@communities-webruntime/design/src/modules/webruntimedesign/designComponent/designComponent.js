import { LightningElement, api, track } from 'lwc';
import { subscribe } from 'webruntime/routingService';

export default class GeneratedComponent extends LightningElement {
    generated;

    routeParams = {};
    @track attributes;

    /**
     * Subscribe to route changes
     */
    async connectedCallback() {
        this.subscription = await subscribe(this.setRoute.bind(this));
    }

    /**
     * Sets route params attribute so attributes depending on it can resolve properly
     * Re-evaluates the component attributes on route change.
     */
    async setRoute({ attributes, state }, routeParams = {}, queryParams = {}) {
        this.routeParams = { ...attributes, ...state, ...queryParams, ...routeParams };
        // When route is set, re-evaluate the cmp attributes so that some may resolve
        this.evaluateAttributes();
    }

    @api
    get generatedTemplate() {
        return this.generated;
    }

    set generatedTemplate(generated) {
        this.generated = generated;
        this.html = generated.html;
        this.evaluateAttributes();
    }

    /**
     * If the generated attributes are available, we will bind them to this component
     * Otherwise, use an empty object
     */
    evaluateAttributes() {
        this.attributes =
            this.generated && this.generated.attributes ? this.generated.attributes(this) : {};
    }

    render() {
        return this.html;
    }

    disconnectedCallback() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}

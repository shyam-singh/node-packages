/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */


function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var StateService = function () {
  function StateService() {
    var observers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, StateService);

    this.observers = observers;
    this.state = observable({
      dragging: false,
      x: 0,
      y: 0,
      current: null,
      originExternal: false,
      originX: null,
      originY: null,
      enabled: true,
      proxiesEnabled: true
    }, this.observers);
  }

  _createClass(StateService, [{
    key: "registerObserver",
    value: function registerObserver(observer) {
      this.observers.push(observer);
    }
  }, {
    key: "getState",
    value: function getState() {
      return this.state;
    }
  }]);

  return StateService;
}();

function observable(object, observers) {
  var proxyHandler = {
    set: function set(obj, prop, val) {
      observers.forEach(function (observer) {
        observer(obj, prop, val);
      });

      if (typeof Reflect !== 'undefined' && typeof Reflect.set === 'function') {
        return Reflect.set(obj, prop, val);
      } else {
        obj[prop] = val;
        return true;
      }
    }
  };
  return new Proxy(object, proxyHandler);
}

var HandledCache = function () {
  function HandledCache() {
    _classCallCheck(this, HandledCache);

    this.cache = {};
  }

  _createClass(HandledCache, [{
    key: "add",
    value: function add(key, item, handler) {
      if (!this.cache[key]) {
        this.cache[key] = item;
        handler(key, item);
      }
    }
  }, {
    key: "invalidate",
    value: function invalidate(key) {
      delete this.cache[key];
    }
  }, {
    key: "invalidateAll",
    value: function invalidateAll() {
      delete this.cache;
      this.cache = {};
    }
  }, {
    key: "getAll",
    value: function getAll() {
      return Object.values(this.cache);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.cache[key];
    }
  }]);

  return HandledCache;
}();

function closest(el, selector) {
  if (el.matches && el.matches(selector)) {
    return el;
  }

  if (el.assignedSlot) {
    return closest(el.assignedSlot, selector);
  }

  if (el.parentElement) {
    return closest(el.parentElement, selector);
  }

  if (el.parentNode && el.parentNode.nodeType === 1) {
    return closest(el.parentNode, selector);
  } else if (el.parentNode && el.parentNode.nodeType === 11 && el.parentNode.host) {
    return closest(el.parentNode.host, selector);
  }

  return null;
}

function querySelectorAll(node, selector) {
  var result = [];
  var selected = node.querySelectorAll && node.querySelectorAll(selector);

  if (selected) {
    result = [].concat(_toConsumableArray(result), _toConsumableArray(selected));
  }

  var walker = document.createTreeWalker(node, NodeFilter.SHOW_ALL, null, false);

  do {
    var currentNode = walker.currentNode;

    if (currentNode.shadowRoot) {
      result = result.concat(querySelectorAll(currentNode.shadowRoot, selector));
    }
  } while (walker.nextNode());

  return result;
}

function querySelector(node, selector) {
  var walker = document.createTreeWalker(node);
  var result = node.querySelector && node.querySelector(selector);

  if (result) {
    return result;
  }

  do {
    var currentNode = walker.currentNode;

    if (currentNode.shadowRoot) {
      result = querySelector(currentNode.shadowRoot, selector);

      if (result) {
        return result;
      }
    }

    if (currentNode instanceof HTMLSlotElement) {
      var slotNodes = currentNode.assignedNodes();

      for (var i = 0; i < slotNodes.length; i++) {
        result = querySelector(slotNodes[i], selector);

        if (result) {
          return result;
        }
      }
    }
  } while (walker.nextNode() && !result);

  return null;
}

function isCoordInElement(element, x, y) {
  function between(value, min, max) {
    return value >= min && value <= max;
  }

  var coord = getElementCoords(element);
  return between(x, coord.minX, coord.maxX) && between(y, coord.minY, coord.maxY);
}

function calculateDropPosition(components, x, y, getComponentKey) {
  var dimensions = components.map(function (component) {
    var rect = component.getBoundingClientRect();
    return {
      x: rect.left,
      y: rect.top,
      width: rect.width,
      height: rect.height,
      beforeId: getComponentKey(component)
    };
  });
  return calculateDropPositionFromDimensions(dimensions, x, y);
}

function calculateDropPositionFromDimensions(dimensions, x, y) {
  var closestSlot = null;
  dimensions.forEach(function (dimension, index, componentsArray) {
    var topSlot = {
      x: dimension.x,
      y: dimension.y,
      width: dimension.width,
      beforeId: dimension.beforeId,
      position: 'top',
      distance: 0
    };
    var bottomSlot = {
      x: dimension.x,
      y: dimension.y + dimension.height,
      width: dimension.width,
      beforeId: '',
      position: 'bottom',
      distance: 0
    };
    topSlot.distance = Math.abs(topSlot.x - x) + Math.abs(topSlot.y - y);
    bottomSlot.distance = Math.abs(bottomSlot.x - x) + Math.abs(bottomSlot.y - y);
    var closerSlot;

    if (index !== componentsArray.length - 1) {
      closerSlot = topSlot;
    } else {
      closerSlot = topSlot.distance < bottomSlot.distance ? topSlot : bottomSlot;
    }

    closestSlot = closestSlot && closestSlot.distance < closerSlot.distance ? closestSlot : closerSlot;
  });
  return closestSlot;
}

function getChildElementsInContainer(container, elementSelector, containerSelector) {
  if (container.parentNode) {
    var wrapper = container.parentNode.toString() === '[object ShadowRoot]' ? container.parentNode.host : container;
    return querySelectorAll(wrapper, elementSelector).filter(function (cmp) {
      return closest(cmp, containerSelector) === container;
    });
  }

  return [];
}

function deepCloneNode(node) {
  var clone = node.cloneNode(false);
  var childNodes;

  if (node.shadowRoot) {
    childNodes = node.shadowRoot.children;
  } else {
    childNodes = node.children;
  }

  for (var i = 0; i < childNodes.length; i++) {
    clone.appendChild(deepCloneNode(childNodes[i]));
  }

  return clone;
}

function getElementCoords(element) {
  var rect = element.getBoundingClientRect();
  var minX = rect.left;
  var minY = rect.top;
  var maxX = minX + rect.width;
  var maxY = minY + rect.height;
  return {
    minX: minX,
    minY: minY,
    maxX: maxX,
    maxY: maxY
  };
}

function getClosestItemWithFilter(items, x, y, filter) {
  var found = items.filter(function (i) {
    return filter(i) && isCoordInElement(i.element, x, y);
  });

  if (found.length === 1) {
    return found[0];
  }

  if (found.length > 1) {
    return getInnerMostItem(found);
  }

  return null;
}

function getClosestItem(items, x, y) {
  return getClosestItemWithFilter(items, x, y, function (element) {
    return true;
  });
}

function getInnerMostItem(items) {
  var coordsArray = items.map(function (i) {
    return getElementCoords(i.element);
  });
  var idx = getInnerMostCoordsIdx(coordsArray);
  return items[idx];
}

function getInnerMostCoordsIdx(coordsArray) {
  var result = 0;
  var winner = coordsArray[result];

  for (var idx = 1; idx < coordsArray.length; ++idx) {
    var other = coordsArray[idx];

    if (isLeftInsideRightCoords(other, winner)) {
      winner = other;
      result = idx;
    }
  }

  return result;
}

function isLeftInsideRightCoords(left, right) {
  return left.minX >= right.minX && left.minY >= right.minY && left.maxX <= right.maxX && left.maxY <= right.maxY;
}

var InteractionsElement = function () {
  function InteractionsElement(element, config, domEventHandlers) {
    _classCallCheck(this, InteractionsElement);

    this.enabled = true;
    this.domEventHandlers = domEventHandlers;
    this.element = element;
    this.handlers = config.handlers;
    this.propertySelectors = config.propertySelectors;
    this.key = config.key(this.element);
    this.isContainer = false;
    this.isSelectable = false;
    this.isDeletable = false;
    this.isMovable = false;
    this.containsInteractionsElements = false;
    this.processProperties();
  }

  _createClass(InteractionsElement, [{
    key: "init",
    value: function init(enabled, elementState) {
      if (enabled) {
        this.enable(elementState);
      } else {
        this.disable();
      }
    }
  }, {
    key: "enable",
    value: function enable(elementState) {
      this.enabled = true;
      this.toggleDomEventHandlers();
      this.processHandlers('enable', {
        payload: elementState
      });
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.toggleDomEventHandlers();
      this.processHandlers('disable');
    }
  }, {
    key: "toggleDomEventHandlers",
    value: function toggleDomEventHandlers() {
      var _this = this;

      Object.keys(this.domEventHandlers).forEach(function (eventName) {
        if (_this.domEventHandlers[eventName]) {
          if (_this.enabled) {
            _this.element.addEventListener(eventName, _this.domEventHandlers[eventName]);
          } else {
            _this.element.removeEventListener(eventName, _this.domEventHandlers[eventName]);
          }
        }
      });
    }
  }, {
    key: "processProperties",
    value: function processProperties() {
      var _this2 = this;

      Object.keys(this.propertySelectors).forEach(function (propertyKey) {
        _this2[propertyKey] = _this2.element.matches(_this2.propertySelectors[propertyKey]);
      });

      if (querySelector(this.element, "".concat(this.propertySelectors.isSelectable, ",").concat(this.propertySelectors.isContainer))) {
        this.containsInteractionsElements = true;
      }
    }
  }, {
    key: "processHandlers",
    value: function processHandlers(method, params) {
      if (this.handlers && this.handlers[method]) {
        this.handlers[method]({
          context: this,
          params: params
        });
      }
    }
  }]);

  return InteractionsElement;
}();

var ElementService = function () {
  function ElementService(stateService, proxyService, config, selectHandler) {
    _classCallCheck(this, ElementService);

    this.selectHandler = selectHandler;
    this.selector = config.selector;
    this.cache = new HandledCache();
    this.stateService = stateService;
    this.proxyService = proxyService;
    this.config = config;
  }

  _createClass(ElementService, [{
    key: "scan",
    value: function scan(_ref) {
      var _this3 = this;

      var scope = _ref.scope;
      var cachedElements = this.cache.getAll();
      cachedElements.forEach(function (cachedElement) {
        if (!cachedElement.element.parentNode) {
          _this3.cache.invalidate(cachedElement.key);
        }
      });
      var elements = querySelectorAll(scope, this.selector);
      elements.forEach(function (element) {
        var interactionsElement = new InteractionsElement(element, _this3.config, {
          keypress: _this3.keypressHandler.bind(_this3),
          focus: _this3.focusHandler.bind(_this3)
        });

        _this3.cache.add(interactionsElement.key, interactionsElement, function (k, item) {
          interactionsElement.init(_this3.stateService.getState().enabled, {
            key: k,
            item: item
          });
        });
      });
    }
  }, {
    key: "getAll",
    value: function getAll() {
      return this.cache.getAll();
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.cache.get(key);
    }
  }, {
    key: "invalidate",
    value: function invalidate(key) {
      this.cache.invalidate(key);
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var _this4 = this;

      var found = this.cache.get(key);

      if (found) {
        var children = querySelectorAll(found.element, this.config.selector);
        children.map(function (el) {
          return _this4.config.key(el);
        }).forEach(function (innerKey) {
          if (innerKey) {
            _this4.invalidate(innerKey);
          }
        });
        found.element.remove();
        this.invalidate(key);
      }
    }
  }, {
    key: "invalidateAll",
    value: function invalidateAll() {
      return this.cache.invalidateAll();
    }
  }, {
    key: "enableAll",
    value: function enableAll(elementState) {
      this.cache.getAll().forEach(function (element) {
        return element.enable(elementState);
      });
    }
  }, {
    key: "disableAll",
    value: function disableAll() {
      this.cache.getAll().forEach(function (element) {
        return element.disable();
      });
    }
  }, {
    key: "findSelectableElementInCoord",
    value: function findSelectableElementInCoord(x, y) {
      return getClosestItemWithFilter(this.cache.getAll(), x, y, function (element) {
        return element.isSelectable;
      });
    }
  }, {
    key: "select",
    value: function select(key) {
      var interactionsElement = this.get(key);
      this.proxyService.select(interactionsElement);

      if (this.selectHandler) {
        this.selectHandler(interactionsElement);
      }
    }
  }, {
    key: "focusHandler",
    value: function focusHandler(event) {
      if (!event.target) return;
      var target = event.target;

      if (closest(target, this.proxyService.selector)) {
        return;
      }

      var el = closest(target, this.config.selector);

      if (el) {
        var interactionsElement = this.get(this.config.key(el));
        this.proxyService.focus(interactionsElement);
      }

      event.preventDefault();
      event.stopPropagation();
    }
  }, {
    key: "keypressHandler",
    value: function keypressHandler(event) {
      if (event.key === 'Enter' && event.target.matches(this.config.propertySelectors.isSelectable)) {
        this.select(this.config.key(event.target));
        event.preventDefault();
        event.stopPropagation();
      }
    }
  }]);

  return ElementService;
}();

var PROXY_SELECTOR = 'interactions-proxy';

var InteractionsProxy = function () {
  function InteractionsProxy(name, getProxyContainer, handlers) {
    _classCallCheck(this, InteractionsProxy);

    this.name = name;
    this.handlers = handlers;
    this.state = null;
    this.getProxyContainer = getProxyContainer;
    this.enabled = true;
    this.element = document.createElement('div');
    this.element.classList.add(PROXY_SELECTOR, "".concat(PROXY_SELECTOR, "-").concat(name));
    this.element.setAttribute('data-proxy-name', name);
    this.processHandlers('init');
  }

  _createClass(InteractionsProxy, [{
    key: "enable",
    value: function enable(proxyState) {
      this.enabled = true;
      this.state = proxyState;
      this.container = this.getProxyContainer(this.name, proxyState);

      if (this.container && !(this.element.parentNode === this.container)) {
        this.container.appendChild(this.element);
      }

      if (proxyState && proxyState.element && proxyState.element.containsInteractionsElements) {
        this.element.style.pointerEvents = 'none';
      }

      this.processHandlers('enable', {
        payload: proxyState,
        context: this
      });
    }
  }, {
    key: "disable",
    value: function disable() {
      if (this.container) {
        this.container.removeChild(this.element);
        this.container = undefined;
      }

      this.enabled = false;
      this.processHandlers('disable');
    }
  }, {
    key: "processHandlers",
    value: function processHandlers(method, params) {
      if (this.handlers && this.handlers[method]) {
        this.handlers[method]({
          key: this.name,
          element: this.element,
          params: params
        });
      }
    }
  }]);

  return InteractionsProxy;
}();

var ProxyService = function () {
  function ProxyService(key, config) {
    var _this = this;

    _classCallCheck(this, ProxyService);

    this.selector = PROXY_SELECTOR;
    this.key = key;
    this.proxies = {};
    Object.keys(config).forEach(function (proxyConfigKey) {
      _this.proxies[proxyConfigKey] = new InteractionsProxy(proxyConfigKey, config.getContainerOnEnable, config[proxyConfigKey]);
    });
  }

  _createClass(ProxyService, [{
    key: "enableAll",
    value: function enableAll(proxyState) {
      Object.values(this.proxies).forEach(function (proxy) {
        return proxy.enable(proxyState);
      });
    }
  }, {
    key: "disableAll",
    value: function disableAll() {
      Object.values(this.proxies).forEach(function (proxy) {
        return proxy.disable();
      });
    }
  }, {
    key: "focus",
    value: function focus(element) {
      this.proxies.hover.enable({
        element: element
      });
    }
  }, {
    key: "select",
    value: function select(element) {
      this.proxies.select.enable({
        element: element
      });
    }
  }]);

  return ProxyService;
}();

function updateHoverProxy(_ref) {
  var x = _ref.x,
      y = _ref.y,
      components = _ref.components,
      componentHoverProxy = _ref.componentHoverProxy,
      dragging = _ref.dragging,
      component = _ref.component,
      enabled = _ref.enabled;
  var found = getClosestItem(components, x, y);

  if (enabled && found && !dragging && component !== found) {
    componentHoverProxy.enable({
      element: found,
      x: x,
      y: y
    });
  } else {
    componentHoverProxy.disable();
  }
}

function updateSelectProxy(_ref2) {
  var component = _ref2.component,
      componentProxy = _ref2.componentProxy,
      enabled = _ref2.enabled;

  if (component && enabled) {
    componentProxy.enable({
      element: component
    });
  } else {
    componentProxy.disable();
  }
}

function updateDropTargetProxy(_ref3) {
  var x = _ref3.x,
      y = _ref3.y,
      regions = _ref3.regions,
      dropTargetProxy = _ref3.dropTargetProxy,
      dragging = _ref3.dragging,
      component = _ref3.component,
      enabled = _ref3.enabled,
      getComponentKey = _ref3.getComponentKey,
      elementSelector = _ref3.elementSelector,
      containerSelector = _ref3.containerSelector;

  if (enabled && dragging) {
    var foundRegion = getClosestItem(regions, x, y);

    if (foundRegion) {
      var components = getChildElementsInContainer(foundRegion.element, elementSelector, containerSelector);
      var position;

      if (components && components.length > 0) {
        position = calculateDropPosition(components, x, y, getComponentKey) || undefined;
      }

      dropTargetProxy.enable({
        position: position,
        x: x,
        y: y,
        container: foundRegion,
        element: component
      });
    } else {
      dropTargetProxy.disable();
    }
  } else {
    dropTargetProxy.disable();
  }
}

function updateDragProxy(_ref4) {
  var x = _ref4.x,
      y = _ref4.y,
      component = _ref4.component,
      dragging = _ref4.dragging,
      originExternal = _ref4.originExternal,
      componentCloneProxy = _ref4.componentCloneProxy,
      enabled = _ref4.enabled;

  if (enabled && dragging && !originExternal && component) {
    componentCloneProxy.enable({
      x: x,
      y: y,
      element: component
    });
  } else {
    componentCloneProxy.disable();
  }
}

function attachDocumentListeners(_ref) {
  var stateService = _ref.stateService,
      findElement = _ref.findElement,
      clickHandler = _ref.clickHandler,
      dropHandler = _ref.dropHandler,
      dragConfiguration = _ref.dragConfiguration;
  var dragStartDistance = dragConfiguration ? dragConfiguration.dragStartDistance : 20;
  document.addEventListener('mousemove', function (event) {
    var state = stateService.getState();

    if (!state.enabled) {
      return;
    }

    state.x = event.clientX;
    state.y = event.clientY;

    if (!isUndefinedOrNull(state.originX) && !isUndefinedOrNull(state.originY) && !state.dragging && state.current) {
      if (Math.abs(state.originX - state.x) + Math.abs(state.originY - state.y) > dragStartDistance) {
        state.dragging = true;
      }
    }

    if (state.dragging) {
      event.preventDefault();
    }
  });
  document.addEventListener('mouseup', function (event) {
    var state = stateService.getState();

    if (!state.enabled || !(event.button === 0)) {
      return;
    }

    state.x = event.clientX;
    state.y = event.clientY;

    if (state.current) {
      if (state.dragging) {
        dropHandler(state);
        state.current = null;
      } else {
        clickHandler(state);
      }
    }

    state.originX = null;
    state.originY = null;
    state.dragging = false;
  });
  document.addEventListener('mousedown', function (event) {
    var state = stateService.getState();

    if (!state.enabled || !(event.button === 0)) {
      return;
    }

    state.x = event.clientX;
    state.y = event.clientY;
    var found = findElement(state);

    if (found) {
      event.preventDefault();
      state.originX = state.x;
      state.originY = state.y;

      if (found !== state.current) {
        state.current = found;
      }
    } else {
      state.current = null;
    }
  });
}

function isUndefinedOrNull(object) {
  return typeof object === 'undefined' || object === null;
}

function attachWindowListeners(_ref) {
  var stateService = _ref.stateService;
  window.addEventListener('blur', function () {
    var state = stateService.getState();
    state.originX = null;
    state.originY = null;
  });
}

var Interactions = function () {
  function Interactions(_ref) {
    var _this = this;

    var key = _ref.key,
        scope = _ref.scope,
        configuration = _ref.configuration;

    _classCallCheck(this, Interactions);

    this.scope = scope;
    this.configuration = configuration;
    var _this$configuration = this.configuration,
        _dropHandler = _this$configuration.dropHandler,
        selectHandler = _this$configuration.selectHandler,
        stateObserver = _this$configuration.stateObserver;
    var observers = [function (obj, prop, val) {
      if (prop === 'x' || prop === 'y' || prop === 'dragging') {
        obj[prop] = val;

        _this.render(obj.x, obj.y);
      }
    }];

    if (stateObserver) {
      observers = [stateObserver.bind(this)].concat(_toConsumableArray(observers));
    }

    this.stateService = new StateService(observers);
    this.proxyService = new ProxyService(key, configuration.proxy);
    this.elementService = new ElementService(this.stateService, this.proxyService, this.configuration.element, selectHandler);
    this.scan();
    attachDocumentListeners({
      stateService: this.stateService,
      findElement: function findElement(state) {
        return _this.elementService.findSelectableElementInCoord(state.x, state.y);
      },
      dropHandler: function dropHandler() {
        if (_dropHandler) {
          _dropHandler(_this.proxyService.proxies.dropTarget ? _this.proxyService.proxies.dropTarget.state : null);
        }
      },
      clickHandler: function clickHandler(state) {
        if (selectHandler) {
          selectHandler(state.current);
        }
      },
      dragConfiguration: this.configuration.drag
    });
    attachWindowListeners({
      stateService: this.stateService
    });
  }

  _createClass(Interactions, [{
    key: "enable",
    value: function enable() {
      this.stateService.getState().enabled = true;
      this.elementService.enableAll();
    }
  }, {
    key: "disable",
    value: function disable() {
      this.stateService.getState().enabled = false;
      this.elementService.disableAll();
      this.proxyService.disableAll();
    }
  }, {
    key: "enableProxies",
    value: function enableProxies() {
      this.stateService.getState().proxiesEnabled = true;
    }
  }, {
    key: "disableProxies",
    value: function disableProxies() {
      this.stateService.getState().proxiesEnabled = false;
      this.proxyService.disableAll();
    }
  }, {
    key: "scan",
    value: function scan() {
      this.elementService.scan({
        scope: this.scope
      });
    }
  }, {
    key: "poll",
    value: function poll(interval) {
      var _this2 = this;

      setInterval(this.scan.bind(this), interval);
      setInterval(function () {
        var _this2$stateService$g = _this2.stateService.getState(),
            x = _this2$stateService$g.x,
            y = _this2$stateService$g.y;

        _this2.render(x, y);
      }, interval);
    }
  }, {
    key: "render",
    value: function render(x, y) {
      var _this$stateService$ge = this.stateService.getState(),
          current = _this$stateService$ge.current,
          dragging = _this$stateService$ge.dragging,
          enabled = _this$stateService$ge.enabled,
          proxiesEnabled = _this$stateService$ge.proxiesEnabled;

      var elements = this.elementService.getAll();

      if (proxiesEnabled) {
        updateHoverProxy({
          x: x,
          y: y,
          components: elements.filter(function (element) {
            return element.isSelectable;
          }),
          componentHoverProxy: this.proxyService.proxies.hover,
          dragging: dragging,
          component: current,
          enabled: enabled
        });
        updateSelectProxy({
          component: current,
          componentProxy: this.proxyService.proxies.select,
          enabled: enabled
        });
        updateDragProxy({
          x: x,
          y: y,
          component: current,
          dragging: this.stateService.getState().dragging,
          originExternal: this.stateService.getState().originExternal,
          componentCloneProxy: this.proxyService.proxies.drag,
          enabled: enabled
        });

        if (this.proxyService.proxies.dropTarget) {
          updateDropTargetProxy({
            x: x,
            y: y,
            regions: elements.filter(function (element) {
              return element.isContainer;
            }),
            dropTargetProxy: this.proxyService.proxies.dropTarget,
            dragging: this.stateService.getState().dragging,
            component: current,
            enabled: enabled,
            getComponentKey: this.configuration.element.key,
            elementSelector: this.configuration.element.propertySelectors.isSelectable,
            containerSelector: this.configuration.element.propertySelectors.isContainer
          });
        }
      }
    }
  }, {
    key: "dragStart",
    value: function dragStart(_ref2) {
      var mouseX = _ref2.mouseX,
          mouseY = _ref2.mouseY;
      var state = this.stateService.getState();
      state.x = mouseX;
      state.y = mouseY;
      state.dragging = true;
      state.originExternal = true;
    }
  }, {
    key: "dragUpdate",
    value: function dragUpdate(_ref3) {
      var mouseX = _ref3.mouseX,
          mouseY = _ref3.mouseY;
      var state = this.stateService.getState();
      state.x = mouseX;
      state.y = mouseY;
    }
  }, {
    key: "dragEnd",
    value: function dragEnd(_ref4) {
      var mouseX = _ref4.mouseX,
          mouseY = _ref4.mouseY;
      var state = this.stateService.getState();
      state.x = mouseX;
      state.y = mouseY;
      state.dragging = false;
      state.originExternal = false;
      return this.proxyService.proxies.dropTarget ? this.proxyService.proxies.dropTarget.state : null;
    }
  }, {
    key: "selectComponent",
    value: function selectComponent(key) {
      var state = this.stateService.getState();
      state.current = this.elementService.get(key);
    }
  }, {
    key: "getSelectedComponent",
    value: function getSelectedComponent() {
      return this.stateService.getState().current;
    }
  }, {
    key: "invalidateComponentCache",
    value: function invalidateComponentCache(key) {
      var state = this.stateService.getState();
      this.elementService.invalidate(key);
      state.current = null;
    }
  }, {
    key: "invalidateAllElementCache",
    value: function invalidateAllElementCache() {
      var state = this.stateService.getState();
      this.elementService.invalidateAll();
      state.current = null;
    }
  }, {
    key: "deleteComponent",
    value: function deleteComponent(key) {
      var keepSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var state = this.stateService.getState();
      this.elementService.delete(key);

      if (state.current && state.current.key === key && !keepSelected) {
        state.current = null;
      }
    }
  }]);

  return Interactions;
}();

var BASE_Z_INDEX = 999;
var elementHandlerMap = {
  enable: function enable(_ref) {
    var context = _ref.context;

    if (context.isContainer) {
      Object.assign(context.element.style, {
        border: '1px dashed #bbbbbb',
        margin: '15px',
        padding: '15px',
        'padding-bottom': 0,
        'min-height': '50px'
      });
    } else {
      Object.assign(context.element.style, {
        'margin-bottom': '15px'
      });
    }
  },
  disable: function disable(_ref2) {
    var context = _ref2.context;

    if (context.isContainer) {
      Object.assign(context.element.style, {
        border: '',
        margin: '',
        padding: '',
        'min-height': ''
      });
    } else {
      Object.assign(context.element.style, {
        'margin-bottom': ''
      });
    }
  }
};
var proxyConfiguration = {
  getContainerOnEnable: function getContainerOnEnable(key, proxyState) {
    if (key === 'dropTarget' && proxyState.container) {
      return querySelector(proxyState.container.element, '.proxy-container');
    } else if (proxyState.element) {
      return querySelector(proxyState.element.element, '.proxy-container');
    }

    return null;
  },
  dropTarget: {
    enable: function enable(_ref3) {
      var element = _ref3.element,
          params = _ref3.params;
      var position = params.payload.position;

      if (!position && params.payload.container) {
        var rect = params.payload.container.element.getBoundingClientRect();
        position = {
          x: rect.left,
          y: rect.top + rect.height / 2,
          width: rect.width,
          distance: 0,
          beforeId: '',
          position: 'middle'
        };
      }

      if (position) {
        var _position = position,
            x = _position.x,
            y = _position.y,
            width = _position.width;
        var style = {
          left: "".concat(window.scrollX + x, "px"),
          top: "".concat(window.scrollY + y, "px"),
          width: "".concat(width, "px"),
          position: 'absolute',
          height: "0px",
          borderTop: '2px solid red',
          backgroundColor: 'red',
          zIndex: BASE_Z_INDEX + 2,
          display: ''
        };
        Object.assign(element.style, style);
      } else {
        element.style.display = 'none';
      }
    },
    disable: function disable(_ref4) {
      var element = _ref4.element;
      element.style.display = 'none';
    }
  },
  select: {
    enable: function enable(_ref5) {
      var element = _ref5.element,
          params = _ref5.params;
      var component = params.payload.element;
      if (!component) return;
      var rect = component.element.getBoundingClientRect();
      var style = {
        display: 'block',
        width: "".concat(rect.width, "px"),
        height: "".concat(rect.height, "px"),
        outline: '2px solid #0059A7',
        position: 'absolute',
        top: "".concat(window.scrollY + rect.top, "px"),
        left: "".concat(window.scrollX + rect.left, "px"),
        zIndex: BASE_Z_INDEX + 1,
        cursor: 'grab'
      };
      Object.assign(element.style, style);
    },
    disable: function disable(_ref6) {
      var element = _ref6.element;
      element.style.display = 'none';
    }
  },
  drag: {
    enable: function enable(_ref7) {
      var element = _ref7.element,
          params = _ref7.params;
      var component = params.payload.element;
      if (!component) return;
      var rect = component.element.getBoundingClientRect();

      if (params.payload.x && params.payload.y) {
        var style = {
          display: 'block',
          position: 'fixed',
          left: "".concat(params.payload.x - rect.width / 2, "px"),
          top: "".concat(params.payload.y - rect.height / 2, "px"),
          height: "".concat(rect.height, "px"),
          width: "".concat(rect.width, "px"),
          border: '2px solid purple',
          backgroundColor: 'purple',
          opacity: 0.5,
          zIndex: BASE_Z_INDEX + 3
        };
        Object.assign(element.style, style);
      }
    },
    disable: function disable(_ref8) {
      var element = _ref8.element;
      element.style.display = 'none';
    }
  },
  hover: {
    enable: function enable(_ref9) {
      var element = _ref9.element,
          params = _ref9.params;
      var component = params.payload.element;
      if (!component) return;
      var rect = component.element.getBoundingClientRect();
      var style = {
        display: "block",
        width: "".concat(rect.width, "px"),
        height: "".concat(rect.height, "px"),
        outline: '2px solid rgb(65, 166, 255)',
        position: 'absolute',
        top: "".concat(window.scrollY + rect.top, "px"),
        left: "".concat(window.scrollX + rect.left, "px"),
        zIndex: BASE_Z_INDEX,
        cursor: 'pointer'
      };
      Object.assign(element.style, style);
    },
    disable: function disable(_ref10) {
      var element = _ref10.element;
      element.style.display = 'none';
    }
  }
};
var defaultConfig = {
  dropHandler: function dropHandler(state) {
    return console.log("Elem Dropped ".concat(state));
  },
  selectHandler: function selectHandler(obj) {
    return console.log("Elem selected ".concat(obj));
  },
  drag: {
    dragStartDistance: 20
  },
  springLoading: {
    delay: 30,
    validator: function validator(el) {
      return el.tagName === 'a' || el.tagName === 'button';
    }
  },
  element: {
    selector: '[data-item-id][data-interactions-item="true"]',
    handlers: elementHandlerMap,
    key: function key(el) {
      return el.getAttribute('data-item-id');
    },
    propertySelectors: {
      isContainer: '[data-allow-drop="true"]',
      isSelectable: '[data-allow-select="true"]',
      isDeletable: '[data-allow-delete="true"]',
      isMovable: '[data-allow-move="true"]'
    }
  },
  proxy: proxyConfiguration
};

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector;
}

var utils = {
  querySelectorAll: querySelectorAll,
  querySelector: querySelector,
  isCoordInElement: isCoordInElement,
  deepCloneNode: deepCloneNode,
  closest: closest
};

export { Interactions, defaultConfig as config, utils };

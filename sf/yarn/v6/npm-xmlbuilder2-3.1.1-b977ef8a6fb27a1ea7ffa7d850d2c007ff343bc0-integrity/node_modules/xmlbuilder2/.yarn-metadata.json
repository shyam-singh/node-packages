{
  "manifest": {
    "name": "xmlbuilder2",
    "version": "3.1.1",
    "keywords": [
      "xml",
      "xmlbuilder"
    ],
    "homepage": "http://github.com/oozcitak/xmlbuilder2",
    "description": "An XML builder for node.js",
    "author": {
      "name": "Ozgur Ozcitak",
      "email": "oozcitak@gmail.com"
    },
    "contributors": [],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/oozcitak/xmlbuilder2.git"
    },
    "bugs": {
      "url": "http://github.com/oozcitak/xmlbuilder2/issues"
    },
    "main": "./lib/index",
    "browser": "./lib/xmlbuilder2.min.js",
    "engines": {
      "node": ">=12.0"
    },
    "files": [
      "lib/**/*"
    ],
    "types": "./lib/index.d.ts",
    "dependencies": {
      "@oozcitak/dom": "1.15.10",
      "@oozcitak/infra": "1.0.8",
      "@oozcitak/util": "8.3.8",
      "js-yaml": "3.14.1"
    },
    "devDependencies": {
      "@babel/preset-env": "*",
      "@babel/runtime-corejs3": "7.10.3",
      "@types/benchmark": "*",
      "@types/dedent": "*",
      "@types/jest": "*",
      "@types/js-yaml": "3.11.1",
      "@types/node": "*",
      "babel-loader": "*",
      "benchmark": "*",
      "chalk": "*",
      "core-js": "3.6.5",
      "dedent": "*",
      "es6-proxy-polyfill": "*",
      "glob": "*",
      "harmony-reflect": "*",
      "jest": "*",
      "libxmljs2": "*",
      "ts-jest": "*",
      "ts-loader": "*",
      "ts-node": "*",
      "typescript": "*",
      "webpack": "*",
      "webpack-cli": "*",
      "xmlbuilder": "*",
      "xpath": "*"
    },
    "jest": {
      "transform": {
        "^.+\\.tsx?$": "ts-jest"
      },
      "testRegex": "/test/.*\\.test\\.tsx?$",
      "testEnvironment": "node",
      "collectCoverageFrom": [
        "src/**/*.{ts,tsx}"
      ]
    },
    "scripts": {
      "prepare": "tsc && webpack",
      "pretest": "rm -rf ./lib && tsc --version && tsc && webpack",
      "test": "jest --coverage",
      "perf": "npm run pretest && ts-node ./perf/perf.ts",
      "perf-cb": "npm run pretest && ts-node ./perf/perf-cb.ts",
      "prof-serialize": "npm run pretest && rm -f isolate-*-v8.log && node --prof ./perf/prof-serialize.js && find . -name isolate-*-v8.log -exec mv {} isolate-v8.log ; && node --prof-process isolate-v8.log > isolate-serialize.log && rm isolate-v8.log",
      "postpublish": "git push --all && git push --tags",
      "servedocs": "(cd docs && bundle exec jekyll serve)"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-xmlbuilder2-3.1.1-b977ef8a6fb27a1ea7ffa7d850d2c007ff343bc0-integrity\\node_modules\\xmlbuilder2\\package.json",
    "readmeFilename": "README.md",
    "readme": "# xmlbuilder2\n\nAn XML builder for [node.js](https://nodejs.org/).\n\n[![License](https://badgen.net/github/license/oozcitak/xmlbuilder2)](http://opensource.org/licenses/MIT)\n[![NPM Version](https://badgen.net/npm/v/xmlbuilder2)](https://www.npmjs.com/package/xmlbuilder2)\n[![NPM Downloads](https://badgen.net/npm/dm/xmlbuilder2)](https://www.npmjs.com/package/xmlbuilder2)\n[![jsDelivr](https://badgen.net/jsdelivr/hits/npm/xmlbuilder2)](https://www.jsdelivr.com/package/npm/xmlbuilder2)\n\n[![Node.js CI](https://github.com/oozcitak/xmlbuilder2/workflows/build/badge.svg)](https://github.com/oozcitak/xmlbuilder2/actions)\n[![Code Coverage](https://codecov.io/gh/oozcitak/xmlbuilder2/branch/master/graph/badge.svg)](https://codecov.io/gh/oozcitak/xmlbuilder2)\n[![Dev Dependency Status](https://badgen.net/david/dep/oozcitak/xmlbuilder2)](https://david-dm.org/oozcitak/xmlbuilder2)\n\n### Installation:\n\n``` sh\nnpm install xmlbuilder2\n```\n\n### Documentation:\n\nSee: https://oozcitak.github.io/xmlbuilder2/\n\n\n### Usage:\n\n`xmlbuilder2` is a wrapper around DOM nodes which adds chainable functions to make it easier to create and work with XML documents. For example the following XML document:\n\n``` xml\n<?xml version=\"1.0\"?>\n<root att=\"val\">\n  <foo>\n    <bar>foobar</bar>\n  </foo>\n  <baz/>\n</root>\n```\n\ncan be created with the following function chain:\n\n``` js\nconst { create } = require('xmlbuilder2');\n\nconst root = create({ version: '1.0' })\n  .ele('root', { att: 'val' })\n    .ele('foo')\n      .ele('bar').txt('foobar').up()\n    .up()\n    .ele('baz').up()\n  .up();\n\n// convert the XML tree to string\nconst xml = root.end({ prettyPrint: true });\nconsole.log(xml);\n```\n\n___\n\nThe same XML document can be created by converting a JS object into XML nodes:\n\n``` js\nconst { create } = require('xmlbuilder2');\n\nconst obj = {\n  root: {\n    '@att': 'val',\n    foo: {\n      bar: 'foobar'\n    },\n    baz: {}\n  }\n};\n\nconst doc = create(obj);\nconst xml = doc.end({ prettyPrint: true });\nconsole.log(xml);\n```\n___\n\n`xmlbuilder2` can also parse and serialize XML documents from different formats:\n```js\nconst { create } = require('xmlbuilder2');\n\nconst xmlStr = '<root att=\"val\"><foo><bar>foobar</bar></foo></root>';\nconst doc = create(xmlStr);\n\n// append a 'baz' element to the root node of the document\ndoc.root().ele('baz');\n\nconst xml = doc.end({ prettyPrint: true });\nconsole.log(xml);\n```\nwhich would output the same document string at the top of this page.\n\nOr you could return a JS object by changing the `format` argument to `'object'`:\n```js\nconst obj = doc.end({ format: 'object' });\nconsole.log(obj);\n```\n```js\n{\n  root: {\n    '@att': 'val',\n    foo: {\n      bar: 'foobar'\n    },\n    baz: {}\n  }\n}\n```\n\n___\n\nYou can convert between formats in one go with the `convert` function:\n\n```js\nconst { convert } = require('xmlbuilder2');\n\nconst xmlStr = '<root att=\"val\"><foo><bar>foobar</bar></foo></root>';\nconst obj = convert(xmlStr, { format: \"object\" });\n\nconsole.log(obj);\n```\n```js\n{\n  root: {\n    '@att': 'val',\n    foo: {\n      bar: 'foobar'\n    }\n  }\n}\n```\n\n___\n\nIf you need to do some processing:\n\n``` js\nconst { create } = require('xmlbuilder2');\n\nconst root = create().ele('squares');\nroot.com('f(x) = x^2');\nfor(let i = 1; i <= 5; i++)\n{\n  const item = root.ele('data');\n  item.att('x', i);\n  item.att('y', i * i);\n}\n\nconst xml = root.end({ prettyPrint: true });\nconsole.log(xml);\n```\n\nThis will result in:\n\n``` xml\n<?xml version=\"1.0\"?>\n<squares>\n  <!-- f(x) = x^2 -->\n  <data x=\"1\" y=\"1\"/>\n  <data x=\"2\" y=\"4\"/>\n  <data x=\"3\" y=\"9\"/>\n  <data x=\"4\" y=\"16\"/>\n  <data x=\"5\" y=\"25\"/>\n</squares>\n```\n\n### Usage in the browser:\n\nYou can build the minified production bundle (`lib/xmlbuilder2.min.js`) after cloning the repository and issuing `npx webpack` in your terminal. The bundle is also in the npm package, so you can also use a public npm CDN like [jsDelivr](https://www.jsdelivr.com/) or [unpkg](https://unpkg.com/):\n\n```html\n<!-- latest version from jsDelivr -->\n<script src=\"https://cdn.jsdelivr.net/npm/xmlbuilder2/lib/xmlbuilder2.min.js\"></script>\n<!-- latest version from unpkg -->\n<script src=\"https://unpkg.com/xmlbuilder2/lib/xmlbuilder2.min.js\"></script>\n```\n\n### Donations:\nPlease consider becoming a backer or sponsor to help support development.\n\n[<img src=\"https://opencollective.com/webpack/donate/button@2x.png?color=blue\" alt=\"Donate Button\" width=\"300\"/>](https://opencollective.com/xmlbuilder2)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Ozgur Ozcitak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/xmlbuilder2/-/xmlbuilder2-3.1.1.tgz#b977ef8a6fb27a1ea7ffa7d850d2c007ff343bc0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/xmlbuilder2/-/xmlbuilder2-3.1.1.tgz",
    "hash": "b977ef8a6fb27a1ea7ffa7d850d2c007ff343bc0",
    "integrity": "sha512-WCSfbfZnQDdLQLiMdGUQpMxxckeQ4oZNMNhLVkcekTu7xhD4tuUDyAPoY8CwXvBYE6LwBHd6QW2WZXlOWr1vCw==",
    "registry": "npm",
    "packageName": "xmlbuilder2",
    "cacheIntegrity": "sha512-WCSfbfZnQDdLQLiMdGUQpMxxckeQ4oZNMNhLVkcekTu7xhD4tuUDyAPoY8CwXvBYE6LwBHd6QW2WZXlOWr1vCw== sha1-uXfvim+yeh6n/6fYUNLAB/80O8A="
  },
  "registry": "npm",
  "hash": "b977ef8a6fb27a1ea7ffa7d850d2c007ff343bc0"
}
{
  "manifest": {
    "name": "csrf",
    "description": "primary logic behind csrf tokens",
    "version": "3.1.0",
    "author": {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com",
      "url": "http://jongleberry.com"
    },
    "contributors": [
      {
        "name": "Douglas Christopher Wilson",
        "email": "doug@somethingdoug.com"
      }
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/pillarjs/csrf.git"
    },
    "dependencies": {
      "rndm": "1.2.0",
      "tsscmp": "1.0.6",
      "uid-safe": "2.1.5"
    },
    "devDependencies": {
      "beautify-benchmark": "0.2.4",
      "benchmark": "2.1.4",
      "bluebird": "3.5.4",
      "eslint": "5.16.0",
      "eslint-config-standard": "12.0.0",
      "eslint-plugin-import": "2.16.0",
      "eslint-plugin-markdown": "1.0.0",
      "eslint-plugin-node": "8.0.1",
      "eslint-plugin-promise": "4.1.1",
      "eslint-plugin-standard": "4.0.0",
      "istanbul": "0.4.5",
      "mocha": "6.1.2"
    },
    "files": [
      "LICENSE",
      "HISTORY.md",
      "README.md",
      "index.d.ts",
      "index.js"
    ],
    "engines": {
      "node": ">= 0.8"
    },
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --trace-deprecation --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --trace-deprecation --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --trace-deprecation --reporter spec --check-leaks test/"
    },
    "keywords": [
      "csrf",
      "tokens"
    ],
    "_registry": "npm",
    "_loc": "C:\\Users\\csmku\\AppData\\Local\\sf\\yarn\\v6\\npm-csrf-3.1.0-ec75e9656d004d674b8ef5ba47b41fbfd6cb9c30-integrity\\node_modules\\csrf\\package.json",
    "readmeFilename": "README.md",
    "readme": "# CSRF\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nLogic behind CSRF token creation and verification.\n\nRead [Understanding-CSRF](https://github.com/pillarjs/understanding-csrf)\nfor more information on CSRF. Use this module to create custom CSRF middleware.\n\nLooking for a CSRF framework for your favorite framework that uses this\nmodule?\n\n  * Express/connect: [csurf](https://www.npmjs.com/package/csurf) or\n    [alt-xsrf](https://www.npmjs.com/package/alt-xsrf)\n  * Koa: [koa-csrf](https://www.npmjs.com/package/koa-csrf) or\n    [koa-atomic-session](https://www.npmjs.com/package/koa-atomic-session)\n\n### Install\n\n```sh\n$ npm install csrf\n```\n\n### TypeScript\n\nThis module includes a [TypeScript](https://www.typescriptlang.org/)\ndeclaration file to enable auto complete in compatible editors and type\ninformation for TypeScript projects.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar Tokens = require('csrf')\n```\n\n### new Tokens([options])\n\nCreate a new token generation/verification instance. The `options` argument is\noptional and will just use all defaults if missing.\n\n#### Options\n\nTokens accepts these properties in the options object.\n\n##### saltLength\n\nThe length of the internal salt to use, in characters. Internally, the salt\nis a base 62 string. Defaults to `8` characters.\n\n##### secretLength\n\nThe length of the secret to generate, in bytes. Note that the secret is\npassed around base-64 encoded and that this length refers to the underlying\nbytes, not the length of the base-64 string. Defaults to `18` bytes.\n\n#### tokens.create(secret)\n\nCreate a new CSRF token attached to the given `secret`. The `secret` is a\nstring, typically generated from the `tokens.secret()` or `tokens.secretSync()`\nmethods. This token is what you should add into HTML `<form>` blocks and\nexpect the user's browser to provide back.\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar secret = tokens.secretSync()\nvar token = tokens.create(secret)\n```\n\n#### tokens.secret(callback)\n\nAsynchronously create a new `secret`, which is a string. The secret is to\nbe kept on the server, typically stored in a server-side session for the\nuser. The secret should be at least per user.\n\n<!-- eslint-disable no-undef -->\n\n```js\ntokens.secret(function (err, secret) {\n  if (err) throw err\n  // do something with the secret\n})\n```\n\n#### tokens.secret()\n\nAsynchronously create a new `secret` and return a `Promise`. Please see\n`tokens.secret(callback)` documentation for full details.\n\n**Note**: To use promises in Node.js _prior to 0.12_, promises must be\n\"polyfilled\" using `global.Promise = require('bluebird')`.\n\n<!-- eslint-disable no-undef -->\n\n```js\ntokens.secret().then(function (secret) {\n  // do something with the secret\n})\n```\n\n#### tokens.secretSync()\n\nA synchronous version of `tokens.secret(callback)`. Please see\n`tokens.secret(callback)` documentation for full details.\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar secret = tokens.secretSync()\n```\n\n#### tokens.verify(secret, token)\n\nCheck whether a CSRF token is valid for the given `secret`, returning\na Boolean.\n\n<!-- eslint-disable no-undef -->\n\n```js\nif (!tokens.verify(secret, token)) {\n  throw new Error('invalid token!')\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[coveralls-image]: https://badgen.net/coveralls/c/github/pillarjs/csrf/master\n[coveralls-url]: https://coveralls.io/r/pillarjs/csrf?branch=master\n[node-image]: https://badgen.net/npm/node/csrf\n[node-url]: https://nodejs.org/en/download\n[npm-downloads-image]: https://badgen.net/npm/dm/csrf\n[npm-url]: https://npmjs.org/package/csrf\n[npm-version-image]: https://badgen.net/npm/v/csrf\n[travis-image]: https://badgen.net/travis/pillarjs/csrf/master\n[travis-url]: https://travis-ci.org/pillarjs/csrf\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Jonathan Ong <me@jongleberry.com>\nCopyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/csrf/-/csrf-3.1.0.tgz#ec75e9656d004d674b8ef5ba47b41fbfd6cb9c30",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/csrf/-/csrf-3.1.0.tgz",
    "hash": "ec75e9656d004d674b8ef5ba47b41fbfd6cb9c30",
    "integrity": "sha512-uTqEnCvWRk042asU6JtapDTcJeeailFy4ydOQS28bj1hcLnYRiqi8SsD2jS412AY1I/4qdOwWZun774iqywf9w==",
    "registry": "npm",
    "packageName": "csrf",
    "cacheIntegrity": "sha512-uTqEnCvWRk042asU6JtapDTcJeeailFy4ydOQS28bj1hcLnYRiqi8SsD2jS412AY1I/4qdOwWZun774iqywf9w== sha1-7HXpZW0ATWdLjvW6R7Qfv9bLnDA="
  },
  "registry": "npm",
  "hash": "ec75e9656d004d674b8ef5ba47b41fbfd6cb9c30"
}
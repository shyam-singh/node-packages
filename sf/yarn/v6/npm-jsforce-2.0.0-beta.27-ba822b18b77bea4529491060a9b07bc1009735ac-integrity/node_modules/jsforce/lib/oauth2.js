"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.promise");
require("core-js/modules/es.string.replace");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OAuth2 = void 0;
var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));
var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _crypto = require("crypto");
var _querystring = _interopRequireDefault(require("querystring"));
var _transport = _interopRequireWildcard(require("./transport"));
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; } /**


const defaultOAuth2Config = {
  loginUrl: 'https://login.salesforce.com'
};

// Makes a nodejs base64 encoded string compatible with rfc4648 alternative encoding for urls.
// @param base64Encoded a nodejs base64 encoded string
function base64UrlEscape(base64Encoded) {
  // builtin node js base 64 encoding is not 64 url compatible.
  // See https://toolsn.ietf.org/html/rfc4648#section-5
  return base64Encoded.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}

/**
 * type defs
 */

/**
 * OAuth2 class
 */
class OAuth2 {
  /**
   *
   */
  constructor(config) {
    (0, _defineProperty2.default)(this, "loginUrl", void 0);
    (0, _defineProperty2.default)(this, "authzServiceUrl", void 0);
    (0, _defineProperty2.default)(this, "tokenServiceUrl", void 0);
    (0, _defineProperty2.default)(this, "revokeServiceUrl", void 0);
    (0, _defineProperty2.default)(this, "clientId", void 0);
    (0, _defineProperty2.default)(this, "clientSecret", void 0);
    (0, _defineProperty2.default)(this, "redirectUri", void 0);
    (0, _defineProperty2.default)(this, "codeVerifier", void 0);
    (0, _defineProperty2.default)(this, "_transport", void 0);
    const {
      loginUrl,
      authzServiceUrl,
      tokenServiceUrl,
      revokeServiceUrl,
      clientId,
      clientSecret,
      redirectUri,
      proxyUrl,
      httpProxy,
      useVerifier
    } = config;
    if (authzServiceUrl && tokenServiceUrl) {
      var _context;
      this.loginUrl = (0, _slice.default)(_context = authzServiceUrl.split('/')).call(_context, 0, 3).join('/');
      this.authzServiceUrl = authzServiceUrl;
      this.tokenServiceUrl = tokenServiceUrl;
      this.revokeServiceUrl = revokeServiceUrl || `${this.loginUrl}/services/oauth2/revoke`;
    } else {
      this.loginUrl = loginUrl || defaultOAuth2Config.loginUrl;
      this.authzServiceUrl = `${this.loginUrl}/services/oauth2/authorize`;
      this.tokenServiceUrl = `${this.loginUrl}/services/oauth2/token`;
      this.revokeServiceUrl = `${this.loginUrl}/services/oauth2/revoke`;
    }
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.redirectUri = redirectUri;
    if (proxyUrl) {
      this._transport = new _transport.XdProxyTransport(proxyUrl);
    } else if (httpProxy) {
      this._transport = new _transport.HttpProxyTransport(httpProxy);
    } else {
      this._transport = new _transport.default();
    }
    if (useVerifier) {
      // Set a code verifier string for OAuth authorization
      this.codeVerifier = base64UrlEscape((0, _crypto.randomBytes)(Math.ceil(128)).toString('base64'));
    }
  }

  /**
   * Get Salesforce OAuth2 authorization page URL to redirect user agent.
   */
  getAuthorizationUrl(params = {}) {
    var _context2;
    if (this.codeVerifier) {
      // code verifier must be a base 64 url encoded hash of 128 bytes of random data. Our random data is also
      // base 64 url encoded. See Connection.create();
      const codeChallenge = base64UrlEscape((0, _crypto.createHash)('sha256').update(this.codeVerifier).digest('base64'));
      params.code_challenge = codeChallenge;
    }
    const _params = _objectSpread(_objectSpread({}, params), {}, {
      response_type: 'code',
      client_id: this.clientId,
      redirect_uri: this.redirectUri
    });
    return this.authzServiceUrl + ((0, _indexOf.default)(_context2 = this.authzServiceUrl).call(_context2, '?') >= 0 ? '&' : '?') + _querystring.default.stringify(_params);
  }

  /**
   * OAuth2 Refresh Token Flow
   */
  async refreshToken(refreshToken) {
    if (!this.clientId) {
      throw new Error('No OAuth2 client id information is specified');
    }
    const params = {
      grant_type: 'refresh_token',
      refresh_token: refreshToken,
      client_id: this.clientId
    };
    if (this.clientSecret) {
      params.client_secret = this.clientSecret;
    }
    const ret = await this._postParams(params);
    return ret;
  }

  /**
   * Send access token request to the token endpoint.
   * When a code (string) is passed in first argument, it will use Web Server Authentication Flow (Authorization Code Grant).
   * Otherwise, it will use the specified `grant_type` and pass parameters to the endpoint.
   */
  async requestToken(codeOrParams, params = {}) {
    if (typeof codeOrParams === 'string' && (!this.clientId || !this.redirectUri)) {
      throw new Error('No OAuth2 client id or redirect uri configuration is specified');
    }
    const _params = _objectSpread(_objectSpread({}, params), typeof codeOrParams === 'string' ? {
      grant_type: 'authorization_code',
      code: codeOrParams
    } : codeOrParams);
    if (this.clientId) {
      _params.client_id = this.clientId;
    }
    if (this.clientSecret) {
      _params.client_secret = this.clientSecret;
    }
    if (this.redirectUri) {
      _params.redirect_uri = this.redirectUri;
    }
    const ret = await this._postParams(_params);
    return ret;
  }

  /**
   * OAuth2 Username-Password Flow (Resource Owner Password Credentials)
   */
  async authenticate(username, password) {
    if (!this.clientId || !this.clientSecret || !this.redirectUri) {
      throw new Error('No valid OAuth2 client configuration set');
    }
    const ret = await this._postParams({
      grant_type: 'password',
      username,
      password,
      client_id: this.clientId,
      client_secret: this.clientSecret,
      redirect_uri: this.redirectUri
    });
    return ret;
  }

  /**
   * OAuth2 Revoke Session Token
   */
  async revokeToken(token) {
    const response = await this._transport.httpRequest({
      method: 'POST',
      url: this.revokeServiceUrl,
      body: _querystring.default.stringify({
        token
      }),
      headers: {
        'content-type': 'application/x-www-form-urlencoded'
      }
    });
    if (response.statusCode >= 400) {
      let res = _querystring.default.parse(response.body);
      if (!res || !res.error) {
        res = {
          error: `ERROR_HTTP_${response.statusCode}`,
          error_description: response.body
        };
      }
      throw new class extends Error {
        constructor({
          error,
          error_description
        }) {
          super(error_description);
          this.name = error;
        }
      }(res);
    }
  }

  /**
   * @private
   */
  async _postParams(params) {
    if (this.codeVerifier) params.code_verifier = this.codeVerifier;
    const response = await this._transport.httpRequest({
      method: 'POST',
      url: this.tokenServiceUrl,
      body: _querystring.default.stringify(params),
      headers: {
        'content-type': 'application/x-www-form-urlencoded'
      }
    });
    let res;
    try {
      res = JSON.parse(response.body);
    } catch (e) {
      /* eslint-disable no-empty */
    }
    if (response.statusCode >= 400) {
      res = res || {
        error: `ERROR_HTTP_${response.statusCode}`,
        error_description: response.body
      };
      throw new class extends Error {
        constructor({
          error,
          error_description
        }) {
          super(error_description);
          this.name = error;
        }
      }(res);
    }
    return res;
  }
}
exports.OAuth2 = OAuth2;
var _default = OAuth2;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.join";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.string.replace";
import "core-js/modules/es.string.split";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _wrapNativeSuper from "@babel/runtime-corejs3/helpers/wrapNativeSuper";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context8; _forEachInstanceProperty(_context8 = ownKeys(Object(source), true)).call(_context8, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context9; _forEachInstanceProperty(_context9 = ownKeys(Object(source))).call(_context9, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 *
 */
import { createHash, randomBytes } from 'crypto';
import querystring from 'querystring';
import Transport, { XdProxyTransport, HttpProxyTransport } from './transport';
var defaultOAuth2Config = {
  loginUrl: 'https://login.salesforce.com'
};

// Makes a nodejs base64 encoded string compatible with rfc4648 alternative encoding for urls.
// @param base64Encoded a nodejs base64 encoded string
function base64UrlEscape(base64Encoded) {
  // builtin node js base 64 encoding is not 64 url compatible.
  // See https://toolsn.ietf.org/html/rfc4648#section-5
  return base64Encoded.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}

/**
 * type defs
 */

/**
 * OAuth2 class
 */
export var OAuth2 = /*#__PURE__*/function () {
  /**
   *
   */
  function OAuth2(config) {
    _classCallCheck(this, OAuth2);
    _defineProperty(this, "loginUrl", void 0);
    _defineProperty(this, "authzServiceUrl", void 0);
    _defineProperty(this, "tokenServiceUrl", void 0);
    _defineProperty(this, "revokeServiceUrl", void 0);
    _defineProperty(this, "clientId", void 0);
    _defineProperty(this, "clientSecret", void 0);
    _defineProperty(this, "redirectUri", void 0);
    _defineProperty(this, "codeVerifier", void 0);
    _defineProperty(this, "_transport", void 0);
    var loginUrl = config.loginUrl,
      authzServiceUrl = config.authzServiceUrl,
      tokenServiceUrl = config.tokenServiceUrl,
      revokeServiceUrl = config.revokeServiceUrl,
      clientId = config.clientId,
      clientSecret = config.clientSecret,
      redirectUri = config.redirectUri,
      proxyUrl = config.proxyUrl,
      httpProxy = config.httpProxy,
      useVerifier = config.useVerifier;
    if (authzServiceUrl && tokenServiceUrl) {
      var _context;
      this.loginUrl = _sliceInstanceProperty(_context = authzServiceUrl.split('/')).call(_context, 0, 3).join('/');
      this.authzServiceUrl = authzServiceUrl;
      this.tokenServiceUrl = tokenServiceUrl;
      this.revokeServiceUrl = revokeServiceUrl || "".concat(this.loginUrl, "/services/oauth2/revoke");
    } else {
      this.loginUrl = loginUrl || defaultOAuth2Config.loginUrl;
      this.authzServiceUrl = "".concat(this.loginUrl, "/services/oauth2/authorize");
      this.tokenServiceUrl = "".concat(this.loginUrl, "/services/oauth2/token");
      this.revokeServiceUrl = "".concat(this.loginUrl, "/services/oauth2/revoke");
    }
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.redirectUri = redirectUri;
    if (proxyUrl) {
      this._transport = new XdProxyTransport(proxyUrl);
    } else if (httpProxy) {
      this._transport = new HttpProxyTransport(httpProxy);
    } else {
      this._transport = new Transport();
    }
    if (useVerifier) {
      // Set a code verifier string for OAuth authorization
      this.codeVerifier = base64UrlEscape(randomBytes(Math.ceil(128)).toString('base64'));
    }
  }

  /**
   * Get Salesforce OAuth2 authorization page URL to redirect user agent.
   */
  _createClass(OAuth2, [{
    key: "getAuthorizationUrl",
    value: function getAuthorizationUrl() {
      var _context2;
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (this.codeVerifier) {
        // code verifier must be a base 64 url encoded hash of 128 bytes of random data. Our random data is also
        // base 64 url encoded. See Connection.create();
        var codeChallenge = base64UrlEscape(createHash('sha256').update(this.codeVerifier).digest('base64'));
        params.code_challenge = codeChallenge;
      }
      var _params = _objectSpread(_objectSpread({}, params), {}, {
        response_type: 'code',
        client_id: this.clientId,
        redirect_uri: this.redirectUri
      });
      return this.authzServiceUrl + (_indexOfInstanceProperty(_context2 = this.authzServiceUrl).call(_context2, '?') >= 0 ? '&' : '?') + querystring.stringify(_params);
    }
    /**
     * OAuth2 Refresh Token Flow
     */
  }, {
    key: "refreshToken",
    value: function () {
      var _refreshToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_refreshToken) {
        var params, ret;
        return _regeneratorRuntime.wrap(function _callee$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this.clientId) {
                  _context3.next = 2;
                  break;
                }
                throw new Error('No OAuth2 client id information is specified');
              case 2:
                params = {
                  grant_type: 'refresh_token',
                  refresh_token: _refreshToken,
                  client_id: this.clientId
                };
                if (this.clientSecret) {
                  params.client_secret = this.clientSecret;
                }
                _context3.next = 6;
                return this._postParams(params);
              case 6:
                ret = _context3.sent;
                return _context3.abrupt("return", ret);
              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee, this);
      }));
      function refreshToken(_x) {
        return _refreshToken2.apply(this, arguments);
      }
      return refreshToken;
    }()
    /**
     * Send access token request to the token endpoint.
     * When a code (string) is passed in first argument, it will use Web Server Authentication Flow (Authorization Code Grant).
     * Otherwise, it will use the specified `grant_type` and pass parameters to the endpoint.
     */
  }, {
    key: "requestToken",
    value: function () {
      var _requestToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(codeOrParams) {
        var params,
          _params,
          ret,
          _args2 = arguments;
        return _regeneratorRuntime.wrap(function _callee2$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                params = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                if (!(typeof codeOrParams === 'string' && (!this.clientId || !this.redirectUri))) {
                  _context4.next = 3;
                  break;
                }
                throw new Error('No OAuth2 client id or redirect uri configuration is specified');
              case 3:
                _params = _objectSpread(_objectSpread({}, params), typeof codeOrParams === 'string' ? {
                  grant_type: 'authorization_code',
                  code: codeOrParams
                } : codeOrParams);
                if (this.clientId) {
                  _params.client_id = this.clientId;
                }
                if (this.clientSecret) {
                  _params.client_secret = this.clientSecret;
                }
                if (this.redirectUri) {
                  _params.redirect_uri = this.redirectUri;
                }
                _context4.next = 9;
                return this._postParams(_params);
              case 9:
                ret = _context4.sent;
                return _context4.abrupt("return", ret);
              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee2, this);
      }));
      function requestToken(_x2) {
        return _requestToken.apply(this, arguments);
      }
      return requestToken;
    }()
    /**
     * OAuth2 Username-Password Flow (Resource Owner Password Credentials)
     */
  }, {
    key: "authenticate",
    value: function () {
      var _authenticate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username, password) {
        var ret;
        return _regeneratorRuntime.wrap(function _callee3$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(!this.clientId || !this.clientSecret || !this.redirectUri)) {
                  _context5.next = 2;
                  break;
                }
                throw new Error('No valid OAuth2 client configuration set');
              case 2:
                _context5.next = 4;
                return this._postParams({
                  grant_type: 'password',
                  username: username,
                  password: password,
                  client_id: this.clientId,
                  client_secret: this.clientSecret,
                  redirect_uri: this.redirectUri
                });
              case 4:
                ret = _context5.sent;
                return _context5.abrupt("return", ret);
              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee3, this);
      }));
      function authenticate(_x3, _x4) {
        return _authenticate.apply(this, arguments);
      }
      return authenticate;
    }()
    /**
     * OAuth2 Revoke Session Token
     */
  }, {
    key: "revokeToken",
    value: function () {
      var _revokeToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(token) {
        var response, res;
        return _regeneratorRuntime.wrap(function _callee4$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._transport.httpRequest({
                  method: 'POST',
                  url: this.revokeServiceUrl,
                  body: querystring.stringify({
                    token: token
                  }),
                  headers: {
                    'content-type': 'application/x-www-form-urlencoded'
                  }
                });
              case 2:
                response = _context6.sent;
                if (!(response.statusCode >= 400)) {
                  _context6.next = 7;
                  break;
                }
                res = querystring.parse(response.body);
                if (!res || !res.error) {
                  res = {
                    error: "ERROR_HTTP_".concat(response.statusCode),
                    error_description: response.body
                  };
                }
                throw new ( /*#__PURE__*/function (_Error) {
                  _inherits(_class, _Error);
                  var _super = _createSuper(_class);
                  function _class(_ref) {
                    var _this;
                    var error = _ref.error,
                      error_description = _ref.error_description;
                    _classCallCheck(this, _class);
                    _this = _super.call(this, error_description);
                    _this.name = error;
                    return _this;
                  }
                  return _class;
                }( /*#__PURE__*/_wrapNativeSuper(Error)))(res);
              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee4, this);
      }));
      function revokeToken(_x5) {
        return _revokeToken.apply(this, arguments);
      }
      return revokeToken;
    }()
    /**
     * @private
     */
  }, {
    key: "_postParams",
    value: function () {
      var _postParams2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params) {
        var response, res;
        return _regeneratorRuntime.wrap(function _callee5$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (this.codeVerifier) params.code_verifier = this.codeVerifier;
                _context7.next = 3;
                return this._transport.httpRequest({
                  method: 'POST',
                  url: this.tokenServiceUrl,
                  body: querystring.stringify(params),
                  headers: {
                    'content-type': 'application/x-www-form-urlencoded'
                  }
                });
              case 3:
                response = _context7.sent;
                try {
                  res = JSON.parse(response.body);
                } catch (e) {
                  /* eslint-disable no-empty */
                }
                if (!(response.statusCode >= 400)) {
                  _context7.next = 8;
                  break;
                }
                res = res || {
                  error: "ERROR_HTTP_".concat(response.statusCode),
                  error_description: response.body
                };
                throw new ( /*#__PURE__*/function (_Error2) {
                  _inherits(_class2, _Error2);
                  var _super2 = _createSuper(_class2);
                  function _class2(_ref2) {
                    var _this2;
                    var error = _ref2.error,
                      error_description = _ref2.error_description;
                    _classCallCheck(this, _class2);
                    _this2 = _super2.call(this, error_description);
                    _this2.name = error;
                    return _this2;
                  }
                  return _class2;
                }( /*#__PURE__*/_wrapNativeSuper(Error)))(res);
              case 8:
                return _context7.abrupt("return", res);
              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee5, this);
      }));
      function _postParams(_x6) {
        return _postParams2.apply(this, arguments);
      }
      return _postParams;
    }()
  }]);
  return OAuth2;
}();
export default OAuth2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVIYXNoIiwicmFuZG9tQnl0ZXMiLCJxdWVyeXN0cmluZyIsIlRyYW5zcG9ydCIsIlhkUHJveHlUcmFuc3BvcnQiLCJIdHRwUHJveHlUcmFuc3BvcnQiLCJkZWZhdWx0T0F1dGgyQ29uZmlnIiwibG9naW5VcmwiLCJiYXNlNjRVcmxFc2NhcGUiLCJiYXNlNjRFbmNvZGVkIiwicmVwbGFjZSIsIk9BdXRoMiIsImNvbmZpZyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsImF1dGh6U2VydmljZVVybCIsInRva2VuU2VydmljZVVybCIsInJldm9rZVNlcnZpY2VVcmwiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsInJlZGlyZWN0VXJpIiwicHJveHlVcmwiLCJodHRwUHJveHkiLCJ1c2VWZXJpZmllciIsIl9jb250ZXh0IiwiX3NsaWNlSW5zdGFuY2VQcm9wZXJ0eSIsInNwbGl0IiwiY2FsbCIsImpvaW4iLCJjb25jYXQiLCJfdHJhbnNwb3J0IiwiY29kZVZlcmlmaWVyIiwiTWF0aCIsImNlaWwiLCJ0b1N0cmluZyIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0QXV0aG9yaXphdGlvblVybCIsIl9jb250ZXh0MiIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImNvZGVDaGFsbGVuZ2UiLCJ1cGRhdGUiLCJkaWdlc3QiLCJjb2RlX2NoYWxsZW5nZSIsIl9wYXJhbXMiLCJfb2JqZWN0U3ByZWFkIiwicmVzcG9uc2VfdHlwZSIsImNsaWVudF9pZCIsInJlZGlyZWN0X3VyaSIsIl9pbmRleE9mSW5zdGFuY2VQcm9wZXJ0eSIsInN0cmluZ2lmeSIsIl9yZWZyZXNoVG9rZW4yIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJyZWZyZXNoVG9rZW4iLCJyZXQiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dDMiLCJwcmV2IiwibmV4dCIsIkVycm9yIiwiZ3JhbnRfdHlwZSIsInJlZnJlc2hfdG9rZW4iLCJjbGllbnRfc2VjcmV0IiwiX3Bvc3RQYXJhbXMiLCJzZW50IiwiYWJydXB0Iiwic3RvcCIsIl94IiwiYXBwbHkiLCJfcmVxdWVzdFRva2VuIiwiX2NhbGxlZTIiLCJjb2RlT3JQYXJhbXMiLCJfYXJnczIiLCJfY2FsbGVlMiQiLCJfY29udGV4dDQiLCJjb2RlIiwicmVxdWVzdFRva2VuIiwiX3gyIiwiX2F1dGhlbnRpY2F0ZSIsIl9jYWxsZWUzIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIl9jYWxsZWUzJCIsIl9jb250ZXh0NSIsImF1dGhlbnRpY2F0ZSIsIl94MyIsIl94NCIsIl9yZXZva2VUb2tlbiIsIl9jYWxsZWU0IiwidG9rZW4iLCJyZXNwb25zZSIsInJlcyIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NiIsImh0dHBSZXF1ZXN0IiwibWV0aG9kIiwidXJsIiwiYm9keSIsImhlYWRlcnMiLCJzdGF0dXNDb2RlIiwicGFyc2UiLCJlcnJvciIsImVycm9yX2Rlc2NyaXB0aW9uIiwiX0Vycm9yIiwiX2luaGVyaXRzIiwiX2NsYXNzIiwiX3N1cGVyIiwiX2NyZWF0ZVN1cGVyIiwiX3JlZiIsIl90aGlzIiwibmFtZSIsIl93cmFwTmF0aXZlU3VwZXIiLCJyZXZva2VUb2tlbiIsIl94NSIsIl9wb3N0UGFyYW1zMiIsIl9jYWxsZWU1IiwiX2NhbGxlZTUkIiwiX2NvbnRleHQ3IiwiY29kZV92ZXJpZmllciIsIkpTT04iLCJlIiwiX0Vycm9yMiIsIl9jbGFzczIiLCJfc3VwZXIyIiwiX3JlZjIiLCJfdGhpczIiLCJfeDYiXSwic291cmNlcyI6WyIuLi9zcmMvb2F1dGgyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqL1xuaW1wb3J0IHsgY3JlYXRlSGFzaCwgcmFuZG9tQnl0ZXMgfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHF1ZXJ5c3RyaW5nIGZyb20gJ3F1ZXJ5c3RyaW5nJztcbmltcG9ydCBUcmFuc3BvcnQsIHsgWGRQcm94eVRyYW5zcG9ydCwgSHR0cFByb3h5VHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQnO1xuaW1wb3J0IHsgT3B0aW9uYWwgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZGVmYXVsdE9BdXRoMkNvbmZpZyA9IHtcbiAgbG9naW5Vcmw6ICdodHRwczovL2xvZ2luLnNhbGVzZm9yY2UuY29tJyxcbn07XG5cbi8vIE1ha2VzIGEgbm9kZWpzIGJhc2U2NCBlbmNvZGVkIHN0cmluZyBjb21wYXRpYmxlIHdpdGggcmZjNDY0OCBhbHRlcm5hdGl2ZSBlbmNvZGluZyBmb3IgdXJscy5cbi8vIEBwYXJhbSBiYXNlNjRFbmNvZGVkIGEgbm9kZWpzIGJhc2U2NCBlbmNvZGVkIHN0cmluZ1xuZnVuY3Rpb24gYmFzZTY0VXJsRXNjYXBlKGJhc2U2NEVuY29kZWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIGJ1aWx0aW4gbm9kZSBqcyBiYXNlIDY0IGVuY29kaW5nIGlzIG5vdCA2NCB1cmwgY29tcGF0aWJsZS5cbiAgLy8gU2VlIGh0dHBzOi8vdG9vbHNuLmlldGYub3JnL2h0bWwvcmZjNDY0OCNzZWN0aW9uLTVcbiAgcmV0dXJuIGJhc2U2NEVuY29kZWRcbiAgICAucmVwbGFjZSgvXFwrL2csICctJylcbiAgICAucmVwbGFjZSgvXFwvL2csICdfJylcbiAgICAucmVwbGFjZSgvPS9nLCAnJyk7XG59XG5cbi8qKlxuICogdHlwZSBkZWZzXG4gKi9cbmV4cG9ydCB0eXBlIE9BdXRoMkNvbmZpZyA9IHtcbiAgY2xpZW50SWQ/OiBzdHJpbmc7XG4gIGNsaWVudFNlY3JldD86IHN0cmluZztcbiAgcmVkaXJlY3RVcmk/OiBzdHJpbmc7XG4gIGxvZ2luVXJsPzogc3RyaW5nO1xuICBhdXRoelNlcnZpY2VVcmw/OiBzdHJpbmc7XG4gIHRva2VuU2VydmljZVVybD86IHN0cmluZztcbiAgcmV2b2tlU2VydmljZVVybD86IHN0cmluZztcbiAgcHJveHlVcmw/OiBzdHJpbmc7XG4gIGh0dHBQcm94eT86IHN0cmluZztcbiAgdXNlVmVyaWZpZXI/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgQXV0aHpSZXF1ZXN0UGFyYW1zID0ge1xuICBzY29wZT86IHN0cmluZztcbiAgc3RhdGU/OiBzdHJpbmc7XG4gIGNvZGVfY2hhbGxlbmdlPzogc3RyaW5nO1xufSAmIHtcbiAgW2F0dHI6IHN0cmluZ106IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFRva2VuUmVzcG9uc2UgPSB7XG4gIHRva2VuX3R5cGU6ICdCZWFyZXInO1xuICBpZDogc3RyaW5nO1xuICBhY2Nlc3NfdG9rZW46IHN0cmluZztcbiAgcmVmcmVzaF90b2tlbj86IHN0cmluZztcbiAgc2lnbmF0dXJlOiBzdHJpbmc7XG4gIGlzc3VlZF9hdDogc3RyaW5nO1xuICBpbnN0YW5jZV91cmw6IHN0cmluZztcbiAgc2ZkY19jb21tdW5pdHlfdXJsPzogc3RyaW5nO1xuICBzZmRjX2NvbW11bml0eV9pZD86IHN0cmluZztcbn07XG5cbi8qKlxuICogT0F1dGgyIGNsYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBPQXV0aDIge1xuICBsb2dpblVybDogc3RyaW5nO1xuICBhdXRoelNlcnZpY2VVcmw6IHN0cmluZztcbiAgdG9rZW5TZXJ2aWNlVXJsOiBzdHJpbmc7XG4gIHJldm9rZVNlcnZpY2VVcmw6IHN0cmluZztcbiAgY2xpZW50SWQ6IE9wdGlvbmFsPHN0cmluZz47XG4gIGNsaWVudFNlY3JldDogT3B0aW9uYWw8c3RyaW5nPjtcbiAgcmVkaXJlY3RVcmk6IE9wdGlvbmFsPHN0cmluZz47XG4gIGNvZGVWZXJpZmllcjogT3B0aW9uYWw8c3RyaW5nPjtcblxuICBfdHJhbnNwb3J0OiBUcmFuc3BvcnQ7XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IE9BdXRoMkNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGxvZ2luVXJsLFxuICAgICAgYXV0aHpTZXJ2aWNlVXJsLFxuICAgICAgdG9rZW5TZXJ2aWNlVXJsLFxuICAgICAgcmV2b2tlU2VydmljZVVybCxcbiAgICAgIGNsaWVudElkLFxuICAgICAgY2xpZW50U2VjcmV0LFxuICAgICAgcmVkaXJlY3RVcmksXG4gICAgICBwcm94eVVybCxcbiAgICAgIGh0dHBQcm94eSxcbiAgICAgIHVzZVZlcmlmaWVyLFxuICAgIH0gPSBjb25maWc7XG4gICAgaWYgKGF1dGh6U2VydmljZVVybCAmJiB0b2tlblNlcnZpY2VVcmwpIHtcbiAgICAgIHRoaXMubG9naW5VcmwgPSBhdXRoelNlcnZpY2VVcmwuc3BsaXQoJy8nKS5zbGljZSgwLCAzKS5qb2luKCcvJyk7XG4gICAgICB0aGlzLmF1dGh6U2VydmljZVVybCA9IGF1dGh6U2VydmljZVVybDtcbiAgICAgIHRoaXMudG9rZW5TZXJ2aWNlVXJsID0gdG9rZW5TZXJ2aWNlVXJsO1xuICAgICAgdGhpcy5yZXZva2VTZXJ2aWNlVXJsID1cbiAgICAgICAgcmV2b2tlU2VydmljZVVybCB8fCBgJHt0aGlzLmxvZ2luVXJsfS9zZXJ2aWNlcy9vYXV0aDIvcmV2b2tlYDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2dpblVybCA9IGxvZ2luVXJsIHx8IGRlZmF1bHRPQXV0aDJDb25maWcubG9naW5Vcmw7XG4gICAgICB0aGlzLmF1dGh6U2VydmljZVVybCA9IGAke3RoaXMubG9naW5Vcmx9L3NlcnZpY2VzL29hdXRoMi9hdXRob3JpemVgO1xuICAgICAgdGhpcy50b2tlblNlcnZpY2VVcmwgPSBgJHt0aGlzLmxvZ2luVXJsfS9zZXJ2aWNlcy9vYXV0aDIvdG9rZW5gO1xuICAgICAgdGhpcy5yZXZva2VTZXJ2aWNlVXJsID0gYCR7dGhpcy5sb2dpblVybH0vc2VydmljZXMvb2F1dGgyL3Jldm9rZWA7XG4gICAgfVxuICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldDtcbiAgICB0aGlzLnJlZGlyZWN0VXJpID0gcmVkaXJlY3RVcmk7XG4gICAgaWYgKHByb3h5VXJsKSB7XG4gICAgICB0aGlzLl90cmFuc3BvcnQgPSBuZXcgWGRQcm94eVRyYW5zcG9ydChwcm94eVVybCk7XG4gICAgfSBlbHNlIGlmIChodHRwUHJveHkpIHtcbiAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IG5ldyBIdHRwUHJveHlUcmFuc3BvcnQoaHR0cFByb3h5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdHJhbnNwb3J0ID0gbmV3IFRyYW5zcG9ydCgpO1xuICAgIH1cbiAgICBpZiAodXNlVmVyaWZpZXIpIHtcbiAgICAgIC8vIFNldCBhIGNvZGUgdmVyaWZpZXIgc3RyaW5nIGZvciBPQXV0aCBhdXRob3JpemF0aW9uXG4gICAgICB0aGlzLmNvZGVWZXJpZmllciA9IGJhc2U2NFVybEVzY2FwZShcbiAgICAgICAgcmFuZG9tQnl0ZXMoTWF0aC5jZWlsKDEyOCkpLnRvU3RyaW5nKCdiYXNlNjQnKSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBTYWxlc2ZvcmNlIE9BdXRoMiBhdXRob3JpemF0aW9uIHBhZ2UgVVJMIHRvIHJlZGlyZWN0IHVzZXIgYWdlbnQuXG4gICAqL1xuICBnZXRBdXRob3JpemF0aW9uVXJsKHBhcmFtczogQXV0aHpSZXF1ZXN0UGFyYW1zID0ge30pIHtcbiAgICBpZiAodGhpcy5jb2RlVmVyaWZpZXIpIHtcbiAgICAgIC8vIGNvZGUgdmVyaWZpZXIgbXVzdCBiZSBhIGJhc2UgNjQgdXJsIGVuY29kZWQgaGFzaCBvZiAxMjggYnl0ZXMgb2YgcmFuZG9tIGRhdGEuIE91ciByYW5kb20gZGF0YSBpcyBhbHNvXG4gICAgICAvLyBiYXNlIDY0IHVybCBlbmNvZGVkLiBTZWUgQ29ubmVjdGlvbi5jcmVhdGUoKTtcbiAgICAgIGNvbnN0IGNvZGVDaGFsbGVuZ2UgPSBiYXNlNjRVcmxFc2NhcGUoXG4gICAgICAgIGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZSh0aGlzLmNvZGVWZXJpZmllcikuZGlnZXN0KCdiYXNlNjQnKSxcbiAgICAgICk7XG4gICAgICBwYXJhbXMuY29kZV9jaGFsbGVuZ2UgPSBjb2RlQ2hhbGxlbmdlO1xuICAgIH1cblxuICAgIGNvbnN0IF9wYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICByZXNwb25zZV90eXBlOiAnY29kZScsXG4gICAgICBjbGllbnRfaWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICByZWRpcmVjdF91cmk6IHRoaXMucmVkaXJlY3RVcmksXG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5hdXRoelNlcnZpY2VVcmwgK1xuICAgICAgKHRoaXMuYXV0aHpTZXJ2aWNlVXJsLmluZGV4T2YoJz8nKSA+PSAwID8gJyYnIDogJz8nKSArXG4gICAgICBxdWVyeXN0cmluZy5zdHJpbmdpZnkoX3BhcmFtcyBhcyB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIE9BdXRoMiBSZWZyZXNoIFRva2VuIEZsb3dcbiAgICovXG4gIGFzeW5jIHJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW46IHN0cmluZyk6IFByb21pc2U8VG9rZW5SZXNwb25zZT4ge1xuICAgIGlmICghdGhpcy5jbGllbnRJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBPQXV0aDIgY2xpZW50IGlkIGluZm9ybWF0aW9uIGlzIHNwZWNpZmllZCcpO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbXM6IHsgW3Byb3A6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nLFxuICAgICAgcmVmcmVzaF90b2tlbjogcmVmcmVzaFRva2VuLFxuICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudElkLFxuICAgIH07XG4gICAgaWYgKHRoaXMuY2xpZW50U2VjcmV0KSB7XG4gICAgICBwYXJhbXMuY2xpZW50X3NlY3JldCA9IHRoaXMuY2xpZW50U2VjcmV0O1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLl9wb3N0UGFyYW1zKHBhcmFtcyk7XG4gICAgcmV0dXJuIHJldCBhcyBUb2tlblJlc3BvbnNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYWNjZXNzIHRva2VuIHJlcXVlc3QgdG8gdGhlIHRva2VuIGVuZHBvaW50LlxuICAgKiBXaGVuIGEgY29kZSAoc3RyaW5nKSBpcyBwYXNzZWQgaW4gZmlyc3QgYXJndW1lbnQsIGl0IHdpbGwgdXNlIFdlYiBTZXJ2ZXIgQXV0aGVudGljYXRpb24gRmxvdyAoQXV0aG9yaXphdGlvbiBDb2RlIEdyYW50KS5cbiAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgc3BlY2lmaWVkIGBncmFudF90eXBlYCBhbmQgcGFzcyBwYXJhbWV0ZXJzIHRvIHRoZSBlbmRwb2ludC5cbiAgICovXG4gIGFzeW5jIHJlcXVlc3RUb2tlbihcbiAgICBjb2RlT3JQYXJhbXM6IHN0cmluZyB8IHsgZ3JhbnRfdHlwZTogc3RyaW5nOyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH0sXG4gICAgcGFyYW1zOiB7IFtwcm9wOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9LFxuICApOiBQcm9taXNlPFRva2VuUmVzcG9uc2U+IHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgY29kZU9yUGFyYW1zID09PSAnc3RyaW5nJyAmJlxuICAgICAgKCF0aGlzLmNsaWVudElkIHx8ICF0aGlzLnJlZGlyZWN0VXJpKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTm8gT0F1dGgyIGNsaWVudCBpZCBvciByZWRpcmVjdCB1cmkgY29uZmlndXJhdGlvbiBpcyBzcGVjaWZpZWQnLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgX3BhcmFtczogeyBbcHJvcDogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICAuLi4odHlwZW9mIGNvZGVPclBhcmFtcyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyB7IGdyYW50X3R5cGU6ICdhdXRob3JpemF0aW9uX2NvZGUnLCBjb2RlOiBjb2RlT3JQYXJhbXMgfVxuICAgICAgICA6IGNvZGVPclBhcmFtcyksXG4gICAgfTtcbiAgICBpZiAodGhpcy5jbGllbnRJZCkge1xuICAgICAgX3BhcmFtcy5jbGllbnRfaWQgPSB0aGlzLmNsaWVudElkO1xuICAgIH1cbiAgICBpZiAodGhpcy5jbGllbnRTZWNyZXQpIHtcbiAgICAgIF9wYXJhbXMuY2xpZW50X3NlY3JldCA9IHRoaXMuY2xpZW50U2VjcmV0O1xuICAgIH1cbiAgICBpZiAodGhpcy5yZWRpcmVjdFVyaSkge1xuICAgICAgX3BhcmFtcy5yZWRpcmVjdF91cmkgPSB0aGlzLnJlZGlyZWN0VXJpO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLl9wb3N0UGFyYW1zKF9wYXJhbXMpO1xuICAgIHJldHVybiByZXQgYXMgVG9rZW5SZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPQXV0aDIgVXNlcm5hbWUtUGFzc3dvcmQgRmxvdyAoUmVzb3VyY2UgT3duZXIgUGFzc3dvcmQgQ3JlZGVudGlhbHMpXG4gICAqL1xuICBhc3luYyBhdXRoZW50aWNhdGUoXG4gICAgdXNlcm5hbWU6IHN0cmluZyxcbiAgICBwYXNzd29yZDogc3RyaW5nLFxuICApOiBQcm9taXNlPFRva2VuUmVzcG9uc2U+IHtcbiAgICBpZiAoIXRoaXMuY2xpZW50SWQgfHwgIXRoaXMuY2xpZW50U2VjcmV0IHx8ICF0aGlzLnJlZGlyZWN0VXJpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHZhbGlkIE9BdXRoMiBjbGllbnQgY29uZmlndXJhdGlvbiBzZXQnKTtcbiAgICB9XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgdGhpcy5fcG9zdFBhcmFtcyh7XG4gICAgICBncmFudF90eXBlOiAncGFzc3dvcmQnLFxuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRJZCxcbiAgICAgIGNsaWVudF9zZWNyZXQ6IHRoaXMuY2xpZW50U2VjcmV0LFxuICAgICAgcmVkaXJlY3RfdXJpOiB0aGlzLnJlZGlyZWN0VXJpLFxuICAgIH0pO1xuICAgIHJldHVybiByZXQgYXMgVG9rZW5SZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPQXV0aDIgUmV2b2tlIFNlc3Npb24gVG9rZW5cbiAgICovXG4gIGFzeW5jIHJldm9rZVRva2VuKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX3RyYW5zcG9ydC5odHRwUmVxdWVzdCh7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybDogdGhpcy5yZXZva2VTZXJ2aWNlVXJsLFxuICAgICAgYm9keTogcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHsgdG9rZW4gfSksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgICBsZXQgcmVzOiBhbnkgPSBxdWVyeXN0cmluZy5wYXJzZShyZXNwb25zZS5ib2R5KTtcbiAgICAgIGlmICghcmVzIHx8ICFyZXMuZXJyb3IpIHtcbiAgICAgICAgcmVzID0ge1xuICAgICAgICAgIGVycm9yOiBgRVJST1JfSFRUUF8ke3Jlc3BvbnNlLnN0YXR1c0NvZGV9YCxcbiAgICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogcmVzcG9uc2UuYm9keSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyAoY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbixcbiAgICAgICAgfToge1xuICAgICAgICAgIGVycm9yOiBzdHJpbmc7XG4gICAgICAgICAgZXJyb3JfZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgfSkge1xuICAgICAgICAgIHN1cGVyKGVycm9yX2Rlc2NyaXB0aW9uKTtcbiAgICAgICAgICB0aGlzLm5hbWUgPSBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSkocmVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFzeW5jIF9wb3N0UGFyYW1zKHBhcmFtczogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH0pOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICh0aGlzLmNvZGVWZXJpZmllcikgcGFyYW1zLmNvZGVfdmVyaWZpZXIgPSB0aGlzLmNvZGVWZXJpZmllcjtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fdHJhbnNwb3J0Lmh0dHBSZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgdXJsOiB0aGlzLnRva2VuU2VydmljZVVybCxcbiAgICAgIGJvZHk6IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShwYXJhbXMpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGxldCByZXM7XG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgICByZXMgPSByZXMgfHwge1xuICAgICAgICBlcnJvcjogYEVSUk9SX0hUVFBfJHtyZXNwb25zZS5zdGF0dXNDb2RlfWAsXG4gICAgICAgIGVycm9yX2Rlc2NyaXB0aW9uOiByZXNwb25zZS5ib2R5LFxuICAgICAgfTtcbiAgICAgIHRocm93IG5ldyAoY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbixcbiAgICAgICAgfToge1xuICAgICAgICAgIGVycm9yOiBzdHJpbmc7XG4gICAgICAgICAgZXJyb3JfZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgfSkge1xuICAgICAgICAgIHN1cGVyKGVycm9yX2Rlc2NyaXB0aW9uKTtcbiAgICAgICAgICB0aGlzLm5hbWUgPSBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSkocmVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPQXV0aDI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsVUFBVSxFQUFFQyxXQUFXLFFBQVEsUUFBUTtBQUNoRCxPQUFPQyxXQUFXLE1BQU0sYUFBYTtBQUNyQyxPQUFPQyxTQUFTLElBQUlDLGdCQUFnQixFQUFFQyxrQkFBa0IsUUFBUSxhQUFhO0FBRzdFLElBQU1DLG1CQUFtQixHQUFHO0VBQzFCQyxRQUFRLEVBQUU7QUFDWixDQUFDOztBQUVEO0FBQ0E7QUFDQSxTQUFTQyxlQUFlQSxDQUFDQyxhQUFxQixFQUFVO0VBQ3REO0VBQ0E7RUFDQSxPQUFPQSxhQUFhLENBQ2pCQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUNuQkEsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FDbkJBLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTs7QUFrQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBYUMsTUFBTTtFQVlqQjtBQUNGO0FBQ0E7RUFDRSxTQUFBQSxPQUFZQyxNQUFvQixFQUFFO0lBQUFDLGVBQUEsT0FBQUYsTUFBQTtJQUFBRyxlQUFBO0lBQUFBLGVBQUE7SUFBQUEsZUFBQTtJQUFBQSxlQUFBO0lBQUFB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
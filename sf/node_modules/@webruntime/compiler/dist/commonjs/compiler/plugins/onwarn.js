"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** @hidden */
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const errors_1 = require("@lwc/errors");
const warningBlacklist = [/Circular dependency/, /is not exported by/];
/**
 * A Rollup onwarn function.
 * Add warnings to the given diagnostics array.
 *
 * @param diagnostics - Array of errors and warnings accumulated while bundling
 */
function handleRollupWarning(diagnostics) {
    return function onwarn(warning) {
        let message;
        let origin = {};
        // Extract warning message, and location if available.
        if (typeof warning === 'string') {
            message = warning;
        }
        else {
            message = warning.message;
            if (warning.loc) {
                const { loc, pos } = warning;
                origin = {
                    filename: loc.file,
                    location: {
                        line: loc.line,
                        column: loc.column,
                        start: pos,
                        length: 0,
                    },
                };
            }
        }
        // Ignore blacklisted warnings.
        if (warningBlacklist.some(regexp => regexp.test(message))) {
            return;
        }
        // Add to the compiler diagnostics.
        diagnostics.push(errors_1.generateCompilerDiagnostic(errors_1.ModuleResolutionErrors.MODULE_RESOLUTION_ERROR, {
            messageArgs: [message],
            origin,
        }));
    };
}
exports.handleRollupWarning = handleRollupWarning;
//# sourceMappingURL=onwarn.js.map
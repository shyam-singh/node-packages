"use strict";
/** @hidden */
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const glob_to_regexp_1 = __importDefault(require("glob-to-regexp"));
const options_1 = require("@lwc/compiler/dist/commonjs/options");
// compiler-service utils:
// Default RuntimeCompilerOptions.
const DEFAULT_OPTIONS = {
    files: {},
    input: undefined,
    format: 'amd',
    plugins: [],
    external: [],
    inlineConfig: [],
};
/**
 * Extend the LWC CompilerConfig validation to have files be optional.
 *
 * @param options - Configuration passed into the Compiler
 */
function validateOptions(options) {
    // Merge the relevant lwc plugin options to normalize them
    const lwcOptions = options.lwcOptions || {};
    const { stylesheetConfig, experimentalDynamicComponent } = lwcOptions;
    const normalizedTransformOptions = options_1.validateTransformOptions({
        ...options,
        stylesheetConfig,
        experimentalDynamicComponent,
    });
    return {
        ...DEFAULT_OPTIONS,
        ...normalizedTransformOptions,
        lwcOptions: {
            rootDir: options.baseDir,
            ...lwcOptions,
            // use the normalized versions of these values, not raw from options.lwcOptions
            stylesheetConfig: normalizedTransformOptions.stylesheetConfig,
            experimentalDynamicComponent: normalizedTransformOptions.experimentalDynamicComponent,
        },
    };
}
exports.validateOptions = validateOptions;
/**
 * Return an external function Rollup, based on the current module ID and Compiler config.
 *
 * @param moduleId - The ID of the module being built (eg: 'x/foo')
 * @param inlineConfig - Inline config array passed into the Compiler
 * @param external - External array passed into the Compiler
 *
 * @returns - A function which returns true or false if a given ID should be an external dependency
 */
function createExternals(moduleId = '', inlineConfig = [], external = []) {
    // Find all "inlineConfig" descriptors that match the current module ID.
    const filters = inlineConfig
        .filter((config) => {
        const importId = util_1.isString(config) ? config : config.descriptor;
        const idRegexp = glob_to_regexp_1.default(importId);
        return idRegexp.test(moduleId);
    })
        // Concatenate all the exclude arrays from each matching "inlineConfig" descriptor,
        //      along with the hardcoded "external" array.
        .reduce((allExcludes, config) => {
        const exclusions = util_1.isString(config) || !config.exclude ? [] : config.exclude;
        return [...allExcludes, ...exclusions];
    }, util_1.isArray(external) ? external : [])
        // Map the exclude globs to regular expressions.
        .map((glob) => {
        return util_1.isString(glob) ? glob_to_regexp_1.default(glob) : glob;
    });
    // Return a function which checks if a given ID matches any in the filter array.
    return (id) => {
        // Run the external as a function.
        if (external instanceof Function && external(id)) {
            return true;
        }
        // Otherwise look at the inlineConfig filters.
        return filters.some((regexp) => regexp.test(id));
    };
}
exports.createExternals = createExternals;
/**
 * Turn the array of strings into an array of DynamicImport objects.
 * @example
 *          'x/footer?pivots=route:about,route:home' =>
 *          { specifier: 'x/foo', pivots: ['route:about','locale:es'] }
 *
 * @param specifier - A module specifier to parse for a pivots query parameter
 */
function parsePivots(specifier = '') {
    const url = new URL(`http://parse.com/${specifier}`);
    const pivots = url.searchParams.get('pivots');
    return {
        specifier: url.pathname.substring(1),
        pivots: pivots ? pivots.split(',') : [],
    };
}
exports.parsePivots = parsePivots;
exports.lintConfig = {
    allowInlineConfig: false,
    ignorePattern: ['*.css', '*.html'],
    parser: require.resolve('babel-eslint'),
    parserOptions: {
        ecmaVersion: 7,
        sourceType: 'module',
    },
    rules: {
        'no-restricted-imports': [
            'error',
            {
                paths: [
                    {
                        name: 'webruntime_loader/loader',
                        message: 'LWR loader is a privileged API.',
                    },
                ],
            },
        ],
    },
    useEslintrc: false,
};
//# sourceMappingURL=utils.js.map
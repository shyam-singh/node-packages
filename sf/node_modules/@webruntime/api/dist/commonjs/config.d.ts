/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
/// <reference types="express-serve-static-core" />
import { Plugin } from 'rollup';
import Helmet from 'helmet';
import { OutputConfig } from '@lwc/compiler/dist/types/options';
import { InlineConfig, LwcPluginOptions, RuntimeCompilerOptions } from '@webruntime/compiler';
import { WebruntimeAppDefinitionCtor } from './webruntime-app';
import { ServiceDefinitionCtor } from './service-definition';
export declare const WEBRUNTIME_APP_CONFIG_JS_FILENAME = "webruntime-app.config.js";
export declare type InlineConfigEntry = InlineConfig | string;
declare type CompilerPluginGenerator = Function | Plugin;
/** The compilation modes available to be configured for LWR */
export declare enum CompileMode {
    dev = "dev",
    prod = "prod",
    compat = "compat",
    prod_compat = "prod_compat"
}
/** The compiler module formats available to be configured for LWR. Note, native ESM format is experimental only. */
export declare enum SupportedModuleFormat {
    AMD = "amd",
    ExperimentalESM = "esm"
}
declare type RuntimeOutputConfig = OutputConfig & {
    lwcOptions?: LwcPluginOptions;
};
declare type OutputConfigEntry = {
    [mode in CompileMode]?: RuntimeOutputConfig;
};
interface CompilerOptionsExtension {
    outputConfigs?: OutputConfigEntry;
    plugins?: CompilerPluginGenerator[];
    lwcOptions?: LwcPluginOptions;
}
export declare type CompilerConfig = CompilerOptionsExtension & Pick<RuntimeCompilerOptions, 'format' | 'formatConfig' | 'inlineConfig'>;
export interface AdditionalProperties {
    [any: string]: string | number | boolean | object;
}
export interface ServerOptions {
    config?: PartialConfig;
    configFiles?: string[];
    additionalProperties?: AdditionalProperties;
}
export declare type ExtensionOptions = PublicConfig & Pick<ServerOptions, 'additionalProperties'>;
export interface AppExtensionConfig {
    options: ExtensionOptions;
    app: Express.Application;
}
export interface ContainerAppExtension {
    extendApp(config: AppExtensionConfig): void;
}
interface ServerConfig {
    port: number;
    extensions: ContainerAppExtension[];
    resourceRoot: string;
    basePath: string;
    contentSecurityPolicy?: Helmet.IHelmetContentSecurityPolicyConfiguration;
}
export interface BundleConfig {
    descriptor: string;
    exclude?: string[];
}
export declare type BundleConfigEntry = BundleConfig | string;
export interface ApplicationConfig {
    /** Optionally specify a custom LWR Application definition class. When this property is omitted, LWR provides a default implementation */
    definition?: WebruntimeAppDefinitionCtor;
    defaultComponent: string;
    defaultTemplate: string;
}
/**
 * The expected shape of the webruntime-app.config.js
 */
export interface Config {
    /** Runtime application configuration */
    app?: ApplicationConfig;
    /**
     * Root project directory  -- defaults to process.cwd()
     */
    projectDir: string;
    /** Default directory for the build output; Relative to the process.cwd(); */
    buildDir: string;
    /** A list of resources which should bundle their dependencies on request. */
    bundle: BundleConfigEntry[];
    /** A list of modules to be treated as external, and preloaded during bootstrap */
    preloadModules: string[];
    /** Compiler options including -- the list of resources to inline during compiliation. */
    compilerConfig: CompilerConfig;
    /** Array of addressable services used by the container. */
    services: ServiceDefinitionCtor[];
    /**
     * Defines the directory where to find the individual modules.
     * NOTE: This is optional for cases where a project is only serving components/resources
     * from dependencies.
     */
    moduleDir?: string;
    /** Runtime server settings */
    server: ServerConfig;
    /** A list of module specifiers which are provided external to the webruntime compiler/bundler. */
    externals?: string[];
    /** Default mode for LWR runtime and compiler, must be one of [CompileMode](docs/enums/_config_.compilemode) */
    defaultMode: CompileMode;
    /** Default locale for LWR runtime and compiler */
    defaultLocale: string;
}
declare type DeepPartial<T> = T extends object ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : T;
export declare type PartialConfig = DeepPartial<Config>;
declare type PublicBaseConfig = Pick<Config, 'projectDir' | 'buildDir' | 'moduleDir' | 'compilerConfig'>;
export interface PublicConfig extends PublicBaseConfig {
    server: Pick<ServerConfig, 'resourceRoot' | 'basePath'>;
    additionalProperties: Pick<ServerOptions, 'additionalProperties'>;
}
export declare const DEFAULT_CONFIG: {
    projectDir: string;
    buildDir: string;
    server: {
        port: number;
        extensions: never[];
        resourceRoot: string;
        basePath: string;
    };
    defaultMode: CompileMode;
    defaultLocale: string;
    bundle: never[];
    preloadModules: never[];
    services: never[];
    compilerConfig: {
        format: SupportedModuleFormat;
        formatConfig: {
            amd: {
                define: string;
            };
        };
        inlineConfig: never[];
        outputConfigs: {
            dev: {
                compat: boolean;
                minify: boolean;
                sourcemap: boolean;
                env: {
                    NODE_ENV: string;
                };
            };
        };
        plugins: never[];
    };
};
/** Configuration Builder options */
interface BuildOptions {
    dynamicConfig?: PartialConfig;
    configFiles?: string[];
}
/**
 * Build a {@link Config} object from the webruntime configurations provided in
 * the **projectDir** and merged with the webruntime configurations referenced
 * in the  **configFiles**.
 * The merged configuration follows the order --
 *  1. default configuration {@link DEFAULT_CONFIG}
 *  2. configuration provided by the **configFiles** using array ordering
 *  3. project configuration found in the projectDir.
 *  4. Dynamic config (optionally provided in ServerOptions.config)
 *
 * @param dynamicConfig : (optional) Partial<Config> representing dynamic configuration options
 * @param configFiles : (optional) A list of paths to {@link Config} files.
 *
 */
export declare function buildConfig(options?: BuildOptions): Config;
export {};
//# sourceMappingURL=config.d.ts.map
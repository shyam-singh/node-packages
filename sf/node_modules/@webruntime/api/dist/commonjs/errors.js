"use strict";
/** @hidden */
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Take a string and replace the variables.
 * @example
 * ('Replace "{0} and {1}", ['this','that']) => 'Replace "this" and "that"'
 *
 * @param template - string with variables
 * @param args - array of variable replacments
 */
function templateString(template, args) {
    return template.replace(/\{([0-9]+)\}/g, (_, index) => {
        return args[index];
    });
}
/**
 * Build an LWR-style message.
 *
 * @param info
 */
function generateMessage(info, args) {
    const message = Array.isArray(args) ? templateString(info.message, args) : info.message;
    return `LWR${info.code}: ${message}`;
}
exports.generateMessage = generateMessage;
/**
 * Throw an error if the condition is false.
 *
 * @param condition - Expression to assert is true
 * @param errorInfo - Error object to throw if false
 * @param args - Variables to fill in the message
 */
function invariant(condition, errorInfo, args) {
    if (!condition) {
        throw new Error(generateMessage(errorInfo, args));
    }
}
exports.invariant = invariant;
//# sourceMappingURL=errors.js.map
import { Request as ExpressRequest } from 'express';
import { PublicConfig } from './config';
import { WebruntimeAppDefinition } from './webruntime-app';
/**
 * The Base LWR Page class which LWR pages extend
 *
 * Create a custom Page class extended from WebruntimePage:
 * @example
 *```js
 * const {WebruntimePage} = require('@webruntime/api');
 *
 * class SamplePage extends WebruntimePage {
 *   get experimental_scripts() {
 *     const { request } = this.pageContext;
 *     const mode = request.query && request.query['lwr.mode']
 *     return [{
 *       code: `alert("${mode}")`;
 *     }, {
 *       href: `/public/js/assets/${mode}/metrics.js`
 *     }]
 *   }
 *
 *   get experimental_styles() {
 *     return '/public/css/main.css';
 *   }
 * }
 * ```
 */
export declare abstract class WebruntimePage {
    readonly app: WebruntimeAppDefinition;
    readonly req: ExpressRequest;
    readonly locals: object;
    readonly config: PublicConfig;
    private template;
    private component;
    private templateContent;
    constructor(app: WebruntimeAppDefinition, req: ExpressRequest, locals: object, config: PublicConfig, opts?: PageOptions);
    /**
     * A context object containing metadata for this page. This method should *not* be overridden.
     */
    get pageContext(): PageContext;
    /**
     * The template contents used to render the document for this page. Can be overriden to
     * customize the contents prior to rendering of the final page document.
     *
     * @example
     *```js
     * const {WebruntimePage} = require('@webruntime/api');
     * const moment = require('moment');
     * class SamplePage extends WebruntimePage {
     *   get experimental_content() {
     *      const content = this.pageContext.templateContent;
     *      // Replace a directive present in your template file
     *      content.replace('{someDsl}', moment.now());
     *      return content;
     *   }
     * }
     *```
     *
     * This is an experimental feature.
     */
    get experimental_content(): any;
    /**
     * The HTTP content-type header returned for this page.
     */
    get contentType(): string;
    /**
     * Custom styles that are rendered for this page.
     *
     * This is an experimental feature.
     */
    get experimental_styles(): Style | Style[];
    /**
     * Custom scripts that are rendered for this page.
     *
     * This is an experimental feature.
     */
    get experimental_scripts(): Script | Script[];
}
export interface PageContext {
    app: WebruntimeAppDefinition;
    request: ExpressRequest;
    locals: object;
    config: PublicConfig;
    component: string;
    template: string;
    templateContent: string;
}
export interface WebruntimePageCtor {
    new (app: WebruntimeAppDefinition, req: ExpressRequest, locals: object, config: PublicConfig, opts: PageOptions): WebruntimePage;
}
export interface PageDefinition {
    route: string;
    page: WebruntimePageCtor;
    component?: string;
    template?: string;
}
export interface PageOptions {
    template?: string;
    component?: string;
}
export interface Href {
    href: string;
}
export interface Code {
    code: string;
}
export declare type Script = Href | Code | string;
export interface StyleBase {
    media: string;
}
export interface StyleHref extends StyleBase, Href {
}
export interface StyleCode extends StyleBase, Code {
}
export declare type Style = StyleHref | StyleCode | string;
//# sourceMappingURL=webruntime-page.d.ts.map
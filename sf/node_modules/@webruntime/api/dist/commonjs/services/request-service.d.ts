/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import { OutputConfig } from '@lwc/compiler/dist/types/options';
import { LWCErrorInfo } from '@lwc/errors';
import { DynamicImport } from '@webruntime/compiler';
import { ServiceDefinition, UriServiceDefinition } from '../service-definition';
import { ContainerContext, RequestParams } from '../options';
interface ResourceMetadata {
    dependencies: string[];
    dynamicImports?: DynamicImport[];
}
declare type SourceMap = any;
export interface ComponentResource {
    code: string;
    map: SourceMap | null;
    outputConfig: OutputConfig;
}
declare type JSONPrimitive = string | number | boolean | null;
declare type JSONValue = JSONPrimitive | JSONObject | JSONArray;
interface JSONArray extends Array<JSONValue> {
}
declare type JSONObject = {
    [member: string]: JSONValue;
};
export interface JsonResource {
    json: JSONObject;
}
export declare type RequestOutput = ComponentRequestOutput | JsonRequestOutput;
export declare enum RequestOutputTypes {
    JSON = "json",
    COMPONENT = "component"
}
interface BaseRequestOutput {
    uid?: string;
    type: RequestOutputTypes;
    specifier: string;
    metadata?: ResourceMetadata;
    success: boolean;
    diagnostics: LWCErrorInfo[];
}
export interface ComponentRequestOutput extends BaseRequestOutput {
    type: RequestOutputTypes.COMPONENT;
    resource?: ComponentResource;
}
export interface JsonRequestOutput extends BaseRequestOutput {
    type: RequestOutputTypes.JSON;
    resource?: JsonResource;
}
/**
 * A service which exposes components to be built by a Container.build() request.
 * e.g. - container.build("my/app")
 */
export interface RequestService extends UriServiceDefinition {
    request(specifier: string, params: RequestParams, context: ContainerContext): Promise<RequestOutput>;
}
export declare function supportsRequests(service: ServiceDefinition): service is RequestService;
export declare function containsComponentResource(output: RequestOutput): output is ComponentRequestOutput;
export declare function containsJsonResource(output: RequestOutput): output is JsonRequestOutput;
export {};
//# sourceMappingURL=request-service.d.ts.map
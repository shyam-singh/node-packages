/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { subscribe } from 'webruntime_navigation/navigation';
import { getNavigationContextId } from 'webruntime_navigation/navigationContext';

import { ValueChangedEvent, register } from 'wire-service';

/**
 * Services @wire(CurrentPageReference) requests.
 * Hooks up to an Observable from the current navigation context.
 *
 * @param {*} CurrentPageReference - Wire name
 * @param {WireEventTarget} target - Component target to listen to the wire
 */
const CurrentPageReference = () => {
    throw new Error('Imperative use is not supported. Use @wire(CurrentPageReference)');
};

// Declarative access: register a wire adapter factory for @wire(CurrentPageReference)
register(CurrentPageReference, target => {
    let subscription;

    // Invoked when a component is connected. Subscribe to the stream from the current navigation context.
    target.addEventListener('connect', () => {
        if (!subscription) {
            subscription = subscribe(getNavigationContextId(target, true), pageRef => {
                // Page References should have a 'type', but not an 'id'
                // Make a copy because the object from subscribe is frozen
                const pageRefCopy = { ...pageRef };
                delete pageRefCopy.id;
                target.dispatchEvent(new ValueChangedEvent(pageRefCopy));
            });
        }
    });

    // Invoked when a component is disconnected. Unsubscribe from the Observable.
    target.addEventListener('disconnect', () => {
        if (subscription) {
            subscription.unsubscribe();
            subscription = undefined;
        }
    });
});

export { CurrentPageReference };

/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { isObject, isSimpleRoute, isValidRoute, simpleRouteType } from './typeUtils';
import { getPathFromUrl, getQueryFromUrl, getQueryString } from './uriUtils';
import { getAttributesFromPathAndRouteDef, getRouteDefFromRoute } from './routeDefUtils';

/*
 * Utilities for handling routes.
 * Includes translation from URL to route, and vice versa.
 */

/**
 * f(route, routes[]?) -> "/some/relative/path?param1=one&param2=two"
 * Match a route to a Route Definition, use these to build a URL.
 *
 * @param {object} route - Route to parse for a URL (ie: path+query)
 * @param {array[object]} routeDefs - List of Route Definitions to match to the route
 *
 * @returns {string | null} Returns null if a URL cannot be built.
 */
export function getUrlFromRoute(route, routeDefs = []) {
    const routeDef = getRouteDefFromRoute(route, routeDefs);
    const path = getPathFromRoute(route, routeDef);

    return {
        url: path ? path + getQueryStringFromRoute(route) : null,
        data: routeDef ? routeDef.original : null,
    };
}

/**
 * f(route, RouteDef?) -> "/some/relative/path"
 * De-parameterize the route attributes into a path, using the Route Definition path.
 *
 * @param {object} route - Route to parse for a path
 * @param {object} routeDef - Route definition which matches the route,
 *                   use its path to compile the parameterized path,
 *                   a missing Route Definition means the route is handled as a Simple Route
 *
 * @returns {string}
 */
export function getPathFromRoute(route, routeDef) {
    // Return the included URL for Simple Routes (no route match)
    if (isSimpleRoute(route)) {
        return route.attributes.path;
    }

    // Return null for invalid or non-matching routes.
    if (!routeDef || !isValidRoute(route)) {
        return null;
    }

    // De-parameterize the route's attributes according to the Route Definition path.
    // Ensure spaces are encoded with '+' not '%20'.
    return routeDef.original.path === '/'
        ? '/'
        : routeDef.toPath(route.attributes).replace(/%20/g, '+');
}

/**
 * helper: f(route) -> "?param1=one&param2=two"
 *
 * @param {object} route - Route to parse for a query (the state)
 *
 * @returns {string}
 */
export function getQueryStringFromRoute(route = {}) {
    // Transform the route into a query string, if it exists.
    return Object.prototype.hasOwnProperty.call(route, 'state') && isObject(route.state)
        ? getQueryString(route.state)
        : '';
}

/**
 * f(URL, routes[]?) -> route
 * Match a URL's path to a Route Definition, use these to build a route.
 *
 * @param {string} url - URL string to turn into a route
 * @param {array[object]} routeDefs - List of Route Definitions to match to the url
 *
 * @returns {object}
 */
export function getRouteFromUrl(url, routeDefs = []) {
    // Parse the URL.
    const path = getPathFromUrl(url);
    const queryObj = getQueryFromUrl(url);

    // Try to match the URL to a Route Definition.
    const routeDef = routeDefs.find(def => def.regex.test(path)) || null;
    let route;

    // If there is no Route Definition match, return a Simple Route.
    if (!routeDef) {
        route = {
            route: {
                // Ensure there is a type included.
                type: simpleRouteType,
                attributes: { path },
                state: { ...queryObj },
            },
            data: null,
        };
    } else {
        // Pull the parameters defined in routeDef.path out of the URL into an attributes object.
        const attributes = getAttributesFromPathAndRouteDef(path, routeDef);

        // Return the route with the Route Definition as data.
        const originalRouteDef = routeDef.original;
        route = {
            route: {
                id: originalRouteDef.id,
                attributes: { ...attributes },
                state: { ...queryObj },
            },
            data: originalRouteDef,
        };

        // Include the route definition type, if it exists.
        // This is to support the Salesforce page reference shape.
        if (originalRouteDef.page && originalRouteDef.page.type) {
            route.route.type = originalRouteDef.page.type;
        }
    }
    return route;
}

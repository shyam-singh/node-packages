/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

/*
 * Utilities for checking type, including route types.
 */

/**
 * f(any) -> true/false
 *
 * @param {*} o - Item to check if it's an object
 *
 * @returns {boolean}
 */
export function isObject(o) {
    return typeof o === 'object' && o !== null && !Array.isArray(o);
}

/**
 * f(any) -> void
 *
 * @param {*} o - Object to freeze 2 layers deep (e.g. { prop: 'p', o: { one: 1, two: 2 } })
 */
export function freeze(o) {
    if (isObject(o)) {
        try {
            Object.freeze(o);
            Object.keys(o).forEach(key => typeof o[key] === 'object' && Object.freeze(o[key]));
        } catch (e) {
            // Squash errors that occur when trying to freeze a Proxy.
            // This can happen when the Object has previously been sent over the wire-service.
        }
    }
    return o;
}

/**
 * Return a 4 character identifier.
 */
export function guid() {
    return Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);
}

/* A Simple Route is in this form:
 * {
 *     type: "standard_simpleRoute",
 *     attributes: {   // required
 *         path: "/some/relative/path"
 *     }
 *     state: {       // optional query params
 *         param1: "one"
 *     }
 * }
 * It matches this relative url: /some/relative/path?param1=one
 * The Simple Route is the default in the webruntime Router.
 */
export const simpleRouteType = 'standard__simpleRoute';

/**
 * helper: f(any) -> true/false
 *
 * @param {*} route - Item to check if it's a Simple Route
 *
 * @returns {boolean}
 */
export function isSimpleRoute(route) {
    // A route is a Simple Route if it is valid and contains only 1 attribute: 'path'
    return (
        isValidRoute(route) &&
        isObject(route.attributes) &&
        Object.keys(route.attributes).length === 1 &&
        Object.prototype.hasOwnProperty.call(route.attributes, 'path')
    );
}

/**
 * f(route) -> true/false
 *
 * @param {*} route - Item to check if it's a valid route
 *
 * @returns {boolean}
 */
export function isValidRoute(route) {
    // Ensure the type is Object with an id OR a type.
    return (
        isObject(route) &&
        (Object.prototype.hasOwnProperty.call(route, 'id') ||
            Object.prototype.hasOwnProperty.call(route, 'type'))
    );
}

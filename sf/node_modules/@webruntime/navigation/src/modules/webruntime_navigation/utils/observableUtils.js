/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

/**
 * Creates a simple observable object, which can have any number of observers.
 *
 * @returns {object}
 */
export function createObservable() {
    // Keep track of the current value and error.
    let currentValues = [];
    let currentError = null;

    // Observer list with functions to add and remove members safely.
    let observers = [];
    const addObserver = obs => observers.push(obs);
    const removeObserver = obsIndex => {
        observers[obsIndex] = null;
    };

    // On next, broadcast the value to all observers.
    // Clear out current error.
    const next = (...value) => {
        observers.filter(obs => obs !== null).forEach(obs => obs.next && obs.next(...value));
        currentValues = value;
        currentError = null;
    };

    // On error, broadcast the error to all observers.
    // Clear out current value.
    const error = err => {
        observers.filter(obs => obs !== null).forEach(obs => obs.error && obs.error(err));
        currentValues = [];
        currentError = err;
    };

    // On complete, call complete on all observers.
    // Clear out all observers + current value and error.
    const complete = () => {
        observers.filter(obs => obs !== null).forEach(obs => obs.complete && obs.complete());
        observers = [];
        currentValues = [];
        currentError = null;
    };

    // Observable can be subscribed and unsubscribed, by multiple observers.
    const subscribe = (obs, replay = true) => {
        addObserver(obs);

        // Push the current value and error, if they exist.
        if (obs.next && currentValues.length && replay) {
            obs.next(...currentValues);
        }
        if (currentError) {
            error(currentError);
        }

        // On unsubscribe, the observer is nulled out.
        const obsIndex = observers.length - 1;
        return {
            unsubscribe: () => removeObserver(obsIndex),
        };
    };

    // Return the observation methods + the associated observable.
    return {
        next,
        error,
        complete,
        subscribe,
    };
}

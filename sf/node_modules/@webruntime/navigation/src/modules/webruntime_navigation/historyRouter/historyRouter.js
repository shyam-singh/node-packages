/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import Router from 'webruntime_navigation/router';
import { getRelativeUrl, replace, set } from 'webruntime_navigation/utils';

/*
 * Provides a Router rooted to the window, which controls the browser history by default.
 */

export default class HistoryRouter extends Router {
    /**
     * Override.
     * Initialize with the current route and listen to the popstate event for future changes.
     */
    connect() {
        super.connect();

        // Subscribe to the Window.popstate event to listen for URL changes.
        window.addEventListener('popstate', () => {
            this.catchBrowserUpdate(getRelativeUrl(document.location.href));
        });
        this.catchBrowserUpdate(getRelativeUrl(document.location.href));
    }

    /***** Route Update *****/

    /**
     * Override.
     * Update the browser history if the preNavigate hooks.
     *
     * @param {string} url - The URL to go to
     * @param {boolean} shouldReplace - True if the current history state should be replaced
     * @param {boolean} updateHistory - True if the browser history should be updated with the new URL
     *
     * @returns {boolean} - True if the processing was NOT blocked by a preNavigate listener
     */
    async process(url, shouldReplace, updateHistory = true) {
        // Run the preNavigate hooks to check if this event should be processed.
        const canContinue = await super.process(url, shouldReplace);

        if (canContinue && updateHistory) {
            // Ensure the URL is basePath + a relative path + the query string.
            const pathWithQuery = url.indexOf(this.basePath) === 0 ? url : `${this.basePath}${url}`;

            // Update the window history.
            if (shouldReplace) {
                replace(pathWithQuery);
            } else {
                set(pathWithQuery);
            }
        }
        return canContinue;
    }

    /**
     * Update the root route, and trickle down the router tree.
     * Redirect to use the base path, if it is missing.
     *
     * @param {string} url - The URL to go to
     */
    catchBrowserUpdate(url) {
        const baseMissing = this.basePath && url.indexOf(this.basePath) !== 0;
        this.process(`${baseMissing ? this.basePath : ''}${url}`, baseMissing, baseMissing);
    }
}

/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import Router from 'webruntime_navigation/router';
import HistoryRouter from 'webruntime_navigation/historyRouter';
import { invariant, messages } from 'webruntime_navigation/utils';

/*
 * Provides programmatic routing capabilities.
 */

// The application may create 1 root router at a time.
let hasRoot = false;

/**
 * Create a new navigation context, attach to the given node.
 * An application can only have ONE root router.
 *
 * @param {HTMLElement} - The DOM node where the navigation context should be established
 * @param {object} config - The router config object, all properties are optional
 * @param {string} config.basePath - This router's base path
 * @param {object[]} config.routes - Array of route definitions
 * @param {string} config.handleNavigation - handleNavigation event handler override
 * @param {string} config.getRouteFromUrl - route => URL translation override
 * @param {string} config.getUrlFromRoute - URL => route translation override
 * @param {boolean} config.noHistory - True if the Router should NOT manage the browser history
 * @param {boolean} config.caseSensitive - When true, the route definition path matching will be case sensitive.
 *
 *
 * @returns {object} - { addPreNavigate, addPostNavigate, addErrorNavigate, connect, disconnect }
 */
export function createNavigationContext(node, config = {}) {
    // Create a Router, or a HistoryRouter if noHistory is true.
    const newRouter =
        config.noHistory === true
            ? // Create a basic Router.
              new Router(config, node)
            : // HistoryRouters manage browser history.
              new HistoryRouter(config, node);

    // Return a subset of the new router's capabilities.
    const routerAPI = {
        /**
         * Surface the preNavigate hook register function.
         *
         * @param {function} listener - The preNavigate hook listener function
         * @returns {object} - This bag of Router functions, for chaining
         */
        addPreNavigate: listener => {
            newRouter.addPreNavigate(listener);
            return routerAPI;
        },

        /**
         * Surface the postNavigate hook register function.
         *
         * @param {function} listener - The postNavigate hook listener function
         * @returns {object} - This bag of Router functions, for chaining
         */
        addPostNavigate: listener => {
            newRouter.addPostNavigate(listener);
            return routerAPI;
        },

        /**
         * Surface the errorNavigate hook register function.
         *
         * @param {function} listener - The errorNavigate hook listener function
         * @returns {object} - This bag of Router functions, for chaining
         */
        addErrorNavigate: listener => {
            newRouter.addErrorNavigate(listener);
            return routerAPI;
        },

        /**
         * Connect the root router if there isn't already one connected.
         */
        connect: () => {
            // Connect and expose this router's navigation context.
            newRouter.connect();
            // If there is already a root router, the new router must be a child (have a parent).
            invariant(!hasRoot || !!newRouter.parent, messages.MULTIPLE_ROOTS);
            hasRoot = hasRoot || !newRouter.parent;
            routerAPI.id = newRouter.contextConnection.id;
        },

        /**
         * Disconnect the router, and reset the root tracking variable.
         */
        disconnect: () => {
            newRouter.disconnect();
        },
    };

    // Return the public Router functions.
    return routerAPI;
}

/**
 * Create a new root Router, attach to the Window.
 * This is the public, programmitic API for root router creation.
 * An application can only have ONE root router.
 *
 * @param {object} config - The router config object
 *
 * @returns {object} - { addPreNavigate, addPostNavigate, addErrorNavigate, connect, disconnect }
 */
export function createRouter(config = {}) {
    return createNavigationContext(window, config);
}

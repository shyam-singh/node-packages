/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import { View } from './views';
/**
 * @example of a route definition:
 * {
    "id": "cmp",
    "path": "/account/:recordId/home",
    "component": "my/cmp",
    "page": {   // page reference metadata for LEX support
        "type": "standard__recordPage",
        "attributes": {
            "objectApiName": "Account"
        }
    }
}
 */
declare type PageReference = {
    type: string;
    attributes?: {
        [key: string]: string;
    };
};
export declare type RouteDefinition = {
    id: string;
    path: string;
    component?: View;
    page?: PageReference;
};
export declare type RouteSet = RouteDefinition[];
export declare type RouteSetGroup = {
    [key: string]: RouteSet;
};
export declare type RouteOutput = {
    id: string;
    path: string;
    view: Function;
    page?: PageReference;
};
export declare type RouteOutputSetGroup = {
    [key: string]: RouteOutput[];
};
export declare const ROUTE_PREFIX: string;
export declare const ROUTE_SERVICE_NAMESPACE: string;
export declare const ROUTES_NAMESPACE: string;
export declare const ROUTER_NAMESPACE: string;
export declare const ROUTES_DIR = "/src/routes";
/**
 * Return a map of all Route Sets by ID, for a given project.
 * A Route Set ID is the name of the json file that holds the data.
 * @example {
        parent: [
            { id: 'home', path: '/', component: "x/home" },
            { id: 'products', path: '/products', component: "x/products" },
            { id: 'recipes', path: '/recipes', component: "x/recipes" },
            { id: 'recipe', path: '/recipes/:title', component: "x/recipe" },
            { id: 'contact', path: '/contact', component: "x/contact" }
        ],
        child: [
            { id: 'home', path: '/', component: "c/home" },
            { id: 'about', path: '/about/:topic', component: "c/about"}
        ]
 * }
 *
 * @param projectDir - Root directory for the project
 */
export declare function getRouteSets(projectDir: string): RouteSetGroup;
/**
 * Flatten a group of Route Sets into 1 array of Route Definitions
 * Prefix each Route Definition id with its set id, to avoid clashes
 * @example [
            { id: 'parent.home', path: '/', component: "x/home" },
            { id: 'parent.products', path: '/products', component: "x/products" },
            { id: 'parent.recipes', path: '/recipes', component: "x/recipes" },
            { id: 'parent.recipe', path: '/recipes/:title', component: "x/recipe" },
            { id: 'parent.contact', path: '/contact', component: "x/contact" }
            { id: 'child.home', path: '/', component: "c/home" },
            { id: 'child.about', path: '/about/:topic', component: "c/about" }
        ]
 * }
 *
 * @param routeSets - A group of multiple Route Sets
 */
export declare function flattenRouteSets(routeSets: RouteSetGroup): RouteSet;
/**
 * Transform the components of all Route Definitions to be a View dynamic import.
 * * @example:
 *  {
        app: [{ id: 'home', path: '/home', component: "x/home" }, ...],
        child: [{ id: 'home', path: '/', component: "c/home" }. ...],
 *  }
        ==>
 *  {
        app: [{ id: 'home', path: '/home', view: async () => await import("webruntimeView/app.home") }, ...],
        child: [{ id: 'home', path: '/', view: async () => await import("webruntimeView/child.home") }, ...],
 * }
 *
 * @param routeSets - A group of Route Sets
 */
export declare function getCodifiedViews(routeSets: RouteSetGroup): RouteOutputSetGroup;
/**
 * Generate the html template and javascript file for a Router.
 * These get passed into the compiler as "virtual" files.
 *
 * @param setId - ID of the Route Set to pass into the Router
 */
export declare function generateRouterFiles(setId: string): {
    [key: string]: string;
};
export declare function validateRouteSets(routeSets: RouteSetGroup): void;
export {};
//# sourceMappingURL=routes.d.ts.map
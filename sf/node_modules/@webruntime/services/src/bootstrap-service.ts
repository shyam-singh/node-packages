/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import {
    AddressableService,
    BOOTSTRAP_SPECIFIER,
    ContainerContext,
    RequestOutput,
    RequestOutputTypes,
    RequestParams,
    RequestService,
    generateMessage,
} from '@webruntime/api';
import { compile } from '@webruntime/compiler';
import { Measure } from '@webruntime/performance';
import { bootstrapMessages as messages } from './messages';

const URI_PREFIX = `/bootstrap`;
const uri = `${URI_PREFIX}/:uid/:mode/:locale/${BOOTSTRAP_SPECIFIER.fullyQualified}`;

/**
 * A service which provides a virtual component to bootstrap a configured LWR application component.
 */
export class AppBootstrapService extends AddressableService implements RequestService {
    mappings = {
        [`${BOOTSTRAP_SPECIFIER.fullyQualified}`]: uri,
    };

    constructor() {
        super(uri);
    }

    async initialize() {
        /* nothing to do */
    }

    @Measure(specifier => `bootstrap-service:request:${specifier}`)
    async request(
        specifier: string,
        options: RequestParams,
        { app, compilerConfig }: ContainerContext
    ): Promise<RequestOutput> {
        if (!app) {
            throw new Error(generateMessage(messages.MISSING_APP_CONFIG));
        }

        const descriptor = app.defaultComponent;

        const virtualModule = generateAppInjector(descriptor);
        const files = {
            [`${BOOTSTRAP_SPECIFIER.fullyQualified}.js`]: virtualModule,
        };
        const { result, metadata, success, diagnostics } = await compile({
            ...compilerConfig,
            namespace: `${BOOTSTRAP_SPECIFIER.namespace}`,
            name: `${BOOTSTRAP_SPECIFIER.name}`,
            files,
        });
        return {
            type: RequestOutputTypes.COMPONENT,
            specifier,
            resource: result,
            metadata,
            success,
            diagnostics,
        };
    }
    toSpecifier(): string {
        return `${BOOTSTRAP_SPECIFIER.fullyQualified}`;
    }
}

function generateAppInjector(appName) {
    return `import App from '${appName}';
    import { buildCustomElementConstructor } from 'lwc';
    const elementName = '${appName}'.replace(/\\//, '-');
    customElements.define(elementName, buildCustomElementConstructor(App));
    `;
}

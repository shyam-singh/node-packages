/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import * as fs from 'fs';
import * as path from 'path';
import chokidar from 'chokidar';

let metadataWatcher;
let resourcesWatcher;

export const MANIFEST_FILE = 'resources.json';
export const METADATA_FILE = 'metadata.json';

export function getLatestCachedResourceMap(buildDir: string) {
    const version = getLatestVersion(buildDir);
    const manifest = loadManifest(buildDir);
    if (!manifest || !version) {
        return [];
    }
    return manifest[version] || [];
}

export function getLatestVersion(buildDir: string) {
    const file = path.join(buildDir, METADATA_FILE);
    const contents = fs.existsSync(file) ? JSON.parse(fs.readFileSync(file, 'utf8')) : {};
    return contents.latest || undefined;
}

export function initWatchers(buildDir: string, callback) {
    const metadataPath = path.resolve(`${buildDir}/${METADATA_FILE}`);
    const resourcesPath = path.resolve(`${buildDir}/${MANIFEST_FILE}`);

    metadataWatcher = chokidar.watch(metadataPath).on('change', callback);
    resourcesWatcher = chokidar.watch(resourcesPath).on('change', callback);
}

export function closeWatchers() {
    if (metadataWatcher) {
        metadataWatcher.close();
    }
    if (resourcesWatcher) {
        resourcesWatcher.close();
    }
}

function loadManifest(buildDir: string) {
    const file = path.join(buildDir, MANIFEST_FILE);
    return fs.existsSync(file) ? JSON.parse(fs.readFileSync(file, 'utf8')) : undefined;
}

/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { BOOTSTRAP_SPECIFIER } from '@webruntime/api';
import { AppBootstrapService } from '../bootstrap-service';

jest.mock('@webruntime/compiler', () => {
    const compilerOutput = {
        result: {
            code: 'console.log("hello world");',
            map: {},
            outputConfig: {},
        },
        metadata: {
            dependencies: ['sfx/app'],
        },
        success: true,
        diagnostics: [
            {
                message: 'foo',
                code: '123',
                filename: 'bar',
                location: 'baz',
                level: 'bae',
            },
        ],
    };
    return {
        compile: jest.fn().mockReturnValue(Promise.resolve(compilerOutput)),
        CompilerResourceMetadata: function(metadata) {
            Object.assign(this, metadata);
        },
        __getCompilerOutputForTesting: () => {
            return compilerOutput;
        },
    };
});

describe('@webruntime/services > bootstrap-service', () => {
    let appBootstrapSvc;
    const uri = `/bootstrap/:uid/:mode/:locale/${BOOTSTRAP_SPECIFIER.fullyQualified}`;
    beforeEach(() => {
        appBootstrapSvc = new AppBootstrapService();
    });

    it('sets uri correctly', () => {
        expect(appBootstrapSvc.uri).toEqual(uri);
    });

    it('sets mapping correctly', () => {
        expect(appBootstrapSvc.mappings).toEqual({
            [BOOTSTRAP_SPECIFIER.fullyQualified]: uri,
        });
    });

    describe('request', () => {
        const appName = 'sfx/app';
        const appConfig = {
            defaultComponent: appName,
        };
        const virtualModule = `import App from '${appName}';
    import { buildCustomElementConstructor } from 'lwc';
    const elementName = '${appName}'.replace(/\\//, '-');
    customElements.define(elementName, buildCustomElementConstructor(App));
    `;
        const compilerConfig = {
            baseDir: '/foo',
            format: 'amd',
            //...
        };
        const requestConfig = [
            BOOTSTRAP_SPECIFIER.fullyQualified,
            { mode: 'dev', locale: 'en_US' },
            { app: appConfig, compilerConfig },
        ];

        it('should compile a resource', async () => {
            const compilerSpy = require('@webruntime/compiler');
            await appBootstrapSvc.initialize();
            await appBootstrapSvc.request(...requestConfig);
            expect(compilerSpy.compile).toHaveBeenCalledTimes(1);
        });
        it('fail when there is no app', async () => {
            await appBootstrapSvc.initialize();
            await expect(
                appBootstrapSvc.request(BOOTSTRAP_SPECIFIER.fullyQualified, {}, {})
            ).rejects.toThrow('Application configuration is required to bootstrap');
        });
        it('should call compiler with virtual module', async () => {
            const compilerSpy = require('@webruntime/compiler');
            await appBootstrapSvc.request(...requestConfig);
            expect(compilerSpy.compile).toHaveBeenCalledWith({
                ...compilerConfig,
                namespace: BOOTSTRAP_SPECIFIER.namespace,
                name: BOOTSTRAP_SPECIFIER.name,
                files: {
                    [`${BOOTSTRAP_SPECIFIER.fullyQualified}.js`]: virtualModule,
                },
            });
        });
        it('should obey API contract', async () => {
            const compilerOutput = require('@webruntime/compiler').__getCompilerOutputForTesting();
            const result = await appBootstrapSvc.request(...requestConfig);
            expect(result).toEqual({
                type: 'component',
                specifier: BOOTSTRAP_SPECIFIER.fullyQualified,
                resource: compilerOutput.result,
                metadata: {
                    dependencies: compilerOutput.metadata.dependencies
                        ? compilerOutput.metadata.dependencies
                        : [],
                },
                success: compilerOutput.success,
                diagnostics: compilerOutput.diagnostics,
            });
        });
    });

    describe('toSpecifier', () => {
        it('should return static specifier', () => {
            expect(appBootstrapSvc.toSpecifier()).toEqual(BOOTSTRAP_SPECIFIER.fullyQualified);
        });
    });
});

"use strict";
/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const chokidar_1 = __importDefault(require("chokidar"));
let metadataWatcher;
let resourcesWatcher;
exports.MANIFEST_FILE = 'resources.json';
exports.METADATA_FILE = 'metadata.json';
function getLatestCachedResourceMap(buildDir) {
    const version = getLatestVersion(buildDir);
    const manifest = loadManifest(buildDir);
    if (!manifest || !version) {
        return [];
    }
    return manifest[version] || [];
}
exports.getLatestCachedResourceMap = getLatestCachedResourceMap;
function getLatestVersion(buildDir) {
    const file = path.join(buildDir, exports.METADATA_FILE);
    const contents = fs.existsSync(file) ? JSON.parse(fs.readFileSync(file, 'utf8')) : {};
    return contents.latest || undefined;
}
exports.getLatestVersion = getLatestVersion;
function initWatchers(buildDir, callback) {
    const metadataPath = path.resolve(`${buildDir}/${exports.METADATA_FILE}`);
    const resourcesPath = path.resolve(`${buildDir}/${exports.MANIFEST_FILE}`);
    metadataWatcher = chokidar_1.default.watch(metadataPath).on('change', callback);
    resourcesWatcher = chokidar_1.default.watch(resourcesPath).on('change', callback);
}
exports.initWatchers = initWatchers;
function closeWatchers() {
    if (metadataWatcher) {
        metadataWatcher.close();
    }
    if (resourcesWatcher) {
        resourcesWatcher.close();
    }
}
exports.closeWatchers = closeWatchers;
function loadManifest(buildDir) {
    const file = path.join(buildDir, exports.MANIFEST_FILE);
    return fs.existsSync(file) ? JSON.parse(fs.readFileSync(file, 'utf8')) : undefined;
}
//# sourceMappingURL=utils.js.map
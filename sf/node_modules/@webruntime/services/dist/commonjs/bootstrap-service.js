"use strict";
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@webruntime/api");
const compiler_1 = require("@webruntime/compiler");
const performance_1 = require("@webruntime/performance");
const messages_1 = require("./messages");
const URI_PREFIX = `/bootstrap`;
const uri = `${URI_PREFIX}/:uid/:mode/:locale/${api_1.BOOTSTRAP_SPECIFIER.fullyQualified}`;
/**
 * A service which provides a virtual component to bootstrap a configured LWR application component.
 */
class AppBootstrapService extends api_1.AddressableService {
    constructor() {
        super(uri);
        this.mappings = {
            [`${api_1.BOOTSTRAP_SPECIFIER.fullyQualified}`]: uri,
        };
    }
    async initialize() {
        /* nothing to do */
    }
    async request(specifier, options, { app, compilerConfig }) {
        if (!app) {
            throw new Error(api_1.generateMessage(messages_1.bootstrapMessages.MISSING_APP_CONFIG));
        }
        const descriptor = app.defaultComponent;
        const virtualModule = generateAppInjector(descriptor);
        const files = {
            [`${api_1.BOOTSTRAP_SPECIFIER.fullyQualified}.js`]: virtualModule,
        };
        const { result, metadata, success, diagnostics } = await compiler_1.compile({
            ...compilerConfig,
            namespace: `${api_1.BOOTSTRAP_SPECIFIER.namespace}`,
            name: `${api_1.BOOTSTRAP_SPECIFIER.name}`,
            files,
        });
        return {
            type: api_1.RequestOutputTypes.COMPONENT,
            specifier,
            resource: result,
            metadata,
            success,
            diagnostics,
        };
    }
    toSpecifier() {
        return `${api_1.BOOTSTRAP_SPECIFIER.fullyQualified}`;
    }
}
__decorate([
    performance_1.Measure(specifier => `bootstrap-service:request:${specifier}`)
], AppBootstrapService.prototype, "request", null);
exports.AppBootstrapService = AppBootstrapService;
function generateAppInjector(appName) {
    return `import App from '${appName}';
    import { buildCustomElementConstructor } from 'lwc';
    const elementName = '${appName}'.replace(/\\//, '-');
    customElements.define(elementName, buildCustomElementConstructor(App));
    `;
}
//# sourceMappingURL=bootstrap-service.js.map
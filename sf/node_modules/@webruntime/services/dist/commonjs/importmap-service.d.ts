/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import { AddressableService, RequestOutput, RequestParams, RequestService } from '@webruntime/api';
declare const IMPORTMAP_SVC_SPECIFIER = "importmap";
/**
 * The core Importmap Service is responsible for providing an addressable
 * importmap resource (compliant with WICG import-map specification) in
 * the format expected by the client loader.
 */
export declare class ImportMapService extends AddressableService implements RequestService {
    mappings: {
        [IMPORTMAP_SVC_SPECIFIER]: string;
    };
    private buildDir;
    private basePath;
    private uidMap;
    private uidMapChanged;
    private importMapCache;
    private updateUIDMap;
    /**
     * Create an {@link ImportMapService}
     *
     * @param {object} options Constructor options
     * @param {string} options.buildDir Configured build directory
     * @param {string} options.server.baseDir Configured base path
     */
    constructor({ buildDir, server: { basePath } }: {
        buildDir: any;
        server: {
            basePath: any;
        };
    });
    /**
     * Initializes the {@link ImportMapService}
     */
    initialize(): Promise<void>;
    /**
     * Ties into container shutdown lifecycle to perform cleanup.
     * Close watchers that were started via initialize().
     */
    shutdown(): void;
    /**
     * Implementation of {@link RequestService} `request` API which enables {@link ImportMapService}
     * to handle requests for supported resources as defined by its service `mappings`.
     *
     * @param {string} specifier Specifier for an importmap resource
     * @param {object} options a {@link RequestParams} object
     * @param {object} context a context object provided by the container
     * @param {object} context.metadata metadata provided by the container that includes the current importmap
     *
     * @returns {Promise<RequestOutput>} a promise which resolves to a RequestOutput object including an importmap resource
     */
    request(specifier: string, options: RequestParams, { metadata }: {
        metadata: any;
    }): Promise<RequestOutput>;
    /**
     * Implementation of {@link AddressableService} `toSpecifier` API which returns the
     * `specifier` for an importmap resource.
     *
     * @returns {string} importmap specifier
     */
    toSpecifier(): string;
}
export {};
//# sourceMappingURL=importmap-service.d.ts.map
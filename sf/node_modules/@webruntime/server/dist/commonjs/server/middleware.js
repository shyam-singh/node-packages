"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@webruntime/api");
const cached_resource_middleware_1 = require("../middleware/cached-resource-middleware");
const resource_middleware_1 = require("../middleware/resource-middleware");
const utils_1 = require("../utils/utils");
const page_middleware_1 = require("../middleware/page-middleware");
const static_middleware_1 = require("../middleware/static-middleware");
function mountMiddleware(container, app, config) {
    mountServicesMiddleware(container, app, config);
    mountStaticMiddleware(app, config);
    mountPageMiddleware(container, app, config);
}
exports.mountMiddleware = mountMiddleware;
function mountServicesMiddleware(container, app, config) {
    // mount a middleware handler for each Request enabled addressable service
    for (const instance of container.services) {
        if (api_1.supportsRequests(instance)) {
            const uris = Array.isArray(instance.uri) ? instance.uri : [instance.uri];
            uris.forEach(serviceUri => {
                const uri = config.server.resourceRoot + serviceUri;
                if (uri.includes(':uid')) {
                    app.get(uri, cached_resource_middleware_1.createCachedResourceMiddleware(instance, container, config));
                }
                else {
                    app.get(uri, resource_middleware_1.createResourceMiddleware(instance, container));
                }
            });
        }
    }
    if (config.moduleDir) {
        utils_1.startVersionWatch(config);
    }
}
function mountStaticMiddleware(app, config) {
    // static middleware
    const handlers = static_middleware_1.createStaticMiddleware(config);
    if (handlers.length) {
        app.use(handlers);
    }
}
function mountPageMiddleware(container, app, config) {
    // page middleware
    const pageConfig = config.app;
    if (pageConfig) {
        // WebruntimeAppDefinitionCtor should be defaulted in config:buildConfig if not defined in user config
        const AppConstructor = pageConfig.definition;
        const pageApp = new AppConstructor(config.app);
        // Mount page middleware handler for each page definition
        pageApp.pages.forEach(pageDef => {
            app.get(pageDef.route, page_middleware_1.createPageMiddleware(pageDef, pageApp, container));
        });
    }
}
async function shutdownMiddleware() {
    await utils_1.stopVersionWatch();
}
exports.shutdownMiddleware = shutdownMiddleware;
//# sourceMappingURL=middleware.js.map
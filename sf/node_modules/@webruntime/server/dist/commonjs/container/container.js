"use strict";
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@webruntime/api");
const performance_1 = require("@webruntime/performance");
const lodash_1 = require("lodash");
const messages_1 = require("../utils/messages");
const extensions_1 = require("../server/extensions");
const bootstrap_resource_list_1 = require("../bootstrap/bootstrap-resource-list");
const resource_bundle_1 = require("./resource-bundle");
const utils_1 = require("./utils");
const import_resolver_1 = require("./import-resolver");
const bundler_1 = require("./bundler");
const { warn } = console;
/**
 * A container of services providing application resources.
 */
class Container {
    // ******* Container Lifecycle ******
    // creation -- creation of all the services configured for this container.
    // initialization -- prereq: all services are created; each service is initialized serially.
    // build/request -- build requests can be made against the container; the container will provide a context for each request.
    // onResourceChanged -- [Experimental] fired when a resource has been modified
    constructor(config, additionalProperties) {
        // An import map of specifiers associated to their service provider.
        // The map provides a key for addressablity mapping between a request for
        // specifier - a to the service which can resolve that request and provide the
        // resource content.
        this.serviceMap = {
            imports: {},
        };
        this._isInitialized = false;
        this._config = config;
        this._additionalProperties = additionalProperties;
        // instantiate services from config.services.
        const { server: { extensions }, services, } = config;
        // Instantiate the configured addressable services
        const instances = [];
        services.forEach(ctor => {
            api_1.invariant(ctor && api_1.isAddressableService(ctor.prototype), messages_1.containerMessages.MISSING_SERVICE, [
                ctor,
            ]);
            const instance = new ctor(this.publicConfig);
            instances.push(instance);
        });
        // Apply any bootstrap extensions to the container
        // hooks to projectDir/config/extensions.js
        if (extensions) {
            for (let i = 0; i < extensions.length; i++) {
                const extension = extensions[i];
                if (extensions_1.isBootstrapExtensionHook(extension)) {
                    extension.bootstrap({
                        config,
                        serviceApi: {
                            add: (instance) => {
                                instances.push(instance);
                            },
                        },
                    });
                }
            }
        }
        this._services = Object.freeze(instances);
    }
    async initialize(pregenerate = true) {
        // initialize the collection of service instances
        const p = [];
        for (let i = 0; i < this._services.length; i++) {
            const service = this._services[i];
            p.push(this.initializeService(service, i));
        }
        await Promise.all(p);
        this._isInitialized = true;
        // TODO temp "hack" to pre-generate bootstrap resource list
        // at build/initialize time.  Won't be needed when LWR generator is done.
        // Also, if no app definition exists. Disable bootstrapping.
        if (this._config.app && pregenerate) {
            await bootstrap_resource_list_1.getBootstrapResourceList(this, this._config);
        }
    }
    async initializeService(service, i) {
        if (service.initialize) {
            await service.initialize( /* api */);
        }
        // extra metadata from the collection of service instances.
        const mappings = api_1.supportsRequests(service)
            ? service.mappings
            : null;
        if (mappings) {
            Object.keys(mappings).forEach((specifier) => {
                const serviceUri = mappings[specifier];
                const uri = this._config.server.resourceRoot + serviceUri;
                // If the specifier already exists, it means we
                // have two services providing the resource.  ---- throw error
                const existingMapping = this.serviceMap.imports[specifier];
                api_1.invariant(!existingMapping || existingMapping.instanceId === i, messages_1.containerMessages.SERVICE_CLASH, [specifier, existingMapping ? existingMapping.uri : null, uri]);
                this.serviceMap.imports[specifier] = { instanceId: i, uri };
            });
        }
    }
    // Component APIs
    async build(specifier, params = {}) {
        api_1.invariant(this._isInitialized, messages_1.containerMessages.MISSING_CONTAINER_TO_BUILD);
        const skipBundling = this.isUsingExperimentalModules();
        const results = await bundler_1.bundle(specifier, params, this, this._config, skipBundling);
        const uid = utils_1.computeBundleId(results); // hash the hashes
        const path = generateBundlePath(specifier, this.serviceMap, uid, params); // import map resolve the specifier
        return new resource_bundle_1.ResourceBundle({ specifier, results, uid, path });
    }
    // Page generation
    async renderPage(req, pageDef, pageApp, locals = {}) {
        // Read the user locale off the request.
        const langs = req.acceptsLanguages ? req.acceptsLanguages() : false;
        const locale = langs ? langs[0] : '';
        // Remove the 'lwr.' prefix from the request query,
        //      and add the values to the overrides if they exist
        const pivotOverrides = ['mode', 'locale'].reduce((pivots, key) => {
            const value = req.query[`lwr.${key}`];
            return value ? { ...pivots, [key]: value } : pivots;
        }, { locale });
        // Create new Page Definition
        const PageConstructor = pageDef.page;
        // TODO <W-6894762>: component overrides currently not working
        const opts = {
            component: pageDef.component,
            template: pageDef.template,
        };
        // Create a copy of req, otherwise there are issues freezing it in webruntime-page
        const page = new PageConstructor(pageApp, { ...req }, locals, this.publicConfig, opts);
        const resourceList = await bootstrap_resource_list_1.getBootstrapResourceList(this, this._config, page, pivotOverrides);
        const renderablePage = { page: page, resources: resourceList };
        return Promise.resolve(renderablePage);
    }
    find(specifier) {
        try {
            const entry = import_resolver_1.resolve(specifier, this.serviceMap);
            if (!entry || entry.instanceId === undefined) {
                return undefined;
            }
            return this._services[entry.instanceId];
        }
        catch (e) {
            warn(e);
            return undefined;
        }
    }
    isAppExternal(specifier) {
        const { externals } = this._config;
        return utils_1.isMaskedBy(specifier, externals);
    }
    isUsingExperimentalModules() {
        return this._config.compilerConfig.format === api_1.SupportedModuleFormat.ExperimentalESM;
    }
    get metadata() {
        return {
            // An import map of the imports and services provided by this container
            importMap: {
                imports: lodash_1.mapValues(this.serviceMap.imports, e => e.uri),
            },
        };
    }
    get publicConfig() {
        const { projectDir, buildDir, moduleDir, compilerConfig, server: { resourceRoot, basePath }, } = this._config;
        return Object.freeze({
            projectDir,
            buildDir,
            moduleDir,
            compilerConfig,
            server: { resourceRoot, basePath },
            additionalProperties: { ...this._additionalProperties },
        });
    }
    get services() {
        return this._services;
    }
    async shutdown() {
        // shutdown the collection of service instances
        const p = [];
        for (let i = 0; i < this._services.length; i++) {
            const service = this._services[i];
            if (service.shutdown) {
                p.push(Promise.resolve(service.shutdown()));
            }
        }
        await Promise.all(p);
    }
}
__decorate([
    performance_1.Measure('container:initialize')
], Container.prototype, "initialize", null);
__decorate([
    performance_1.Measure((specifier) => {
        return `container:build:${specifier}`;
    })
], Container.prototype, "build", null);
__decorate([
    performance_1.Measure((req, pageDef) => {
        return `container:renderPage:${pageDef.route}`;
    })
], Container.prototype, "renderPage", null);
exports.Container = Container;
function generateBundlePath(specifier, serviceMap, uid, params) {
    const { uri } = import_resolver_1.resolve(specifier, serviceMap);
    const url = utils_1.replaceAll(uri, { uid, ...params });
    return url.replace('latest', uid);
}
//# sourceMappingURL=container.js.map
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
declare type ResourceDescriptor = {
    type: string;
    name: string;
    locale?: string;
};
/**
 * Available resource types
 */
export declare const RESOURCE_TYPES: {
    FRAMEWORK: string;
    DESIGN: string;
    COMPONENT: string;
    VIEW: string;
    DESIGNCOMPONENT: string;
};
/**
 * A resource descriptor
 *
 * @typedef {Object} ResourceDescriptor
 * @property {string} type The resource type
 * @property {string} name The resource name, unique for a given type
 * @property {string} [locale] The resource locale, if applicable
 */
/**
 * Parse a resource descriptor string representation.
 *
 * @param {string} resourceDescriptor The resource descriptor string representation to parse
 * @returns {ResourceDescriptor} the parsed resource descriptor
 */
export declare function parseResourceDescriptor(resourceDescriptor: string): ResourceDescriptor;
/**
 * A parsed resource URL
 *
 * @typedef {Object} ParsedUrl
 * @property {string} type The resource type
 * @property {string} name The resource name, unique for a given type
 * @property {string} [locale] The resource locale, if applicable
 * @property {string} mode The compile mode
 * @property {string} [uid] The resource UID, or DEFAULT_UID
 */
/**
 * Get the URL of a given resource, compile mode and UID.
 *
 * The format is the following:
 *
 *    /webruntime/:type[/:uid]/:mode[/:locale]/:name[.js]
 *
 * @param {string|ResourceDescriptor} resource Either a resource descriptor as a string, or an object containing the resource type, name and locale
 * @param {string} resource.type The resource type
 * @param {string} resource.name The resource name
 * @param {string} [resource.locale] The resource locale
 * @param {string} mode The resource compile mode
 * @param {string} [uid] The resource UID. If not specified, default UID will be used.
 * @param {boolean} [appendExt] Append .js on the resource URL. Defaults to true
 * @returns {string} the resource URL
 */
export declare function getResourceUrl(resource: ResourceDescriptor | undefined, mode: string, uid: string, appendExt?: boolean): string;
export {};
//# sourceMappingURL=resource-utils.d.ts.map
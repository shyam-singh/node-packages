/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

const SECURITY_POLICY_VIOLATION_EVENT = 'securitypolicyviolation';
let cspViolationHandler;

/**
 * Displays the CSP violations that were caught before webruntimedesign module was loaded
 * and removes the violations and the violation listener from the window object.
 */
function displayCspErrorsCaughtBeforeDesignModeInitialized(postMessageManager) {
    const cspViolations = window.cb_cspViolations;

    if (cspViolations) {
        Object.values(cspViolations).forEach(violation => {
            sendCSPErrorMessage(
                postMessageManager,
                violation.violatedDirective,
                violation.blockedURI
            );
        });

        document.removeEventListener(
            SECURITY_POLICY_VIOLATION_EVENT,
            window.cb_cspViolationListener
        );
        delete window.cb_cspViolations;
        delete window.cb_cspViolationListener;
    }
}

/**
 * Starts an event listener for securitypolicyviolation.  When the event
 * occurs, a postMessage is sent to display the CSP error in a popup
 * error dialog if it has not been displayed previously.
 */
function addCSPErrorHandler(postMessageManager) {
    const cspViolations = {};
    cspViolationHandler = getCSPViolationHandler.bind(this, cspViolations, postMessageManager);
    document.addEventListener(SECURITY_POLICY_VIOLATION_EVENT, cspViolationHandler);
}

/**
 * Removes the listener for securitypolicyviolation.
 */
function removeCSPErrorHandler() {
    document.removeEventListener(SECURITY_POLICY_VIOLATION_EVENT, cspViolationHandler);
}

function getCSPViolationHandler(cspViolations, postMessageManager, event) {
    const { disposition, violatedDirective, blockedURI } = event;
    if (disposition === 'enforce') {
        const violation = `${violatedDirective}_${blockedURI}_${window.location.pathname}`;
        if (!cspViolations[violation]) {
            cspViolations[violation] = true;
            sendCSPErrorMessage(postMessageManager, violatedDirective, blockedURI);
        }
    }
}

function sendCSPErrorMessage(postMessageManager, violatedDirective, blockedURI) {
    violatedDirective = unifyGranularElemAttrDirectives(violatedDirective);
    postMessageManager.sendPostmessage(window.parent, 'show-csp-error-dialog', {
        violatedDirective,
        blockedURI,
    });
}

/**
 * Version 3 of CSP added more granular elem/attrib directives for
 * script-src and style-src. Since we don't support those, replace
 * those violations with the more general script-src/style-src
 * directives which we do support.
 */
function unifyGranularElemAttrDirectives(directive) {
    switch (directive) {
        case 'script-src-elem':
        case 'script-src-attr':
            return 'script-src';
        case 'style-src-elem':
        case 'style-src-attr':
            return 'style-src';
        default:
            return directive;
    }
}

export {
    addCSPErrorHandler,
    displayCspErrorsCaughtBeforeDesignModeInitialized,
    removeCSPErrorHandler,
};

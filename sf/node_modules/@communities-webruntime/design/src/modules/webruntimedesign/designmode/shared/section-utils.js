/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { utils as domUtil } from '../../lbf/interactions';
import { getContainingRegion, isOrIsDescendantOfType } from './utils';

import {
    COMPONENT_WRAPPER_CLASS,
    CONTENT_REGION_NAME,
    PROXY_LABEL_CLASS,
    SECTION_FQN,
} from './constants';

const FLEXIBLE_LAYOUT_SELECTOR = 'community_layout-slds-flexible-layout';
const COLUMN_NAME = 'column';
const COLUMN_SELECTOR = `[data-region-name='${COLUMN_NAME}']`;

const THEME_REGION_TYPE = 'theme';
const THEME_REGION_SELECTOR = `[data-region-type='${THEME_REGION_TYPE}']`;

const ADD_SECTION_BUTTON_SELECTOR = '.add-section';
const ADD_SECTION_BUTTON_POSITION_OFFSET = -12;

function clearSectionProxyChangesIfNeeded(element) {
    // label is hidden for sections, so restore here
    const label = element.querySelector(`.${PROXY_LABEL_CLASS}`);
    label.style.display = 'flex';

    getSectionButtons(element).forEach(button => {
        button.remove();
    });
}

function getSectionButtons(element) {
    return element.querySelectorAll(ADD_SECTION_BUTTON_SELECTOR);
}

function isSection(element) {
    return element.dataset && SECTION_FQN === element.dataset.fqn;
}

function isValidDropTarget(dragElement, targetElement) {
    if (dragElement) {
        // if the element is not a section, we're dragging an existing component in the canvas
        // otherwise, confirm we're dragging a section and we can only drop those in the content region
        return (
            (!isSection(dragElement) && isValidDropTargetForComponent(targetElement)) ||
            (isSection(dragElement) && isValidDropTargetForSection(targetElement))
        );
    }

    // if dragElement is null, then we're dragging a component from the palette
    return isValidDropTargetForComponent(targetElement);
}

function isValidDropTargetForSection(targetElement) {
    return (
        targetElement.dataset.regionName && targetElement.dataset.regionName === CONTENT_REGION_NAME
    );
}

function isValidDropTargetForComponent(targetElement) {
    // if the page has a flex layout, restrict drops to the theme and column regions
    // otherwise, don't restrict drops
    return domUtil.querySelector(document, FLEXIBLE_LAYOUT_SELECTOR)
        ? isOrIsDescendantOfType(COLUMN_SELECTOR, targetElement) ||
              isOrIsDescendantOfType(THEME_REGION_SELECTOR, targetElement)
        : true;
}

function updateProxyForSection(proxyElement, componentElement, postMessageManager) {
    // remove the label
    const label = proxyElement.querySelector(`.${PROXY_LABEL_CLASS}`);
    label.style.display = 'none';

    // add the click-to-add section buttons on the top and bottom of the proxy
    proxyElement.appendChild(createAddSectionButton(true, componentElement, postMessageManager));
    proxyElement.appendChild(createAddSectionButton(false, componentElement, postMessageManager));
}

function getSectionSiblings(regionEl) {
    return Array.from(
        domUtil.querySelectorAll(regionEl, `.${COMPONENT_WRAPPER_CLASS}`)
    ).filter(element => isSection(element));
}

function getAddSectionClickHandler(sectionElement, isBottomButton, postMessageManager) {
    return () => {
        const sectionId = sectionElement.dataset.itemId;

        const container = getContainingRegion(sectionElement);

        // beforeId is sectionId if the top add button is pressed
        let beforeId = sectionId;

        if (isBottomButton) {
            // filter out the dropzone children
            const siblingList = getSectionSiblings(container);
            const sectionIndex = siblingList.findIndex(el => el.dataset.itemId === sectionId);

            // if the current section is not the last, then beforeId is the ID of the following section
            // null indicates the section will be appended to the end of the list, since there is no next sibling
            beforeId =
                sectionIndex < siblingList.length - 1
                    ? siblingList[sectionIndex + 1].dataset.itemId
                    : null;
        }

        const params = {
            container: container.dataset.itemId,
            beforeId,
        };

        postMessageManager.sendPostmessage(window.parent, 'cb-add-section', params);
    };
}

function createAddSectionButton(isTopButton, element, postMessageManager) {
    const addButton = document.createElement('button');
    addButton.classList.add('slds-button', 'slds-button_icon', 'add-section');

    if (isTopButton) {
        addButton.classList.add('add-section-top');
    } else {
        addButton.classList.add('add-section-bottom');
    }

    const buttonStyle = {
        position: 'absolute',
        left: '49.3%',
        height: '24px',
        width: '24px',
        borderRadius: '50%',
        pointerEvents: 'auto',
        backgroundColor: '#0059A7',
        border: '1px solid #0059A7',
        margin: 0,
        paddingBottom: '1px',
    };

    if (isTopButton) {
        buttonStyle.top = `${ADD_SECTION_BUTTON_POSITION_OFFSET}px`;
    } else {
        buttonStyle.bottom = `${ADD_SECTION_BUTTON_POSITION_OFFSET}px`;
    }

    Object.assign(addButton.style, buttonStyle);
    addButton.onmouseup = getAddSectionClickHandler(element, !isTopButton, postMessageManager);

    // prevent the mousemove event from passing through the button, since half of the button is outside of
    // the proxy rectangle, and the proxy will disappear if you hover over the 'outside' portion
    addButton.onmousemove = event => {
        event.stopPropagation();
    };

    // prevent the mousedown event from passing through the button, which could cause the element to be deselected
    // when clicking on the area of the button that is outside of the proxy rectangle
    addButton.onmousedown = event => {
        event.stopPropagation();
    };

    const span = document.createElement('span');
    span.classList.add('icon-utility-add');
    const spanStyle = {
        backgroundSize: '9px',
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center center',
        width: '9px',
        height: '9px',
        display: 'inline-block',
        backgroundImage:
            'url(\'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" id="new"%3E%3Cpath d="M13.8 13.4h7.7c.3 0 .7-.3.7-.7v-1.4c0-.4-.4-.7-.7-.7h-7.7c-.2 0-.4-.2-.4-.4V2.5c0-.3-.3-.7-.7-.7h-1.4c-.4 0-.7.4-.7.7v7.7c0 .2-.2.4-.4.4H2.5c-.3 0-.7.3-.7.7v1.4c0 .4.4.7.7.7h7.7c.2 0 .4.2.4.4v7.7c0 .3.3.7.7.7h1.4c.4 0 .7-.4.7-.7v-7.7c0-.2.2-.4.4-.4z"%3E%3C/path%3E%3C/svg%3E\')',
    };

    Object.assign(span.style, spanStyle);
    addButton.appendChild(span);

    return addButton;
}

export {
    isSection,
    clearSectionProxyChangesIfNeeded,
    updateProxyForSection,
    isValidDropTarget,
    isValidDropTargetForComponent,
};

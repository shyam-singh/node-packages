/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { BASE_Z_INDEX, REGION_LABEL_ATTRIBUTE_NAME } from '../shared/constants';
import { isValidDropTarget } from '../shared/section-utils';
import { isElementVisible } from '../shared/utils';

const PROXY_BAR_CONTAINER_CLASS = 'proxy-drop-target-bar-container';
const PROXY_BAR_LEFT_CLASS = 'proxy-drop-target-bar-left';
const PROXY_BAR_RIGHT_CLASS = 'proxy-drop-target-bar-right';
const PROXY_REGION_LABEL_CLASS = 'proxy-drop-target-region-label';
const PROXY_REGION_LABEL_CONTAINER_CLASS = 'proxy-drop-target-region-label-container';
const PROXY_REGION_LABEL_BADGE_CLASS = 'proxy-drop-target-region-label-badge';

const PROXY_PAGE_COLOR = '#04844b';
const PROXY_THEME_COLOR = '#cf368c';

function createBarEl(element) {
    const barContainerEl = document.createElement('div');
    barContainerEl.classList.add(PROXY_BAR_CONTAINER_CLASS);
    element.appendChild(barContainerEl);

    const barLeftEl = document.createElement('div');
    barLeftEl.classList.add(PROXY_BAR_LEFT_CLASS);
    barContainerEl.appendChild(barLeftEl);

    const barRightEl = document.createElement('div');
    barRightEl.classList.add(PROXY_BAR_RIGHT_CLASS);
    barContainerEl.appendChild(barRightEl);
}

function createRegionEl(element) {
    const labelContainerEl = document.createElement('div');
    labelContainerEl.classList.add(PROXY_REGION_LABEL_CONTAINER_CLASS);
    Object.assign(labelContainerEl.style, {
        position: 'absolute',
        padding: '0 10px',
        color: 'white',
        height: '26px',
        'user-select': 'none',
        'border-radius': '3px 3px 0 0',
        display: 'flex',
        'align-items': 'center',
        'justify-content': 'center',
        top: '-26px',
    });
    element.appendChild(labelContainerEl);

    const labelEl = document.createElement('div');
    labelEl.classList.add(PROXY_REGION_LABEL_CLASS);
    Object.assign(labelEl.style, {
        color: '#fff',
    });
    labelContainerEl.appendChild(labelEl);

    const badgeEl = document.createElement('div');
    badgeEl.classList.add(PROXY_REGION_LABEL_BADGE_CLASS);
    Object.assign(badgeEl.style, {
        color: '#fff',
        'font-size': '9px',
        'text-transform': 'inherit',
        'background-color': 'rgba(0, 0, 0, 0.2)',
        padding: '2px 10px',
        'margin-left': '7px',
        'border-radius': '7px',
    });
    labelContainerEl.appendChild(badgeEl);
}

function dropTargetProxyInitHandler({ element }) {
    createBarEl(element);
    createRegionEl(element);
}

function getRegionProxyColor(type) {
    if (type === 'theme') {
        return PROXY_THEME_COLOR;
    }
    return PROXY_PAGE_COLOR;
}

function styleRegionProxyBadge(element, containerElement) {
    const badgeLabel = containerElement.getAttribute('data-region-badge-label');
    const badgeEl = element.querySelector(`.${PROXY_REGION_LABEL_BADGE_CLASS}`);
    if (badgeLabel) {
        badgeEl.style.display = '';
        badgeEl.textContent = badgeLabel;
    } else {
        badgeEl.style.display = 'none';
    }
}

function styleRegionProxyLabel(element, containerElement) {
    const containerType = containerElement.getAttribute('data-region-type');
    const regionLabelContainerEl = element.querySelector(`.${PROXY_REGION_LABEL_CONTAINER_CLASS}`);
    const regionLabelEl = element.querySelector(`.${PROXY_REGION_LABEL_CLASS}`);
    regionLabelEl.textContent = containerElement.getAttribute(REGION_LABEL_ATTRIBUTE_NAME);

    const regionLabelElRect = regionLabelContainerEl.getBoundingClientRect();
    regionLabelContainerEl.style.left = `calc(50% - ${regionLabelElRect.width / 2}px)`;
    regionLabelContainerEl.style.backgroundColor = getRegionProxyColor(containerType);
}

function styleRegionProxy({ element, rect, container }) {
    const containerElement = container.element;
    const containerType = containerElement.getAttribute('data-region-type');
    const style = {
        display: '',
        width: `${rect.width}px`,
        height: `${rect.height}px`,
        outline: `2px solid ${getRegionProxyColor(containerType)}`,
        position: 'absolute',
        left: `${window.scrollX + rect.left}px`,
        top: `${window.scrollY + rect.top}px`,
        zIndex: BASE_Z_INDEX - 1,
    };
    Object.assign(element.style, style);

    // show label when proxy and component proxy is visible
    if (isElementVisible(element)) {
        styleRegionProxyLabel(element, containerElement);
        styleRegionProxyBadge(element, containerElement);
    }
}

function styleDropBarProxy({ element, position, rect }) {
    const barEl = element.querySelector(`.${PROXY_BAR_CONTAINER_CLASS}`);
    const barStyle = {
        position: 'absolute',
        height: `0px`,
        borderTop: '1px solid #0059A7',
        backgroundColor: '#0059A7',
        zIndex: BASE_Z_INDEX + 2,
        display: '',
    };
    if (position) {
        const { x, y, width } = position;
        barStyle.width = `${width}px`;
        barStyle.left = `${window.scrollX + x - (window.scrollX + rect.left)}px`;
        barStyle.top = `${window.scrollY + y - (window.scrollY + rect.top)}px`;
    } else {
        barStyle.left = `${window.scrollX + rect.left}px`;
        barStyle.top = `${rect.height / 2}px`;
        barStyle.width = `${rect.width - 30}px`;
    }
    Object.assign(barEl.style, barStyle);

    const barLeftRightStyle = {
        height: '11px',
        'background-color': '#0059A7',
        position: 'absolute',
        width: '1px',
        top: '-6px',
    };
    const barLeftEl = element.querySelector(`.${PROXY_BAR_LEFT_CLASS}`);
    Object.assign(barLeftEl.style, barLeftRightStyle);
    const barRightEl = element.querySelector(`.${PROXY_BAR_RIGHT_CLASS}`);
    Object.assign(barRightEl.style, barLeftRightStyle);
    barRightEl.style.right = '0';
}

function dropTargetProxyEnableHandler({ element, params }) {
    const { payload } = params;
    const { position, container } = payload;

    if (
        container &&
        isValidDropTarget(payload.element && payload.element.element, container.element)
    ) {
        const rect = container.element.getBoundingClientRect();
        styleRegionProxy({ element, rect, container });
        styleDropBarProxy({ element, position, rect });
    } else {
        element.style.display = 'none';
    }
}

function dropTargetProxyDisableHandler({ element }) {
    element.style.display = 'none';
}

export { dropTargetProxyDisableHandler, dropTargetProxyEnableHandler, dropTargetProxyInitHandler };

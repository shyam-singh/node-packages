/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { log, logError } from 'webruntime/logger';
import { WEBRUNTIME_PREFIX } from '@communities-webruntime/common';
import { PERFORMANCE_ENTRY_TYPE, setMetadata } from 'webruntime/metricsService';

function getMarkName(ns, name) {
    return `${WEBRUNTIME_PREFIX}-${[ns, name].filter(Boolean).join(':')}`;
}

function performanceMarkHelper(ns, name, ctx) {
    const markName = getMarkName(ns, name);
    setMetadata(PERFORMANCE_ENTRY_TYPE.MARK, markName, ctx);
    window.performance.mark(markName);
}

function mark(ns, name, ctx) {
    performanceMarkHelper(ns, name, ctx);
}

function markStart(ns, name, ctx) {
    performanceMarkHelper(ns, name, ctx);
}

function markEnd(ns, name, ctx) {
    const markName = getMarkName(ns, name);
    setMetadata(PERFORMANCE_ENTRY_TYPE.MEASURE, markName, ctx);
    try {
        window.performance.measure(markName, markName);
    } catch (ex) {
        logError(`[instrumentation] no startMark named ${markName} found`, ex.stack);
    }
}

function time() {
    return Date.now();
}

function perfStart(name, attributes, eventSource) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] perfStart()`, { name, attributes, eventSource });
    }
}

function perfEnd(name, attributes, eventSource) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] perfEnd()`, { name, attributes, eventSource });
    }
}

function interaction(target, scope, context, eventSource, eventType) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] interaction()`, { target, scope, context, eventSource, eventType });
    }
}

function registerPlugin(pluginConfig) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] registerPlugin()`, { pluginConfig });
    }
}

function registerPeriodicLogger(name, callback) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] registerPeriodicLogger()`, { name, callback });
    }
}

function registerCacheStats(name) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] registerCacheStats()`, { name });
    }
    return {
        logHits(count) {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] registerCacheStats().logHits()`, { name, count });
            }
        },
        logMisses(count) {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] registerCacheStats().logMisses()`, { name, count });
            }
        },
        unRegister() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] registerCacheStats().unRegister()`, { name });
            }
        },
    };
}

function error(attributes, eventSource, eventType) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] error()`, { attributes, eventSource, eventType });
    }
}

function removePeriodicLogger(id) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] removePeriodicLogger()`, { id });
    }
}

function enablePlugin(name) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] enablePlugin()`, { name });
    }
}

function disablePlugin(name) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] disablePlugin()`, { name });
    }
}

function trackScenario(nameIn, attributes, eventSourceIn) {
    if (process.env.NODE_ENV !== 'production') {
        log(`[instrumentation] trackScenario()`, { nameIn, attributes, eventSourceIn });
    }
}
function counter(metricsKey) {
    return {
        increment(value) {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] counter.increment()`, { metricsKey, value });
            }
        },
        decrement(value) {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] counter.decrement()`, { metricsKey, value });
            }
        },
        getValue() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] counter.getValue()`, { metricsKey });
            }
            return 0;
        },
        reset() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] counter.reset()`, { metricsKey });
            }
        },
    };
}
function gauge(metricsKey) {
    return {
        setValue(value) {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] setValue()`, { metricsKey, value });
            }
        },
        getValue() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] getValue()`, { metricsKey });
            }
            return 0;
        },
        reset() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] reset()`, { metricsKey });
            }
        },
    };
}
function percentileHistogram(metricsKey) {
    return {
        update(value) {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] percentileHistogram.update()`, { metricsKey, value });
            }
        },
        getValue() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] percentileHistogram.getValue()`, { metricsKey });
            }
            return [];
        },
        reset() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] percentileHistogram.reset()`, { metricsKey });
            }
        },
    };
}
function timer(metricsKey) {
    return {
        addDuration() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] timer.addDuration()`, { metricsKey });
            }
        },
        time() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] timer.time()`, { metricsKey });
            }
        },
        getValue() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] timer.getValue()`, { metricsKey });
            }
            return [];
        },
        reset() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] timer.reset()`, { metricsKey });
            }
        },
        get() {
            if (process.env.NODE_ENV !== 'production') {
                log(`[instrumentation] timer.get()`, { metricsKey });
            }
        },
    };
}

// exports must match https://swarm.soma.salesforce.com/files/app/main/core/ui-instrumentation-components/modules/instrumentation/service/service.js
export {
    disablePlugin,
    enablePlugin,
    error,
    interaction,
    mark,
    markEnd,
    markStart,
    perfEnd,
    perfStart,
    registerCacheStats,
    registerPeriodicLogger,
    registerPlugin,
    removePeriodicLogger,
    time,
    trackScenario,
    counter,
    gauge,
    percentileHistogram,
    timer,
};

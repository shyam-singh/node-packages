/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import { logError } from 'webruntime/logger';
import { ERRORS_PATH_PREFIX } from '@communities-webruntime/common';
import { reportError } from 'webruntime/errors';
import { sendBeacon } from 'webruntime/transport';

const CONTENT_TYPE_TEXT = 'text/plain;charset=UTF-8';

jest.mock('webruntime/logger', () => ({
    logError: jest.fn(),
}));

jest.mock('webruntime/transport', () => ({
    sendBeacon: jest.fn(),
}));

const HOST_NAME = 'pmagnusson-ltm1';
const PATH_NAME = 'home/home.jsp';

beforeEach(() => {
    jest.resetAllMocks();
    delete window.location;
    window.location = {
        hostname: HOST_NAME,
        pathname: PATH_NAME,
    };
});

afterEach(() => {
    jest.clearAllMocks();
});

describe('webruntime/errors/report', () => {
    it('logs the error', () => {
        const subject = 'hej';
        const wcstack = 'wcstack';
        const error = {
            wcstack,
        };
        reportError({
            subject,
            error,
        });
        expect(logError).toHaveBeenCalledWith(subject, '\nerror: ', error, '\nwcstack:\n', wcstack);
    });
    it('sends the wcstack explicitly provided', () => {
        const subject = 'apa';
        const wcstack = 'wcstack';
        const error = { wcstack: 'wcstack1' };
        reportError({
            subject,
            error,
            wcstack,
        });

        expect(sendBeacon).toHaveBeenCalledWith({
            path: ERRORS_PATH_PREFIX,
            payload: JSON.stringify({
                subject,
                wcstack,
                location: {
                    hostname: HOST_NAME,
                    pathname: PATH_NAME,
                },
            }),
            contentType: CONTENT_TYPE_TEXT,
        });
    });
    it('sends errors wcstack if available', () => {
        const subject = 'apa';
        const wcstack = 'wcstack';
        const error = { wcstack: wcstack };
        reportError({
            subject,
            error,
        });

        expect(sendBeacon).toHaveBeenCalledWith({
            path: ERRORS_PATH_PREFIX,
            payload: JSON.stringify({
                subject,
                wcstack,
                location: {
                    hostname: HOST_NAME,
                    pathname: PATH_NAME,
                },
            }),
            contentType: CONTENT_TYPE_TEXT,
        });
    });
    it('sends all expected arguments', () => {
        const subject = 'predikat';
        const message = 'in a bottle';
        const wcstack = 'wcstack';
        const stack = 'myrstack';
        const error = {
            message,
            stack,
            wcstack,
        };
        reportError({
            subject,
            error,
        });

        expect(sendBeacon).toHaveBeenCalledWith({
            path: ERRORS_PATH_PREFIX,
            payload: JSON.stringify({
                subject,
                message,
                stack,
                wcstack,
                location: {
                    hostname: HOST_NAME,
                    pathname: PATH_NAME,
                },
            }),
            contentType: CONTENT_TYPE_TEXT,
        });
    });
});

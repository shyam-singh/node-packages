/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
beforeEach(() => {
    jest.resetAllMocks();
});

document.documentElement.style.setProperty = jest.fn();

function loadBranding(target) {
    process.env.LWC_TARGET = target;
    jest.mock('webruntime_loader/loader', () => ({
        defineModules: jest.fn(),
    }));
    require('webruntime/brandingService');
    const { defineModules } = require('webruntime_loader/loader');
    return defineModules;
}

describe('webruntime/brandingService', () => {
    const OLD_ENV = process.env;
    beforeEach(() => {
        jest.resetModules(); // this is important - it clears the cache
        process.env = { ...OLD_ENV };
        delete process.env.LWC_TARGET;
    });

    afterEach(() => {
        process.env = OLD_ENV;
    });

    describe('native', () => {
        it('sets CSS variables to documentElement when in non-compat modes', () => {
            jest.mock('@app/brandingProperties', () => ({ '--foo-bar': 'red' }), { virtual: true });

            const defineModules = loadBranding('es2017');

            expect(defineModules).toHaveBeenCalledTimes(0);
            expect(document.documentElement.style.setProperty).toHaveBeenCalledWith(
                '--foo-bar',
                'red'
            );
        });
    });
    describe('compat', () => {
        it(`doesn't set CSS variables to documentElement when in compat mode`, () => {
            jest.mock('@app/brandingProperties', () => ({ '--foo-bar': 'red' }), { virtual: true });

            loadBranding('es5');

            expect(document.documentElement.style.setProperty).not.toHaveBeenCalled();
        });

        it('outputs the css variable declaration when properly declared', () => {
            jest.mock('@app/brandingProperties', () => ({ '--foo-bar': 'red' }), { virtual: true });

            const defineModules = loadBranding('es5');

            expect(defineModules).toHaveBeenCalledTimes(1);
            const style = defineModules.mock.calls[0][0]['@salesforce/cssvars/customProperties'];
            return expect(style('--foo-bar')).toBe('red');
        });

        it('outputs whatever you give it inside a var declaration', () => {
            jest.mock('@app/brandingProperties', () => ({ fooBar: 'red' }), { virtual: true });

            const defineModules = loadBranding('es5');

            expect(defineModules).toHaveBeenCalledTimes(1);
            const style = defineModules.mock.calls[0][0]['@salesforce/cssvars/customProperties'];
            expect(style('fooBar')).toBe('red');
        });

        it('handles default values for unknown properties', () => {
            jest.mock('@app/brandingProperties', () => ({}), { virtual: true });

            const defineModules = loadBranding('es5');

            expect(defineModules).toHaveBeenCalledTimes(1);
            const style = defineModules.mock.calls[0][0]['@salesforce/cssvars/customProperties'];
            expect(style('--foo-bar', 'red')).toBe('red');
        });

        it('outputs proper var format with unknown property', () => {
            jest.mock('@app/brandingProperties', () => ({ '--foo-bar': 'red' }), { virtual: true });

            const defineModules = loadBranding('es5');

            expect(defineModules).toHaveBeenCalledTimes(1);
            const style = defineModules.mock.calls[0][0]['@salesforce/cssvars/customProperties'];
            expect(style('--foo-BOGUS')).toBe('var(--foo-BOGUS)');
            expect(style('--foo-BOGUS', null)).toBe('var(--foo-BOGUS)');
            expect(style('--foo-BOGUS', undefined)).toBe('var(--foo-BOGUS)');
        });

        it(`doesn't return default values for known properties`, () => {
            jest.mock('@app/brandingProperties', () => ({ '--foo-bar': 'blue' }), {
                virtual: true,
            });
            const defineModules = loadBranding('es5');

            expect(defineModules).toHaveBeenCalledTimes(1);
            const style = defineModules.mock.calls[0][0]['@salesforce/cssvars/customProperties'];
            expect(style('--foo-bar', 'red')).toBe('blue');
        });
    });
});

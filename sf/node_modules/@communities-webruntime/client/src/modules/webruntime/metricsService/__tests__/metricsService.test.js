/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

const { performance, navigator, location, addEventListener } = window;
import { METRICS_PATH_PREFIX } from '@communities-webruntime/common';

let metricsService, sendBeacon;

jest.mock('@app/basePath', () => '', { virtual: true });
jest.mock('@app/csrfToken', () => '', { virtual: true });
jest.mock('webruntime/transport');

beforeEach(() => {
    delete window.location;
    window.location = {
        hostname: 'mockHostName',
        pathname: 'mockPathName',
    };

    delete window.navigator;
    window.navigator = {
        connection: {
            rtt: 'mockRtt',
        },
    };

    delete window.PerformanceObserver;
    window.PerformanceObserver = jest.fn().mockImplementation(() => {
        return {
            observe: jest.fn(),
        };
    });

    delete window.PerformancePaintTiming;
    window.PerformancePaintTiming = jest.fn(() => ({}));

    delete window.PerformanceResourceTiming;
    window.PerformanceResourceTiming = jest.fn(() => ({}));

    delete window.addEventListener;
    window.addEventListener = jest.fn(() => ({}));

    delete window.performance;
    window.performance = {
        getEntriesByType: jest.fn(() => []),
        getEntriesByName: jest.fn(() => []),
    };

    metricsService = require('../metricsService');
    sendBeacon = require('webruntime/transport').sendBeacon;
});

afterEach(() => {
    jest.clearAllMocks();
    window.performance = performance;
    window.navigator = navigator;
    window.location = location;
    window.addEventListener = addEventListener;
});

describe('webruntime/metricsService', () => {
    it('calls sendBeacon', () => {
        // send metrics
        metricsService.sendBootstrapMetrics();

        // verify sendBeacon usage
        expect(sendBeacon).toHaveBeenCalledTimes(1);
    });

    it('sends object of expected schema', () => {
        // send metrics
        metricsService.sendBootstrapMetrics();

        // verify payload schema
        const request = sendBeacon.mock.calls[0][0];
        expect(request.path).toBe(METRICS_PATH_PREFIX);
        const payload = JSON.parse(request.payload);
        expect(payload).toStrictEqual(
            expect.objectContaining({
                bootstrap: expect.anything(),
                navigator: expect.anything(),
                resources: expect.anything(),
                paint: expect.anything(),
                location: {
                    hostname: expect.anything(),
                    pathname: expect.anything(),
                },
            })
        );
    });

    it('falls back to window unload in browsers that do not support PerformancePaintTiming / PerformanceObserver', () => {
        jest.resetModules();
        delete window.PerformancePaintTiming;
        metricsService = require('../metricsService');
        expect(window.addEventListener).toHaveBeenCalledTimes(1);
    });

    it('trims decimal points correctly', () => {
        metricsService.send({
            data0: 0.00001,
            data1: {
                data2: 0.111111,
                data3: 0.999999,
                data4: {
                    data5: 0.0099999999,
                },
            },
        });

        const request = sendBeacon.mock.calls[0][0];
        expect(request.path).toBe(METRICS_PATH_PREFIX);
        const payload = JSON.parse(request.payload);

        expect(payload.data0).toBe(0);
        expect(payload.data1.data2).toBe(0.11);
        expect(payload.data1.data3).toBe(1);
        expect(payload.data1.data4.data5).toBe(0.01);
    });
});

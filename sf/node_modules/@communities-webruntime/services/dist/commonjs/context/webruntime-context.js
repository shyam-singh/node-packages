"use strict";
/** @hidden */
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const context_validate_1 = require("./context-validate");
const EMPTY_BASE_PATH = '';
/**
 * Holds the template context configuration.
 *
 * The passed config is validated.
 *
 * templateDir is the only mandatory configuration,
 * all others can use default values.
 */
class WebruntimeContext {
    constructor(config) {
        this.config = config;
        if (config.basePath === '/') {
            this.config.basePath = '';
        }
        context_validate_1.validateContext(this);
    }
    get basePath() {
        return this.config.basePath || EMPTY_BASE_PATH;
    }
    set basePath(basePath) {
        this.config.basePath = basePath;
    }
    get isDesignMode() {
        return this.config.isDesignMode || false;
    }
    get labels() {
        return this.config.labels || `${this.templateDir}/src/labels.json`;
    }
    get locale() {
        return this.config.locale || 'en_US';
    }
    get partials() {
        return this.config.partials || `${this.templateDir}/src/partials`;
    }
    get routes() {
        return this.config.routes || `${this.templateDir}/src/routes.json`;
    }
    get srcDir() {
        return this.config.srcDir || `${this.config.templateDir}/src`;
    }
    get templateDir() {
        return this.config.templateDir && path_1.default.resolve(this.config.templateDir);
    }
    get theme() {
        return this.config.theme || `${this.config.templateDir}/src/theme.json`;
    }
    get views() {
        return this.config.views || `${this.config.templateDir}/src/views`;
    }
    get versionKey() {
        return this.config.versionKey;
    }
    set versionKey(versionKey) {
        this.config.versionKey = versionKey;
    }
}
exports.default = WebruntimeContext;
//# sourceMappingURL=webruntime-context.js.map
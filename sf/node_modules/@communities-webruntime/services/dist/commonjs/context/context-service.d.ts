/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import 'colors';
import { AddressableService } from '@webruntime/api';
import WebruntimeContextConfig from './webruntime-context-config';
import WebruntimeContext from './webruntime-context';
export declare class ContextService extends AddressableService {
    uri: any;
    mappings: any;
    toSpecifier: any;
    parseUrl: any;
    projectDir: any;
    basePath: any;
    constructor({ projectDir, server: { basePath } }: {
        projectDir: any;
        server: {
            basePath?: string | undefined;
        };
    });
    initialize(): Promise<void>;
    shutdown(): Promise<void>;
    request(): void;
    /**
     * Start the Web Runtime context and compute the template version key
     * based on the given configuration by computing a hash for srcDir
     * and watching it for changes.
     *
     * @public
     * @param {Object} config The template configuration
     * @param {string} config.templateDir Required, the template module directory
     * @param {string} [config.srcDir] Source directory, used to compute the template version key
     * @param {string|Object} [config.partials] Directory where handlebar partials are stored to be used in templates or representative json object
     * @param {string|Object} [config.routes] The Web Runtime routes configuration file path (i.e. routes.json), or representative json object
     * @param {string|Object} [config.labels]  The Web Runtime labels configuration file path (i.e. labels.json), or representative json object
     * @param {string|Object} [config.theme] The Web Runtime themes configuration file path (i.e. theme.json), or representative json object
     * @param {string} [config.locale] The locale to use
     * @param {string} [config.basePath] The base path to use in branding properties URL values
     * @param {string} [config.isDesignMode] Determines whether the context is design mode
     * @param {string[]} [config.modes] The list of modes in which the resources will be generated, defaults to all modes (dev, compat, prod, prod_compat)
     */
    static startContext(config: WebruntimeContextConfig): Promise<WebruntimeContext>;
    /**
     * Returns the current context
     * @public
     */
    static getContext(): WebruntimeContext;
    /**
     * Ends the current context and stops watching srcDir for changes.
     * @public
     */
    static endContext(): void;
}
//# sourceMappingURL=context-service.d.ts.map
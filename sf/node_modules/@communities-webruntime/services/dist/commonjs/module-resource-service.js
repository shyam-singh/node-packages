"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const fs = __importStar(require("fs"));
const api_1 = require("@webruntime/api");
const common_1 = require("@communities-webruntime/common");
/**
 * Gets a pre-built resource UID from a module.
 *
 * @param module the module/package to read from
 * @param descriptor the resource descriptor
 * @param mode the mode to return
 */
function getResourceUidFromModule(module, descriptor, mode) {
    const resources = require(`${module}/dist/resources.json`);
    if (!resources[descriptor] || !resources[descriptor][mode]) {
        throw new Error(`Cannot find resource ${descriptor} for mode '${mode}'`);
    }
    return resources[descriptor][mode];
}
/**
 * Reads a pre-built resource from a module.
 *
 * @param module the module/package to read from
 * @param descriptor the resource descriptor
 * @param mode the mode to return
 * @param resolver used to resolve the resource path
 */
function readResourceFromModule(module, descriptor, mode, resolver = require) {
    const uid = getResourceUidFromModule(module, descriptor, mode);
    const { type, name } = common_1.parseResourceDescriptor(descriptor);
    return fs.readFileSync(resolver.resolve(`${module}/dist/public/webruntime/${type}/${uid}/${mode}/${name}.js`), 'utf8');
}
/**
 * This service serves a pre-built scripts read from a module's resource.json.
 */
class ModuleResourceService extends api_1.AddressableService {
    constructor(module, specifier, descriptor, resourceUri, resolver) {
        super(resourceUri);
        this.module = module;
        this.specifier = specifier;
        this.descriptor = descriptor;
        this.resourceUri = resourceUri;
        this.resolver = resolver;
        this.mappings = {
            [this.specifier]: this.resourceUri,
        };
    }
    initialize() { }
    async request(specifier, { mode }) {
        const code = readResourceFromModule(this.module, this.descriptor, mode, this.resolver);
        return {
            type: api_1.RequestOutputTypes.COMPONENT,
            specifier,
            resource: {
                code,
            },
            metadata: {
                dependencies: [],
            },
            success: true,
            diagnostics: [],
        };
    }
    toSpecifier() {
        return this.specifier;
    }
}
exports.ModuleResourceService = ModuleResourceService;
//# sourceMappingURL=module-resource-service.js.map
/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
/**
 * Get all the context template routes
 */
declare function getRoutes(): any;
/**
 * Get the context template theme
 */
declare function getTheme(): any;
/**
 * Get all the context template labels
 */
declare function getLabels(): any;
/**
 * Get all the context template branding properties
 */
declare function getBrandingProperties(): any;
declare function getBrandingTokenMap(): any;
declare function getView(devName: any): any;
declare function getAllViews(routes?: any, theme?: any): any[];
/**
 * Get all the HTML partials from the template's partials folder.
 * Result is in format of `{[fileNameWithoutExtension] : stringContentOfFile }`
 */
declare function getPartials(): {
    [filename: string]: string;
};
/**
 * Get all views which are routed
 */
declare function getViewToThemeLayoutMap(): {};
declare function validate(schema?: string): Promise<void>;
/**
 * Returns the component with the given UUID among all the views.
 *
 * This is only available in design mode.
 *
 * @param uuid the UUID of the component to find
 * @returns the component, or `undefined` if the component cannot be found
 * @throws an error is not in design mode
 */
declare function getComponent(uuid: string): object | undefined;
export declare const MetadataService: {
    getRoutes: typeof getRoutes;
    getTheme: typeof getTheme;
    getBrandingProperties: typeof getBrandingProperties;
    getBrandingTokenMap: typeof getBrandingTokenMap;
    getComponent: typeof getComponent;
    getLabels: typeof getLabels;
    getView: typeof getView;
    getViewToThemeLayoutMap: typeof getViewToThemeLayoutMap;
    getAllViews: typeof getAllViews;
    getPartials: typeof getPartials;
    validate: typeof validate;
};
export {};
//# sourceMappingURL=metadata-service.d.ts.map
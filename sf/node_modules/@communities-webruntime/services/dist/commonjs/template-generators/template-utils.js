"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Template utility functions shared between template modules
 */
const common_1 = require("@communities-webruntime/common");
const template_generator_registry_1 = require("./template-generator-registry");
const ATTRIBUTE_REFERENCE = 'attributes';
const REGION_TYPE = {
    THEME: 'theme',
    PAGE: 'page',
};
const REGION_THEME_BADGE_TEXT = 'Theme Region';
function regions({ regionList, isThemeLayout, attributeSet, isRenderDesignMode, }) {
    let html = '';
    if (regionList && regionList.length) {
        regionList.forEach(region => {
            let regionHtml = '';
            if (region.components && region.components.length) {
                region.components.forEach(cmp => {
                    regionHtml += isRenderDesignMode ? getDropZone(region.uuid) : '';
                    regionHtml += component({
                        cmp,
                        isThemeLayout: false,
                        regionName: region.slotName,
                        attributeSet,
                        isTopLevel: false,
                        isRenderDesignMode,
                    }).html;
                });
            }
            regionHtml += isRenderDesignMode ? getDropZone(region.uuid) : '';
            html += isRenderDesignMode
                ? getRegionWrapper({
                    id: region.uuid,
                    name: region.slotName,
                    html: regionHtml,
                    type: isThemeLayout ? REGION_TYPE.THEME : REGION_TYPE.PAGE,
                    badge: isThemeLayout ? REGION_THEME_BADGE_TEXT : '',
                })
                : regionHtml;
        });
    }
    return `${html}
    ${isThemeLayout ? defaultSlot() : ''}`;
}
exports.regions = regions;
function getRegionWrapper({ id, name, html, type, badge }) {
    const slotAttribute = name ? `slot="${name}"` : ``;
    return `<webruntimedesign-region-wrapper 
    ${slotAttribute} 
    region-name="${name}"
    region-id="${id}"
    type="${type}"
    label="${name}"
    badge-label="${badge}"
    >${html}</webruntimedesign-region-wrapper>`;
}
function getDropZone(regionKey) {
    return `<webruntimedesign-drop-region region-id="${regionKey}"></webruntimedesign-drop-region>`;
}
function defaultSlot() {
    return `<webruntime-router-container></webruntime-router-container>`;
}
function attributes(cmp, attributeSet) {
    if (!cmp.attributes) {
        return { html: '', attributes: attributeSet };
    }
    const cmpNameKey = getCmpNameKey(cmp, attributeSet);
    let attrHtml = '';
    Object.entries(cmp.attributes).forEach(([attributeName, attributeValue]) => {
        attrHtml += ` ${common_1.convertToKebabCase(attributeName)}={${ATTRIBUTE_REFERENCE}.${cmpNameKey}.${attributeName}}`;
        // Store attribute value for runtime injection
        attributeSet[cmpNameKey] = attributeSet[cmpNameKey] || {};
        attributeSet[cmpNameKey][attributeName] = attributeValue;
    });
    return { html: attrHtml, attributes: attributeSet };
}
exports.attributes = attributes;
function buildSlot(slotName) {
    return `${slotName ? ` slot="${slotName}"` : ''} `;
}
exports.buildSlot = buildSlot;
function component({ cmp, isThemeLayout, regionName, attributeSet = {}, isTopLevel, isRenderDesignMode, }) {
    const isRenderWrapper = !isTopLevel && isRenderDesignMode;
    const cmpNameKey = getCmpNameKey(cmp, attributeSet);
    const cmpTemplate = template_generator_registry_1.getTemplateGenerator(cmp.descriptor).generate({
        cmp,
        attributeSet,
        containerRegion: regionName,
        isRenderDesignMode,
        isThemeLayout,
    });
    const html = isRenderWrapper ? getComponentWrapper(cmp, cmpNameKey) : cmpTemplate.html;
    return { html, attributes: cmpTemplate.attrs };
}
exports.component = component;
/**
 * Converts an LWC module specifier (e.g. x/shopButton) to an id like
 * xshopbutton
 */
function moduleSpecifierToId(moduleSpecifier) {
    const str = moduleSpecifier.replace('/', '');
    return str.toLowerCase();
}
function getCmpNameKey(cmp, attributeSet) {
    const componentName = moduleSpecifierToId(cmp.descriptor);
    const globalCmpIdx = Object.keys(attributeSet).length;
    return [componentName, globalCmpIdx].join('_');
}
function getComponentWrapper(cmp, cmpNameKey) {
    const attributesAttr = cmp.attributes
        ? `component-attributes={${ATTRIBUTE_REFERENCE}.${cmpNameKey}}`
        : '';
    return `<webruntimedesign-component-wrapper 
    ${attributesAttr} 
    component-name="${cmp.descriptor}"
    component-id="${cmp.uuid}"
    label="${cmp.descriptor}"
    is-locked="false"
    ></webruntimedesign-component-wrapper>`;
}
//# sourceMappingURL=template-utils.js.map
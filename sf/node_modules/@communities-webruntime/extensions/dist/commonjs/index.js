"use strict";
/**
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const body_parser_1 = __importDefault(require("body-parser"));
const csurf_1 = __importDefault(require("csurf"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const common_1 = require("@communities-webruntime/common");
const api_middleware_1 = require("./api-middleware");
const metrics_middleware_1 = require("./metrics-middleware");
const client_error_middleware_1 = require("./client-error-middleware");
const salesforce_static_resource_middleware_1 = require("./salesforce-static-resource-middleware");
// The LWR extensions with all the middlewares pre-configured
function extendApp({ app, options }) {
    const { projectDir, server: { basePath }, additionalProperties: { apiConfig }, } = options;
    const outputDir = path.join(projectDir, 'dist');
    // several of our middlewares use the (JSON) parsed body
    app.use(body_parser_1.default.text());
    // metrics
    app.use(metrics_middleware_1.metricsMiddleware());
    // error reporting
    app.use(client_error_middleware_1.clientErrorMiddleware());
    // Salesforce static resources
    app.use(salesforce_static_resource_middleware_1.salesforceStaticResourcesMiddleware({ outputDir }));
    // Setup CSRF Token
    app.use(cookie_parser_1.default());
    app.use(csurf_1.default({
        cookie: true,
    }));
    // Proxy, record and replay API calls
    app.use(api_middleware_1.apiMiddleware({
        apiPathPrefix: `${basePath || ''}${common_1.API_PATH_PREFIX}`,
        recordDir: path.resolve(projectDir, 'api'),
        ...apiConfig,
    }));
}
// Exporting the extension as well as the individual middlewares
// so that the implementor can pick and choose
module.exports = {
    extendApp,
    apiMiddleware: api_middleware_1.apiMiddleware,
    metricsMiddleware: metrics_middleware_1.metricsMiddleware,
    clientErrorMiddleware: client_error_middleware_1.clientErrorMiddleware,
    salesforceStaticResourcesMiddleware: salesforce_static_resource_middleware_1.salesforceStaticResourcesMiddleware,
};
//# sourceMappingURL=index.js.map
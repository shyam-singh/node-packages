"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const api_middleware_1 = require("@communities-webruntime/extensions/dist/commonjs/api-middleware");
exports.API_PATH_PREFIX = '/webruntime/api';
const debug = debug_1.default('localdevserver');
function apiMiddleware({ apiPathPrefix = exports.API_PATH_PREFIX, apiEndpoint, apiEndpointHeaders, apiVersion, recordApiCalls = false, recordDir, onProxyReq }) {
    return {
        extendApp: ({ app }) => {
            const middleware = api_middleware_1.apiMiddleware({
                apiPathPrefix,
                apiEndpoint,
                apiEndpointHeaders,
                recordApiCalls,
                recordDir,
                onProxyReq,
                pathRewrite: getApiPathRewrite(apiVersion)
            });
            app.use(middleware);
        }
    };
}
exports.apiMiddleware = apiMiddleware;
function getApiPathRewrite(version) {
    if (!version) {
        const defaultApiVersion = getDefaultApiVersion();
        console.warn(`Warning: The API version for the org could not be determined, using a default API version of '${defaultApiVersion}' which may not match the org`);
        version = defaultApiVersion;
    }
    return (originalPath) => {
        let newPath = originalPath;
        if (originalPath.startsWith(exports.API_PATH_PREFIX)) {
            newPath = newPath.substring(exports.API_PATH_PREFIX.length);
        }
        newPath = newPath.replace(/v[\d]*\.0/, `v${version}`);
        debug(`rewrote api request url: ${originalPath} -> ${newPath}`);
        return newPath;
    };
}
function getDefaultApiVersion() {
    const packageJson = require('../../../package.json');
    if (!packageJson.defaultApiVersion) {
        throw new Error('The key `defaultApiVersion` is not set in lwc-dev-server/package.json');
    }
    const versionTrimmed = packageJson.defaultApiVersion.trim();
    const defaultApiVersion = `${versionTrimmed.split('.')[0]}.0`;
    return defaultApiVersion;
}
//# sourceMappingURL=apiMiddleware.js.map
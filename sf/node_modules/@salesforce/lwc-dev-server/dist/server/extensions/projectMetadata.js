"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const ComponentIndex_1 = __importDefault(require("../../common/ComponentIndex"));
const LocalDevTelemetryReporter_1 = __importDefault(require("../../instrumentation/LocalDevTelemetryReporter"));
const fs_1 = __importDefault(require("fs"));
function projectMetadata(sessionNonce, project) {
    const devFolder = path_1.default.join(project.projectDirectory, '.localdevserver', 'webruntime', 'custom-component', 'dev', 'en-US');
    return {
        extendApp: ({ app }) => {
            app.get(`/localdev/${sessionNonce}/localdev.js`, (req, res, next) => {
                const componentIndex = new ComponentIndex_1.default(project);
                const json = componentIndex.getProjectMetadata();
                const localDevConfig = {
                    project: json
                };
                res.type('js');
                res.send(`window.LocalDev = ${JSON.stringify(localDevConfig)};`);
            });
            app.get(`/localdev/${sessionNonce}/errorDetails`, (req, res, next) => {
                const specifier = req.query.specifier;
                const specifierRegex = RegExp('c/[a-zA-Z]*', 'g');
                if (!specifierRegex.test(specifier)) {
                    res.json({
                        errors: [
                            {
                                message: 'The component specifier format is incorrect'
                            }
                        ]
                    });
                    return;
                }
                const normalizedFile = path_1.default.join(devFolder, `${specifier}.js`);
                if (!fs_1.default.existsSync(normalizedFile)) {
                    const reporter = LocalDevTelemetryReporter_1.default.getInstance();
                    res.json({
                        errors: [
                            {
                                message: "Couldn't find the compiled component. If this component has a dependency on a component in the org or a component in a package in the org, test this component directly in the org."
                            }
                        ]
                    });
                    reporter.trackMissingDependentComponent();
                    return;
                }
                const content = fs_1.default.readFileSync(normalizedFile);
                const stringContent = content.toString();
                res.json(JSON.parse(stringContent));
            });
        }
    };
}
exports.projectMetadata = projectMetadata;
//# sourceMappingURL=projectMetadata.js.map
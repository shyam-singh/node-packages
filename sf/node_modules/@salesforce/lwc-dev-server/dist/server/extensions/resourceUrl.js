"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const debug_1 = __importDefault(require("debug"));
const mime_types_1 = __importDefault(require("mime-types"));
const fast_xml_parser_1 = __importDefault(require("fast-xml-parser"));
const debug = debug_1.default('localdevserver:resource');
function getStaticResourceFileExt(baseFilePath) {
    const resourceMetaPath = `${baseFilePath}.resource-meta.xml`;
    if (fs_1.default.existsSync(resourceMetaPath)) {
        try {
            const data = fs_1.default.readFileSync(resourceMetaPath, 'utf8');
            const result = fast_xml_parser_1.default.parse(data, {}, true);
            if (!result.StaticResource || !result.StaticResource.contentType) {
                throw new Error('The contentType is missing');
            }
            const contentType = result.StaticResource.contentType;
            return mime_types_1.default.extension(contentType);
        }
        catch (e) {
            console.warn(`Unable to determine the static resource file type from ${resourceMetaPath}: ${e.message}`);
        }
    }
    else {
        const contentAssetMetaPath = `${baseFilePath}.asset`;
        if (fs_1.default.existsSync(contentAssetMetaPath)) {
            return 'asset';
        }
    }
    return null;
}
function resourceUrl() {
    return {
        extendApp: ({ app, options }) => {
            app.get('/assets/project/:versionKey/*', (req, res, next) => {
                let urlPath = `/assets/project/${req.params[0]}`;
                let assetFilePath = path_1.default.join(options.buildDir, urlPath);
                if (!path_1.default.extname(req.url)) {
                    const fileExt = getStaticResourceFileExt(assetFilePath);
                    if (fileExt) {
                        urlPath = `${urlPath}.${fileExt}`;
                        assetFilePath = `${assetFilePath}.${fileExt}`;
                    }
                }
                if (fs_1.default.existsSync(assetFilePath)) {
                    req.url = urlPath;
                    next();
                }
                else {
                    debug(`static asset '${assetFilePath}' does not exist, sending 404`);
                    res.sendStatus(404);
                }
            });
        }
    };
}
exports.resourceUrl = resourceUrl;
//# sourceMappingURL=resourceUrl.js.map
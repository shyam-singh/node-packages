"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const debug_1 = __importDefault(require("debug"));
const api_1 = require("@webruntime/api");
const utils_1 = require("@webruntime/server/dist/commonjs/utils/utils");
const debug = debug_1.default('localdevserver');
class LocalDevPage extends api_1.WebruntimePage {
    get experimental_content() {
        const { sessionNonce } = this.pageContext.locals;
        const { buildDir, server: { basePath } } = this.pageContext.config;
        const versionKey = this.getVersionKey(buildDir);
        const substitutions = {
            sessionNonce,
            basePath,
            versionKey
        };
        return this.pageContext.templateContent.replace(/{\s*([^{}]+)\s*}/g, (originalValue, key) => {
            return substitutions.hasOwnProperty(key)
                ? substitutions[key]
                : originalValue;
        });
    }
    get experimental_scripts() {
        const { request: req } = this.pageContext;
        const { basePath } = this.pageContext.config.server;
        return [
            {
                code: this.createDefineModulesScript({
                    '@app/basePath': basePath,
                    '@app/csrfToken': req.csrfToken && req.csrfToken()
                })
            },
            {
                code: this.createAuraGlobalsScript({
                    '$Browser.S1Features.isLds224Enabled': true
                })
            }
        ];
    }
    createDefineModulesScript(modulesMap) {
        const script = Object.entries(modulesMap)
            .map(([key, value]) => {
            return `Webruntime.define('${key}', [], function() {
                    return ${JSON.stringify(value)};
                 })`;
        })
            .join('\n')
            .trim();
        return script;
    }
    createAuraGlobalsScript(auraGlobalValues = {}) {
        const script = `
        (function() {
            const globalValues = ${JSON.stringify(auraGlobalValues)};
            if (window.$A === undefined || window.$A === null) {
                window.$A = {};
            }
            window.$A.get = function(key) {
                return globalValues[key];
            };
        })();`;
        return script;
    }
    getVersionKey(buildDir) {
        const packageJsonPath = path_1.default.join(__dirname, '../../../package.json');
        try {
            const packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, 'utf8'));
            if (packageJson.version) {
                return packageJson.version;
            }
        }
        catch (e) {
            debug(`warning: unable to determine versionKey from package.json ${e}`);
        }
        return utils_1.getLatestVersion(buildDir);
    }
}
exports.LocalDevPage = LocalDevPage;
class LocalDevApp extends api_1.WebruntimeAppDefinition {
    get pages() {
        return [
            {
                route: '/*',
                page: LocalDevPage
            }
        ];
    }
}
exports.LocalDevApp = LocalDevApp;
//# sourceMappingURL=LocalDevApp.js.map
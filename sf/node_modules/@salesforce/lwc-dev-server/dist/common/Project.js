"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const LocalDevServerConfiguration_1 = __importDefault(require("./LocalDevServerConfiguration"));
const Constants_1 = require("./Constants");
const fileUtils_1 = require("./fileUtils");
const FOLDERS_TO_IGNORE = new Set([
    'aura',
    'lwc',
    'classes',
    'triggers',
    'layouts',
    'objects'
]);
const CUSTOM_LABELS_FOLDER = 'labels';
const CUSTOM_LABELS_FILE = 'CustomLabels.labels-meta.xml';
class Project {
    constructor(directory, serverConfiguration) {
        this.projectConfiguration = {};
        if (directory === null || !this.isSfdxProjectJsonPresent(directory)) {
            throw new Error(`Directory specified '${directory}' does not resolve to a valid Salesforce DX project. ` +
                `More information about this at https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ws_create_new.htm`);
        }
        this.projectRootDirectory = directory;
        this.serverRootDirectory = path_1.default.join(__dirname, '..', '..');
        this.serverConfiguration = new LocalDevServerConfiguration_1.default(serverConfiguration);
        const packageDirectories = this.getPackageDirectories();
        if (packageDirectories.length <= 0) {
            throw new Error('No packageDirectories found on sfdx-project.json. ' +
                'More information about this at https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ws_config.htm');
        }
        const defaultPackageDirectory = path_1.default.join(this.projectRootDirectory, packageDirectories[0]);
        if (!fileUtils_1.findLWCFolderPath(defaultPackageDirectory)) {
            throw new Error(`No 'lwc' directory found in path ${defaultPackageDirectory}`);
        }
        this.setModulesSourceDirectory(defaultPackageDirectory);
        this.setStaticResourcesDirectories(packageDirectories);
        this.setCustomLabelsFile(defaultPackageDirectory);
        this.setContentAssetsDirectories(packageDirectories);
    }
    get configuration() {
        return this.serverConfiguration;
    }
    get projectDirectory() {
        return this.projectRootDirectory;
    }
    get serverDirectory() {
        return this.serverRootDirectory;
    }
    get port() {
        return this.configuration.port;
    }
    isSfdxProjectJsonPresent(rootDirectory) {
        return fs_extra_1.default.existsSync(path_1.default.join(rootDirectory, Constants_1.SFDX_PROJECT_JSON));
    }
    getPackagesFromMap(configMap, packageDirectories) {
        if (configMap.packageDirectories instanceof Array) {
            let defaultPackage = '';
            configMap.packageDirectories.forEach((element) => {
                if (element.default) {
                    defaultPackage = element.path;
                }
                else {
                    packageDirectories.push(element.path);
                }
            });
            if (defaultPackage) {
                packageDirectories.unshift(defaultPackage);
            }
        }
    }
    getPackageDirectories() {
        const packageDirectories = [];
        const sfdxProjectJsonPath = path_1.default.join(this.projectRootDirectory, Constants_1.SFDX_PROJECT_JSON);
        const jsonContents = fileUtils_1.getFileContents(sfdxProjectJsonPath);
        if (jsonContents && !!jsonContents.trim()) {
            try {
                this.getPackagesFromMap(JSON.parse(jsonContents), packageDirectories);
            }
            catch (e) {
                console.error(`Loading configuration from ${sfdxProjectJsonPath} failed with the error ${e.message}`);
            }
        }
        return packageDirectories;
    }
    setModulesSourceDirectory(defaultPackageDirectory) {
        this.projectConfiguration.modulesSourceDirectory = defaultPackageDirectory;
    }
    get modulesSourceDirectory() {
        const srcDir = fileUtils_1.getAbsolutePath(this.projectConfiguration.modulesSourceDirectory);
        if (!fs_extra_1.default.existsSync(srcDir) || !fs_extra_1.default.lstatSync(srcDir).isDirectory()) {
            console.warn(`modules source directory '${srcDir}' does not exist`);
        }
        return srcDir;
    }
    setStaticResourcesDirectories(packageDirectories) {
        this.projectConfiguration.staticResourcesDirectories = fileUtils_1.findAllFolderPaths(this.projectRootDirectory, packageDirectories, Constants_1.STATIC_RESOURCES, FOLDERS_TO_IGNORE);
    }
    get staticResourcesDirectories() {
        const staticResourceDirectoriesResults = [];
        if (!Array.isArray(this.projectConfiguration.staticResourcesDirectories)) {
            console.warn('staticResourcesDirectories must be provided in a list format');
            return staticResourceDirectoriesResults;
        }
        this.projectConfiguration.staticResourcesDirectories.forEach(staticResourceDirectory => {
            staticResourceDirectoriesResults.push(fileUtils_1.getAbsolutePath(staticResourceDirectory));
        });
        return staticResourceDirectoriesResults;
    }
    setCustomLabelsFile(defaultPackageDirectory) {
        this.projectConfiguration.customLabels = fileUtils_1.findFileWithDefaultPath(defaultPackageDirectory, Constants_1.DEFAULT_SFDX_PATH, CUSTOM_LABELS_FOLDER, CUSTOM_LABELS_FILE, FOLDERS_TO_IGNORE);
    }
    get customLabelsPath() {
        if (!this.projectConfiguration.customLabels) {
            return undefined;
        }
        const customLabelsFile = fileUtils_1.getAbsolutePath(this.projectConfiguration.customLabels);
        if (!fs_extra_1.default.existsSync(customLabelsFile) ||
            !fs_extra_1.default.lstatSync(customLabelsFile).isDirectory()) {
            console.warn(`Custom labels '${customLabelsFile}' were not found`);
        }
        return customLabelsFile;
    }
    setContentAssetsDirectories(packageDirectories) {
        this.projectConfiguration.contentAssetsDirectories = fileUtils_1.findAllFolderPaths(this.projectRootDirectory, packageDirectories, Constants_1.CONTENT_ASSETS, FOLDERS_TO_IGNORE);
    }
    get contentAssetsDirectories() {
        const contentAssetsDirectoriesResults = [];
        if (!Array.isArray(this.projectConfiguration.contentAssetsDirectories)) {
            console.warn('contentAssetsDirectories must be provided in a list format');
            return contentAssetsDirectoriesResults;
        }
        this.projectConfiguration.contentAssetsDirectories.forEach(contentAssetDirectory => {
            contentAssetsDirectoriesResults.push(fileUtils_1.getAbsolutePath(contentAssetDirectory));
        });
        return contentAssetsDirectoriesResults;
    }
}
exports.default = Project;
//# sourceMappingURL=Project.js.map
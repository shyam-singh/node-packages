/*
 * This file has been generated by https://git.soma.salesforce.com/communities/talon-connect-gen. 
 * Do not edit. 
 */

import { fetch } from 'transport';
import { ValueChangedEvent } from 'wire-service';

const prefix = "/services/data/v49.0";

const auraMethodToResourceReferenceMapping =  {
			// Fetch standard field data, custom field data, and enrichment data for a single Product
			"CommerceCatalogController.getProductCategoryPath": {
				"urlPath": prefix + "/commerce/webstores/${webstoreId}/product-category-path/product-categories/${productCategoryId}",
				"urlPathParamNames": ["productCategoryId", "webstoreId"],
				"method": "GET"
			},
			// Fetch standard field data, custom field data, and enrichment data for a single Product
			"CommerceCatalogController.getProduct": {
				"urlPath": prefix + "/commerce/webstores/${webstoreId}/products/${productId}",
				"urlPathParamNames": ["productId", "webstoreId"],
				"method": "GET"
			},
			// Get the list price and buyer price for a product in the context of a Web Store for the given account and currency
			"CommerceStorePricingController.getProductPrice": {
				"urlPath": prefix + "/commerce/webstores/${webstoreId}/pricing/products/${productId}",
				"urlPathParamNames": ["productId", "webstoreId"],
				"method": "GET"
			},
			// Start a job to purge Missions activities for a user.
			"MissionsController.purgeUserMissionsActivities": {
				"urlPath": prefix + "/connect/communities/${communityId}/missions/activities/purge-job",
				"urlPathParamNames": ["communityId"],
				"method": "POST"
			},
			// Search for products in a webstore.
			"CommerceProductSearchController.productSearch": {
				"urlPath": prefix + "/commerce/webstores/${webstoreId}/search/product-search",
				"urlPathParamNames": ["webstoreId"],
				"inputRepresentation": "productSearchInput",
				"method": "POST"
			},
			// Get all the navigation menu items
			"NavigationMenuController.getCommunityNavigationMenu": {
				"urlPath": prefix + "/connect/communities/${communityId}/navigation-menu/navigation-menu-items",
				"urlPathParamNames": ["communityId"],
				"method": "GET"
			},
			// Retrieve a Quick Action layout.
			"ActionsController.getActionLayout": {
				"urlPath": prefix + "/ui-api/actions/layout/${actionApiName}",
				"urlPathParamNames": ["actionApiName"],
				"method": "GET"
			},
			// Retrieve presentation-ready action data about specific list-view listViewIds.
			"ActionsController.getListViewActions": {
				"urlPath": prefix + "/ui-api/actions/list-view/${listViewIds}",
				"urlPathParamNames": ["listViewIds"],
				"method": "GET"
			},
			// Retrieve presentation-ready action data about specific lookup objectApiNames.
			"ActionsController.getLookupActions": {
				"urlPath": prefix + "/ui-api/actions/lookup/${objectApiNames}",
				"urlPathParamNames": ["objectApiNames"],
				"method": "GET"
			},
			// Retrieve presentation-ready action data about specific mru-list objectApiNames.
			"ActionsController.getMRUListActions": {
				"urlPath": prefix + "/ui-api/actions/mru-list/${objectApiNames}",
				"urlPathParamNames": ["objectApiNames"],
				"method": "GET"
			},
			// Retrieve presentation-ready action data about specific recordId under the RecordEdit subcontext.
			"ActionsController.getRecordEditActions": {
				"urlPath": prefix + "/ui-api/actions/record/${recordIds}/record-edit",
				"urlPathParamNames": ["recordIds"],
				"method": "GET"
			},
			// Retrieve presentation-ready action data about specific recordIds.
			"ActionsController.getRecordActions": {
				"urlPath": prefix + "/ui-api/actions/record/${recordIds}",
				"urlPathParamNames": ["recordIds"],
				"method": "GET"
			},
			// Retrieve presentation-ready action data about specific recordId under the related-list-record relatedListRecordIds.
			"ActionsController.getRelatedListRecordActions": {
				"urlPath": prefix + "/ui-api/actions/record/${recordIds}/related-list-record/${relatedListRecordIds}",
				"urlPathParamNames": ["recordIds", "relatedListRecordIds"],
				"method": "GET"
			},
			// Retrieve presentation-ready action data about specific recordId for the RelatedList subcontexts relatedListIds.
			"ActionsController.getRelatedListActions": {
				"urlPath": prefix + "/ui-api/actions/record/${recordIds}/related-list/${relatedListIds}",
				"urlPathParamNames": ["recordIds", "relatedListIds"],
				"method": "GET"
			},
			// Retrieve lists for a given objectApiName.
			"ListUiController.getListsByObjectName": {
				"urlPath": prefix + "/ui-api/list-ui/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Retrieve list info.
			"ListUiController.getListInfoById": {
				"urlPath": prefix + "/ui-api/list-info/${listViewId}",
				"urlPathParamNames": ["listViewId"],
				"method": "GET"
			},
			// Retrieve list info.
			"ListUiController.getListInfoByName": {
				"urlPath": prefix + "/ui-api/list-info/${objectApiName}/${listViewApiName}",
				"urlPathParamNames": ["listViewApiName", "objectApiName"],
				"method": "GET"
			},
			// Returns record data to populate a list.
			"ListUiController.getListRecordsById": {
				"urlPath": prefix + "/ui-api/list-records/${listViewId}",
				"urlPathParamNames": ["listViewId"],
				"method": "GET"
			},
			// Returns record data to populate a list.
			"ListUiController.getListRecordsByName": {
				"urlPath": prefix + "/ui-api/list-records/${objectApiName}/${listViewApiName}",
				"urlPathParamNames": ["listViewApiName", "objectApiName"],
				"method": "GET"
			},
			// Retrieve list data and info.
			"ListUiController.getListUiById": {
				"urlPath": prefix + "/ui-api/list-ui/${listViewId}",
				"urlPathParamNames": ["listViewId"],
				"method": "GET"
			},
			// Retrieve list data and info.
			"ListUiController.getListUiByName": {
				"urlPath": prefix + "/ui-api/list-ui/${objectApiName}/${listViewApiName}",
				"urlPathParamNames": ["listViewApiName", "objectApiName"],
				"method": "GET"
			},
			// Returns record search results for the given lookup field.
			"LookupController.getLookupRecords": {
				"urlPath": prefix + "/ui-api/lookups/${objectApiName}/${fieldApiName}/${targetApiName}",
				"urlPathParamNames": ["fieldApiName", "objectApiName", "targetApiName"],
				"method": "GET"
			},
			// Retrieve MRU list info.
			"MruListUiController.getMruListInfo": {
				"urlPath": prefix + "/ui-api/mru-list-info/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Returns record data to populate an MRU list.
			"MruListUiController.getMruListRecords": {
				"urlPath": prefix + "/ui-api/mru-list-records/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Retrieve MRU list data and info.
			"MruListUiController.getMruListUi": {
				"urlPath": prefix + "/ui-api/mru-list-ui/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Retrieve presentation-ready metadata and data.
			"RecordUiController.getAggregateUi": {
				"urlPath": prefix + "/ui-api/aggregate-ui",
				"urlPathParamNames": [],
				"method": "GET"
			},
			// Executes multiple requests within a single request
			"RecordUiController.executeAggregateUi": {
				"urlPath": prefix + "/ui-api/aggregate-ui",
				"urlPathParamNames": [],
				"inputRepresentation": "input",
				"method": "POST"
			},
			// Retrieve record data for a list of recordIds.
			"RecordUiController.getRecordsWithFields": {
				"urlPath": prefix + "/ui-api/records/batch/${recordIds}",
				"urlPathParamNames": ["recordIds"],
				"method": "GET"
			},
			// Retrieve record data for a list of recordIds.
			"RecordUiController.getRecordsWithLayouts": {
				"urlPath": prefix + "/ui-api/records/batch/${recordIds}",
				"urlPathParamNames": ["recordIds"],
				"method": "GET"
			},
			// Get duplicate management configuration for a specific entity object
			"RecordUiController.getDedupeConfig": {
				"urlPath": prefix + "/ui-api/duplicates/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Retrieve a specific form by name.
			"RecordUiController.getFormByName": {
				"urlPath": prefix + "/ui-api/forms/${apiName}",
				"urlPathParamNames": ["apiName"],
				"method": "GET"
			},
			// Retrieve a specific layout.
			"RecordUiController.getLayout": {
				"urlPath": prefix + "/ui-api/layout/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Retrieve a specific layout's user state.
			"RecordUiController.getLayoutUserState": {
				"urlPath": prefix + "/ui-api/layout/${objectApiName}/user-state",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Update a specific layout's user state.
			"RecordUiController.updateLayoutUserState": {
				"urlPath": prefix + "/ui-api/layout/${objectApiName}/user-state",
				"urlPathParamNames": ["objectApiName"],
				"inputRepresentation": "userState",
				"method": "PATCH"
			},
			// Retrieve metadata about a list of objects.
			"RecordUiController.getObjectInfos": {
				"urlPath": prefix + "/ui-api/object-info/batch/${objectApiNames}",
				"urlPathParamNames": ["objectApiNames"],
				"method": "GET"
			},
			// Retrieve metadata about a specific object.
			"RecordUiController.getObjectInfo": {
				"urlPath": prefix + "/ui-api/object-info/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Returns the values for all picklist fields for a recordType
			"RecordUiController.getPicklistValuesByRecordType": {
				"urlPath": prefix + "/ui-api/object-info/${objectApiName}/picklist-values/${recordTypeId}",
				"urlPathParamNames": ["objectApiName", "recordTypeId"],
				"method": "GET"
			},
			// Returns the values for a specific picklist.
			"RecordUiController.getPicklistValues": {
				"urlPath": prefix + "/ui-api/object-info/${objectApiName}/picklist-values/${recordTypeId}/${fieldApiName}",
				"urlPathParamNames": ["fieldApiName", "objectApiName", "recordTypeId"],
				"method": "GET"
			},
			// Performs a predupe check on given a record.
			"RecordUiController.findDuplicates": {
				"urlPath": prefix + "/ui-api/predupe",
				"urlPathParamNames": [],
				"inputRepresentation": "recordInput",
				"method": "POST"
			},
			// Stores avatar association for specific records.
			"RecordUiController.postRecordAvatarAssociation": {
				"urlPath": prefix + "/ui-api/record-avatars/${recordId}/association",
				"urlPathParamNames": ["recordId"],
				"inputRepresentation": "input",
				"method": "POST"
			},
			// Retrieve avatar information about specific records.
			"RecordUiController.getRecordAvatars": {
				"urlPath": prefix + "/ui-api/record-avatars/batch/${recordIds}",
				"urlPathParamNames": ["recordIds"],
				"method": "GET"
			},
			// Retrieve default values for fields for cloning a record with optional record type.
			"RecordUiController.getRecordCloneDefaults": {
				"urlPath": prefix + "/ui-api/record-defaults/clone/${recordId}",
				"urlPathParamNames": ["recordId"],
				"method": "GET"
			},
			// Retrieve default values for fields for a new record of a particular object and optional record type.
			"RecordUiController.getRecordCreateDefaults": {
				"urlPath": prefix + "/ui-api/record-defaults/create/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Create a new record.
			"RecordUiController.createRecord": {
				"urlPath": prefix + "/ui-api/records",
				"urlPathParamNames": [],
				"inputRepresentation": "recordInput",
				"method": "POST"
			},
			// Delete record.
			"RecordUiController.deleteRecord": {
				"urlPath": prefix + "/ui-api/records/${recordId}",
				"urlPathParamNames": ["recordId"],
				"method": "DELETE"
			},
			// Retrieve record data.
			"RecordUiController.getRecordWithFields": {
				"urlPath": prefix + "/ui-api/records/${recordId}",
				"urlPathParamNames": ["recordId"],
				"method": "GET"
			},
			// Retrieve record data.
			"RecordUiController.getRecordWithLayouts": {
				"urlPath": prefix + "/ui-api/records/${recordId}",
				"urlPathParamNames": ["recordId"],
				"method": "GET"
			},
			// Update an existing record.
			"RecordUiController.updateRecord": {
				"urlPath": prefix + "/ui-api/records/${recordId}",
				"urlPathParamNames": ["recordId"],
				"inputRepresentation": "recordInput",
				"method": "PATCH"
			},
			// Retrieve default values for fields for cloning a record with optional record type.
			"RecordUiController.getRecordDefaultsTemplateClone": {
				"urlPath": prefix + "/ui-api/record-defaults/template/clone/${recordId}",
				"urlPathParamNames": ["recordId"],
				"method": "GET"
			},
			// Retrieve default values for fields for a new record of a particular object and optional record type without layouts.
			"RecordUiController.getRecordDefaultsTemplateForCreate": {
				"urlPath": prefix + "/ui-api/record-defaults/template/create/${objectApiName}",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Retrieve presentation-ready metadata and data about specific records.
			"RecordUiController.getRecordUis": {
				"urlPath": prefix + "/ui-api/record-ui/${recordIds}",
				"urlPathParamNames": ["recordIds"],
				"method": "GET"
			},
			// Retrieve metadata of validation rules for the given object
			"RecordUiController.getValidationRulesInfo": {
				"urlPath": prefix + "/ui-api/object-info/${objectApiName}/validation-rules-info",
				"urlPathParamNames": ["objectApiName"],
				"method": "GET"
			},
			// Retrieve a batch of related list info.
			"RelatedListUiController.getRelatedListInfoBatch": {
				"urlPath": prefix + "/ui-api/related-list-info/batch/${parentObjectApiName}/${relatedListNames}",
				"urlPathParamNames": ["parentObjectApiName", "relatedListNames"],
				"method": "GET"
			},
			// Retrieve collection of related list summaries.
			"RelatedListUiController.getRelatedListInfoCollection": {
				"urlPath": prefix + "/ui-api/related-list-info/${parentObjectApiName}",
				"urlPathParamNames": ["parentObjectApiName"],
				"method": "GET"
			},
			// Retrieve related info.
			"RelatedListUiController.getRelatedListInfo": {
				"urlPath": prefix + "/ui-api/related-list-info/${parentRecordId}/${relatedListId}",
				"urlPathParamNames": ["parentRecordId", "relatedListId"],
				"method": "GET"
			},
			// Retrieve related info.
			"RelatedListUiController.getRelatedListInfoByApiName": {
				"urlPath": prefix + "/ui-api/related-list-info/${parentObjectApiName}/${relatedListId}",
				"urlPathParamNames": ["parentObjectApiName", "relatedListId"],
				"method": "GET"
			},
			// Update user preferences on an existing related list.
			"RelatedListUiController.updateRelatedListInfoByApiName": {
				"urlPath": prefix + "/ui-api/related-list-info/${parentObjectApiName}/${relatedListId}",
				"urlPathParamNames": ["parentObjectApiName", "relatedListId"],
				"method": "PATCH"
			},
			// Retrieve a batch of record counts.
			"RelatedListUiController.getRelatedListsRecordCount": {
				"urlPath": prefix + "/ui-api/related-list-count/batch/${parentRecordId}/${relatedListNames}",
				"urlPathParamNames": ["parentRecordId", "relatedListNames"],
				"method": "GET"
			},
			// Retrieve record counts.
			"RelatedListUiController.getRelatedListRecordCount": {
				"urlPath": prefix + "/ui-api/related-list-count/${parentRecordId}/${relatedListName}",
				"urlPathParamNames": ["parentRecordId", "relatedListName"],
				"method": "GET"
			},
			// Returns a batch of record data to populate several related list.
			"RelatedListUiController.getRelatedListRecordsBatch": {
				"urlPath": prefix + "/ui-api/related-list-records/batch/${parentRecordId}/${relatedListIds}",
				"urlPathParamNames": ["parentRecordId", "relatedListIds"],
				"method": "GET"
			},
			// Returns record data to populate a related list.
			"RelatedListUiController.getRelatedListRecords": {
				"urlPath": prefix + "/ui-api/related-list-records/${parentRecordId}/${relatedListId}",
				"urlPathParamNames": ["parentRecordId", "relatedListId"],
				"method": "GET"
			},
};

export function getResourceReferenceFromAuraMethod(auraMethod) {
	return auraMethodToResourceReferenceMapping[auraMethod];
}

export const wire = function({method, urlPathParamNames, urlPath, inputRepresentation}){

	const parseResponse = (response) => {
		if (!response.ok) {
          throw response.statusText; // eslint-disable-line no-throw-literal
        }
		return response.status !== 204 && response.json();
	};

	return (eventTarget) => {

		let path;
		let body;

		eventTarget.addEventListener('connect', () => {
			if(path) {
				fetch(path, { method, body: JSON.stringify(body) })
				.then(parseResponse)
				.then(response => {
					eventTarget.dispatchEvent(new ValueChangedEvent(response));
				});
			}
		});

		eventTarget.addEventListener('config', config => {
			const remainingParams = { ...config };
			const init = { method };

			// replace the path params
			path = urlPathParamNames.reduce((currentPath, paramName) => {
				const value = remainingParams[paramName];
				delete remainingParams[paramName];
				return currentPath.replace('${' + paramName + '}', encodeURIComponent(value));
			}, urlPath);

			// get the POST/PATCH body
			if ((method === 'POST' || method === 'PATCH') && remainingParams[inputRepresentation]) {
				body = remainingParams[inputRepresentation];
				delete remainingParams[inputRepresentation];
				init.body = JSON.stringify(body);
			}

			// add the rest as query params
			if (Object.keys(remainingParams).length) {
				path += '?' + Object.entries(remainingParams).map(([key, val]) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&');
			}

			fetch(path, init)
				.then(parseResponse)
				.then(response => {
					eventTarget.dispatchEvent(new ValueChangedEvent(response));
				}
			);
		});
	};
}
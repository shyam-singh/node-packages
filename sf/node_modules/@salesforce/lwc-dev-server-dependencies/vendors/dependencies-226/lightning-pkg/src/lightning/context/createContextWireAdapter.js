import { readonly } from 'lwc';
import { register, ValueChangedEvent, LinkContextEvent } from 'wire-service';

export default function createContextWireAdapter(eventName, ctor) {
    const adapterFactory = eventTarget => {
        let unsubscribeCallback;

        function callback(data, unsubscribe) {
            eventTarget.dispatchEvent(new ValueChangedEvent(readonly(data)));
            unsubscribeCallback = unsubscribe;
        }

        eventTarget.addEventListener('connect', () => {
            const event = new LinkContextEvent(eventName, callback);
            eventTarget.dispatchEvent(event);
            if (unsubscribeCallback === undefined) {
                // no provider was found, in which case the default
                // context should be set. intentionally getting a copy
                // per consumer.
                const defaultContext = readonly(ctor.getDefaultContext());
                eventTarget.dispatchEvent(
                    new ValueChangedEvent(defaultContext)
                );
            }
        });

        eventTarget.addEventListener('disconnect', () => {
            if (unsubscribeCallback !== undefined) {
                unsubscribeCallback();
                unsubscribeCallback = undefined; // resetting it to support reinsertion
            }
        });
    };
    const adapter = Symbol('ContextProvider');
    register(adapter, adapterFactory);
    return adapter;
}

import emptyStateNoResultMRUText from '@salesforce/label/LightningLookup.emptyStateNoResultMRUText';
import emptyStateNoResultMRUWithoutText from '@salesforce/label/LightningLookup.emptyStateNoResultMRUWithoutText';
import emptyStateNoResultText from '@salesforce/label/LightningLookup.emptyStateNoResultText';
import labelAdvancedSearchMobile from '@salesforce/label/LightningLookup.advancedSearchMobile';
import { api, LightningElement } from 'lwc';
import * as CONSTANTS from './constants';
import {
    GET_LOOKUP_RECORDS_WIRE_CONSTANTS,
    LookupPerformanceLogger,
    log,
    LOGGING_CONSTANTS,
    COMMON_LOOKUP_CONSTANTS,
} from 'lightning/lookupUtils';
import panel from './lookupMobileSelectionPanel.html';
import stencil from './loadingStencil.html';

export default class LightningLookupMobileSelectionPanel extends LightningElement {
    // ================================================================================
    // PUBLIC PROPERTIES
    // ================================================================================
    /**
     * The list of entities to filter on.
     * @type {Array}
     */
    @api
    get filterItems() {
        return this._filterItems;
    }

    set filterItems(filterOptions) {
        this._filterItems = filterOptions;
        if (filterOptions.length) {
            this.filterIconName = filterOptions[0].iconName;
            this.filterIconAlternativeText =
                filterOptions[0].iconAlternativeText;
        }
    }

    /**
     * The list of items to display in combobox.
     * @type {Array}
     */
    @api
    get items() {
        return this._items;
    }

    set items(groupedItems) {
        this._items = groupedItems;
        this._initialDataRequestComplete = true;
        this._focusCombobox();
        const { searchType, items } = this._getSearchTypeAndItems(groupedItems);
        if (searchType && items) {
            this._manageNoResultsEmptyState();
            this._lookupPerformanceLogger.startRenderMark();
            this._lookupPerformanceLogger.mergeTransactionAttributesWith({
                qResults: items.length,
                qType: searchType,
            });
        }
    }

    /**
     * The placeholder text to show in the input
     */
    @api placeholder;

    /**
     * Boolean value indicating whether or not to show the spinner
     */
    @api showActivityIndicator = false;

    // ================================================================================
    // REACTIVE PROPERTIES
    // ================================================================================
    emptyState = {
        show: false,
        text: '',
        subText: '',
    };

    filterIconName;

    filterIconAlternativeText;

    inputText = '';

    stencilArray = [];

    // ================================================================================
    // PRIVATE PROPERTIES
    // ================================================================================
    _filterItems = [];

    _initialDataRequestComplete = false;

    _items = [];

    _lookupPerformanceLogger = new LookupPerformanceLogger();

    // ================================================================================
    // LIFECYCLE METHODS
    // ================================================================================
    connectedCallback() {
        this._lookupPerformanceLogger.mergeTransactionAttributesWith({
            isMobile: true,
        });
        this._lookupPerformanceLogger.startTransaction();
        this._generatePlaceholderArray();
        // request recent items when connected
        this._dispatchInputChangeEvent(CONSTANTS.EMPTY_TEXT);
    }

    render() {
        return this._initialDataRequestComplete ? panel : stencil;
    }

    renderedCallback() {
        this._lookupPerformanceLogger.endRenderMark();
        this._lookupPerformanceLogger.endTransaction();
    }

    // ================================================================================
    // HANDLER METHODS
    // ================================================================================
    handleInputChange(event) {
        if (!event.detail) {
            return;
        }

        this._lookupPerformanceLogger.startTransaction();

        const text = event.detail.value || '';
        this.inputText = text;

        this._lookupPerformanceLogger.mergeTransactionAttributesWith({
            qLength: text ? text.length : 0,
        });

        // re-dispatch event to be listened to by the panel instance in lookupMobile
        this._dispatchInputChangeEvent(text);
    }

    handleSelect(event) {
        if (!event.detail) {
            return;
        }

        const value = event.detail && event.detail.value;

        this._logItemSelected(value);

        // re-dispatch event to be listened to by the panel instance in lookupMobile
        this.dispatchEvent(
            new CustomEvent('select', {
                detail: {
                    value,
                },
            })
        );
    }

    // ================================================================================
    // PRIVATE METHODS
    // ================================================================================
    _dispatchInputChangeEvent(text) {
        this.dispatchEvent(
            new CustomEvent('textinput', {
                detail: {
                    value: text,
                },
            })
        );
    }

    _focusCombobox() {
        const combobox = this.template.querySelector(
            CONSTANTS.LIGHTNING_MOBILE_COMBOBOX
        );
        if (combobox) {
            combobox.focus();
        }
    }

    _computeEmptyState(items, searchType, advancedSearchActionPresent) {
        let emptyState = {
            show: false,
            subText: '',
            text: emptyStateNoResultText.replace('{0}', this.inputText),
        };
        if (items.length === 0) {
            emptyState.show = true;
            if (this._isTypeAhead(searchType) && advancedSearchActionPresent) {
                emptyState.show = false;
            } else if (this._isMRU(searchType)) {
                emptyState.subText = emptyStateNoResultMRUWithoutText;
                emptyState.text = emptyStateNoResultMRUText;
            }
        }
        return emptyState;
    }

    _manageNoResultsEmptyState() {
        const advancedSearchText = labelAdvancedSearchMobile.replace(
            '{0}',
            this.inputText
        );
        const advancedSearchActionPresent = !!this.items.find(
            item => item.action && item.text === advancedSearchText
        );
        const { searchType, items } = this._getSearchTypeAndItems(this.items);
        if (searchType && items) {
            this.emptyState = this._computeEmptyState(
                items,
                searchType,
                advancedSearchActionPresent
            );
        }
    }

    _getSearchTypeAndItems(items) {
        const groupedRecords = items.find(item => !item.action);
        if (groupedRecords) {
            return {
                searchType: groupedRecords.searchType,
                items: groupedRecords.items,
            };
        }
        return {};
    }

    _isMRU(searchType) {
        return (
            searchType === GET_LOOKUP_RECORDS_WIRE_CONSTANTS.SEARCH_TYPE_RECENT
        );
    }

    _isAdvancedSearch(searchType) {
        return (
            searchType === GET_LOOKUP_RECORDS_WIRE_CONSTANTS.SEARCH_TYPE_FULL
        );
    }

    _isTypeAhead(searchType) {
        return (
            searchType ===
            GET_LOOKUP_RECORDS_WIRE_CONSTANTS.SEARCH_TYPE_TYPEAHEAD
        );
    }

    _logItemSelected(value) {
        if (value === COMMON_LOOKUP_CONSTANTS.ACTION_ADVANCED_SEARCH) {
            log(
                LOGGING_CONSTANTS.LOG_EVENT_CLICK,
                LOGGING_CONSTANTS.LOG_SCOPE_INPUT_LOOKUP_MOBILE,
                LOGGING_CONSTANTS.LOG_TARGET_LOOKUP_ACTION_OPTION,
                {
                    type: LOGGING_CONSTANTS.LOG_ACTION_SEARCH_OPTION,
                }
            );
            this._lookupPerformanceLogger.startTransaction();
        } else {
            const { searchType, items } = this._getSearchTypeAndItems(
                this.items
            );
            const itemCount = items.length;
            const position = items.findIndex(item => {
                return item.value === value;
            });
            log(
                LOGGING_CONSTANTS.LOG_EVENT_CLICK,
                LOGGING_CONSTANTS.LOG_SCOPE_INPUT_LOOKUP_MOBILE,
                LOGGING_CONSTANTS.LOG_TARGET_LOOKUP_SUGGESTION_OPTION,
                {
                    recordId: value,
                    position,
                    qLength: this.inputText.length,
                    qType: searchType,
                    qResults: itemCount,
                }
            );
        }
    }

    _generatePlaceholderArray() {
        this.stencilArray = [...Array(CONSTANTS.STENCIL_ARRAY_LENGTH)].map(
            (_, index) => {
                return {
                    id: `${CONSTANTS.STENCIL_PLACEHOLDER_ID_PREFIX}${index}`,
                };
            }
        );
    }
}
